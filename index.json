[{"body":"","link":"https://kane.mx/tags/amazon-codewhisperer/","section":"tags","tags":null,"title":"Amazon CodeWhisperer"},{"body":" Disclaimer: the cover image was generated by Amazon Bedrock's Titan Image Generator G1.\nAWS CLI is a swiss knife for orchestrating the operations of AWS resources. Especially, the filter option could help your filter and transform the output then combine with other Linux commands together.\nThis post collects the CLI usages to resolve my AWS operation needs.\nDelete the legacy versions of a service catalog product AWS Service Catalog has default 100 versions per product. Below is a one line command to delete the legacy versions.\n1export PRODUCT_ID=\u0026lt;product-id\u0026gt; 2 3# query the version name starting with \u0026#39;v5.0.0\u0026#39; then show Id and Name only 4aws servicecatalog describe-product --no-paginate --id $PRODUCT_ID --query \u0026#39;ProvisioningArtifacts[?starts_with(Name, `v5.0.0`)].{Id:Id, Name:Name}\u0026#39; 5 6# query the version name contains \u0026#39;v5.0.0-beta\u0026#39; then delete them 7aws servicecatalog describe-product --no-paginate --id $PRODUCT_ID --query \u0026#39;ProvisioningArtifacts[?contains(Name, `v5.0.0-beta`)].Id\u0026#39; |jq -r \u0026#39;.[]\u0026#39; | xargs -I {} aws servicecatalog delete-provisioning-artifact --product-id $PRODUCT_ID --provisioning-artifact-id {} Public all S3 objects with specific prefix 1aws s3 ls s3://$name/$prefix --recursive | awk \u0026#39;{print $4}\u0026#39; | xargs -I {} -n 1 aws s3api put-object-acl --acl public-read --bucket $name --key {} Reset resource policy of CloudWatch logs You might encounter a CloudFormation stack deployment failure due to creating CloudWatch log group with an error message like the one below,\nCannot enable logging. Policy document length breaking Cloudwatch Logs Constraints, either \u0026lt; 1 or \u0026gt; 5120 (Service: AmazonApiGatewayV2; Status Code: 400; Error Code: BadRequestException; Request ID: xxx-yyy-zzz; Proxy: null)\nCloudWatch Logs resource policies are limited to 5120 characters. The remediation is merging or removing useless policies, then updating the resource policies of CloudWatch logs to reduce the number of policies.\nBelow is a sample command to reset resource policy of CloudWatch logs:\nPush Helm chart to all regional ECR repositories Import a local SSH key to all AWS regions Query latest amazon linux2 AMI Delete multiple CloudWatch Log groups Launch an EC2 within default VPC with default security group Add below script in your .zshrc, then run ec2-launch-amazon-linux in terminal to launch a new instance.\nAmazon CodeWhisperer for command line is a new set of capabilities and integrations for AI-powered productivity tool, Amazon CodeWhisperer, that makes software developers more productive in the command line. It can also assist you generating the CLI command based on your natural language inputs.\n","link":"https://kane.mx/posts/2024/awscli-collection/","section":"posts","tags":["AWS","AWS CLI","Amazon CodeWhisperer","Tips","Collections"],"title":"Awesome AWS CLI"},{"body":"","link":"https://kane.mx/tags/aws/","section":"tags","tags":null,"title":"AWS"},{"body":"","link":"https://kane.mx/tags/aws-cli/","section":"tags","tags":null,"title":"AWS CLI"},{"body":"","link":"https://kane.mx/categories/blogging/","section":"categories","tags":null,"title":"blogging"},{"body":"","link":"https://kane.mx/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://kane.mx/tags/collections/","section":"tags","tags":null,"title":"Collections"},{"body":"","link":"https://kane.mx/posts/","section":"posts","tags":null,"title":"Posts"},{"body":"","link":"https://kane.mx/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://kane.mx/","section":"","tags":null,"title":"The road"},{"body":"","link":"https://kane.mx/tags/tips/","section":"tags","tags":null,"title":"Tips"},{"body":"","link":"https://kane.mx/tags/aws-cdk/","section":"tags","tags":null,"title":"AWS CDK"},{"body":"","link":"https://kane.mx/tags/aws-lambda/","section":"tags","tags":null,"title":"AWS Lambda"},{"body":" Disclaimer: the cover image was generated by StableDiffusionXL with prompts 'cover image, spring boot, flask framework running in aws lambda'.\nWhen deploying and operating a web application on the cloud, you prefer to use your favorite programming language and web framework. Also, you want to benefit from Serverless technologies for stability, scalability, cost optimization, and operation excellence.\nAWS Lambda Web Adapter is a tool that perfectly meets your expectations. It lifts and shifts the web application based on your preferred language and web framework, including FastAPI, Flask, Django, Express.js, Next.js, Spring Boot, Nginx, PHP, Rust, Golang Gin, Laravel, ASP.NET, and so on! You don't have to change any code to migrate your application to Lambda runtime. It also supports WebSocket and streaming features that work well with your LLM applications.\nAnother use case is that you can orchestrate your cloud infrastructure to support different network topologies without changing any code. Assuming you are ISV, your customers want to deploy your services as both public service and private service. With lambda web adapter, you can share the source code of the service, just orchestrating the AWS services to meet the requirements.\nPublic service pattern: CloudFront + S3 + API Gateway + Lambda You can use CloudFront to publish your entire web service. Using S3 to host all static content of your site and API Gateway with Lambda integration serves as the backend API.\nThe pattern architect for hosting web application as public service Private service pattern: Application Load Balancer (ALB) + Lambda With lambda web adapter, you can deploy your web application with Amazon VPC without exposing it to the internet. In this pattern, we choose ALB as the gateway of network traffic, then forward the different requests to two Lambda functions running web frontend and backend correspondingly.\nThe pattern architect for hosting web application as private service without public access In Clickstream Analytics on AWS solution it applies the above patterns to deploy its web console for different network topologies without changing the code of the web application. Also, the solution implements the above pattern as CDK constructs for replication using,\nCloudFront + S3 + API Gateway + Lambda ALB + Lambda Learns While implementing the above patterns in the Clickstream solution, we learned the below tips for applying them on AWS.\nFor CloudFront + S3 + API Gateway + Lambda Put API Gateway behind CloudFront for the same origin Use CloudFront function to rewrite requests for React Browser Router Can not enable access log of CloudFront in the same region when deploying to opt-in regions For ALB + Lambda The payload size for Lambda behind ALB is 1MB Split the bundled JS into multiple chunks Handle with the authentication and authorization via your Web framework I presented this topic in AWS User Group Taiwan CDK Squad Meetup in Chinese. Below are the slides in the community sharing,\n","link":"https://kane.mx/posts/2023/build-serverless-web-application-with-aws-lambda-web-adapter/","section":"posts","tags":["AWS","AWS CDK","AWS Lambda","Lambda Web Adapter","Serverless Pattern","Serverless","CDK Construct"],"title":"Build serverless web application with AWS Lambda web adapter"},{"body":"","link":"https://kane.mx/tags/cdk-construct/","section":"tags","tags":null,"title":"CDK Construct"},{"body":"","link":"https://kane.mx/categories/effective-cloud-computing/","section":"categories","tags":null,"title":"effective-cloud-computing"},{"body":"","link":"https://kane.mx/tags/lambda-web-adapter/","section":"tags","tags":null,"title":"Lambda Web Adapter"},{"body":"","link":"https://kane.mx/tags/serverless/","section":"tags","tags":null,"title":"Serverless"},{"body":"","link":"https://kane.mx/tags/serverless-pattern/","section":"tags","tags":null,"title":"Serverless Pattern"},{"body":"","link":"https://kane.mx/tags/aws-js-sdk/","section":"tags","tags":null,"title":"AWS JS SDK"},{"body":"","link":"https://kane.mx/tags/tip/","section":"tags","tags":null,"title":"Tip"},{"body":"When programming with the AWS SDK, developers sometimes want to debug a specific HTTP request when invoking an SDK API. Due to the poor documentation of AWS JS SDK v3, it takes a lot of work to find a way to print the verbose logging of AWS SDK by asking it to the LLMs.\nBelow is a practical tip for enabling verbose logging for AWS JS SDK v3.\nSolution 1 - specify a custom logger for AWS SDK clients 1import { DescribeParametersCommand, SSMClient } from \u0026#34;@aws-sdk/client-ssm\u0026#34;; 2import * as log4js from \u0026#34;log4js\u0026#34;; 3 4log4js.configure({ 5 appenders: { out: { type: \u0026#34;stdout\u0026#34; } }, 6 categories: { default: { appenders: [\u0026#34;out\u0026#34;], level: \u0026#34;debug\u0026#34; } }, 7}); 8 9const logger = log4js.getLogger(); 10 11const ssmClient = new SSMClient({ 12 logger: logger, 13}); Solution 2 - use middleware to hook the life cyele of request 1import { DescribeParametersCommand, SSMClient } from \u0026#34;@aws-sdk/client-ssm\u0026#34;; 2 3const logRequestMiddleware = (next: any, _context: any) =\u0026gt; async (args: any) =\u0026gt; { 4 console.log(\u0026#39;Request:\u0026#39;, args.request); 5 return next(args); 6}; 7 8const ssmClient = new SSMClient({ 9}); 10 11ssmClient.middlewareStack.add(logRequestMiddleware, { step: \u0026#39;finalizeRequest\u0026#39; }); See complete working example gist below,\n","link":"https://kane.mx/posts/2023/aws-js-sdk-v3-verbose-logging/","section":"posts","tags":["AWS JS SDK","Tip","AWS"],"title":"Verbose logging for AWS JS SDK v3"},{"body":"","link":"https://kane.mx/tags/amazon-api-gateway/","section":"tags","tags":null,"title":"Amazon API Gateway"},{"body":"","link":"https://kane.mx/tags/amazon-sqs/","section":"tags","tags":null,"title":"Amazon SQS"},{"body":"Application Programming Interfaces(APIs) is a critical part of the web service, Werner Vogel, the CTO of AWS had a great 6 Rules for Good API Design presentation in 2021 re:Invent keynote.\nIn AWS the developers could manage and proxy the APIs via Amazon API Gateway. The developers can use console, CLI, API or IaC code(for example, Terraform/CloudFormation/CDK) to provisioning the API resources on AWS. However some developers might flavor with using OpenAPI specification to define the APIs. It enables multiple services/tools to understand the APIs' specification, such as Postman. Amazon API Gateway supports this use case, you can import the existing OpenAPI definition as API.\nAmazon API Gateway offers two RESTful API products, REST API and HTTP API. Both of those two APIs support importing OpenAPI definition, but they might use different OpenAPI extensions to support different features.\nAnd below example will use infrastructure as code(AWS CDK) to import the OpenAPI definition to the API Gateway APIs. While importing OpenAPI definition, the most challenge is updating the OpenAPI definition with dynamic resources information(for example, IAM role for calling downstream resources of integration) before importing the OpenAPI definition. For AWS CDK(on top of AWS CloudFormation) uses the intrinsic functions of CloudFormation(Fn::Join) to archive it.\nREST API 1 const deployOptions = { 2 stageName: \u0026#39;\u0026#39;, 3 loggingLevel: MethodLoggingLevel.ERROR, 4 dataTraceEnabled: false, 5 metricsEnabled: true, 6 tracingEnabled: false, 7 }; 8 const restOpenAPISpec = this.resolve(Mustache.render( 9 fs.readFileSync(path.join(__dirname, \u0026#39;./rest-sqs.yaml\u0026#39;), \u0026#39;utf-8\u0026#39;), 10 variables)); 11 new SpecRestApi(this, \u0026#39;rest-to-sqs\u0026#39;, { 12 apiDefinition: ApiDefinition.fromInline(restOpenAPISpec), 13 endpointExportName: \u0026#39;APIEndpoint\u0026#39;, 14 deployOptions, 15 }); HTTP API But above solution does not work with HTTP API, because the CloudFormation of HTTP API does not support intrinsic functions of CFN. \u0026#x1f625; The workaround is putting the OpenAPI definition to Amazon S3 firstly, then import it from S3 bucket via CloudFormation. It involves putting the OpenAPI definition with dynamic resource information to S3 bucket before importing the OpenAPI definition from S3. Here I leveage the CDK built-in custom resource to call S3 API to put the OpenAPI definition file to S3.\n22/11/09 UPDATE: The Body of AWS::ApiGatewayV2::Api only supports the json object. It works after converting the Yaml OpenAPI definition to JSON!\n1const yaml = require(\u0026#39;js-yaml\u0026#39;); 2 3... 4 5 // import openapi as http api 6 const variables = { 7 integrationRoleArn: apiRole.roleArn, 8 queueName: bufferQueue.queueName, 9 queueUrl: bufferQueue.queueUrl, 10 }; 11 const openAPISpec = this.resolve(yaml.load(Mustache.render( 12 fs.readFileSync(path.join(__dirname, \u0026#39;./http-sqs.yaml\u0026#39;), \u0026#39;utf-8\u0026#39;), variables))); 13 14 const httpApi = new CfnApi(this, \u0026#39;http-api-to-sqs\u0026#39;, { 15 body: openAPISpec, 16 failOnWarnings: false, 17 }); The example code creates both REST API and HTTP API, both of them forwards the events to Amazon SQS queue that are sent by HTTP POST requests. See OpenAPI definition of HTTP to SQS, OpenAPI definition of REST to SQS or complete source for further reference.\n","link":"https://kane.mx/posts/2022/import-oas-as-api-on-aws/","section":"posts","tags":["Serverless","Amazon API Gateway","OpenAPI","OAS","Amazon SQS","AWS","AWS CDK"],"title":"Define your API via OpenAPI definition on AWS"},{"body":"","link":"https://kane.mx/series/effective-cloud-computing/","section":"series","tags":null,"title":"effective-cloud-computing"},{"body":"","link":"https://kane.mx/tags/oas/","section":"tags","tags":null,"title":"OAS"},{"body":"","link":"https://kane.mx/tags/openapi/","section":"tags","tags":null,"title":"OpenAPI"},{"body":"","link":"https://kane.mx/series/","section":"series","tags":null,"title":"Series"},{"body":"","link":"https://kane.mx/series/serverless-computing/","section":"series","tags":null,"title":"serverless-computing"},{"body":"","link":"https://kane.mx/tags/codepipeline/","section":"tags","tags":null,"title":"CodePipeline"},{"body":"","link":"https://kane.mx/tags/continuous-deployment/","section":"tags","tags":null,"title":"Continuous Deployment"},{"body":"","link":"https://kane.mx/tags/devops/","section":"tags","tags":null,"title":"DevOps"},{"body":"DevOps pipeline is a key component of project operation, it helps you automate steps in your software delivery process.\nAmazon itself has rich expirence on DevOps with large scale services, it shares the lesson and learn from operating the Amazon's services. You can read this summary post written in Chinese.\nAlso AWS provides fully managed SaaS services for the lifecycle of software development, including AWS CodePipeline for automating continuous delivery pipelines, AWS CodeCommit for securely hosting highly scalable private Git repositories, AWS CodeArtifact for artifact management, AWS CodeBuild for building and testing code with continuous scaling and AWS CodeDeploy for automating code deployments to maintain application uptime.\nAWS Code series services are feasible to build the different DevOps pipelines to satisfy the customer's requirements. But it's required some work to assemble the building blocks to build the pipeline.\nCDK Pipeline is an abstract to simplify the builder experience to build DevOps pipeline for CDK application. It leveages the Infrastructure as Code and Construct to standarndize and customize the pipeline of CDK application.\nThe pipeline code just has few lines and looks like below,\n1 const connectArn = scope.node.tryGetContext(\u0026#39;SourceConnectionArn\u0026#39;); 2 if (!connectArn) {throw new Error(\u0026#39;Must specify the arn of source repo connection.\u0026#39;);} 3 const oidcSecret: string = scope.node.tryGetContext(\u0026#39;OIDCSerectArn\u0026#39;); 4 if (!oidcSecret) {throw new Error(\u0026#39;Must specify the context \u0026#34;OIDCSerectArn\u0026#34; for storing secret.\u0026#39;);} 5 6 const pipeline = new CodePipeline(this, \u0026#39;Pipeline\u0026#39;, { 7 synth: new ShellStep(\u0026#39;Synth\u0026#39;, { 8 input: CodePipelineSource.connection(\u0026#39;zxkane/cdk-collections\u0026#39;, \u0026#39;master\u0026#39;, { 9 connectionArn: connectArn, 10 codeBuildCloneOutput: true, 11 }), 12 installCommands: [ 13 \u0026#39;git submodule init \u0026amp;\u0026amp; git submodule update \u0026amp;\u0026amp; git submodule sync\u0026#39;, 14 \u0026#39;npm i --prefix serverlesstodo/frontend\u0026#39;, 15 \u0026#39;npm run build --prefix serverlesstodo/frontend\u0026#39;, 16 \u0026#39;yarn --cwd serverlesstodo install --check-files --frozen-lockfile\u0026#39;, 17 ], 18 commands: [ 19 \u0026#39;cd serverlesstodo\u0026#39;, 20 \u0026#39;npx projen\u0026#39;, 21 \u0026#39;npx projen test\u0026#39;, 22 `npx cdk synth serverlesstodo -c OIDCSerectArn=${oidcSecret} -c SourceConnectionArn=${connectArn} -c CognitoDomainPrefix=todolist-userpool-prod`, 23 ], 24 primaryOutputDirectory: \u0026#39;serverlesstodo/cdk.out/\u0026#39;, 25 }), 26 dockerEnabledForSynth: true, 27 codeBuildDefaults: { 28 cache: Cache.local(LocalCacheMode.SOURCE, LocalCacheMode.DOCKER_LAYER), 29 }, 30 synthCodeBuildDefaults: { 31 partialBuildSpec: BuildSpec.fromObject({ 32 version: \u0026#39;0.2\u0026#39;, 33 phases: { 34 install: { 35 \u0026#39;runtime-versions\u0026#39;: { 36 nodejs: 14, 37 }, 38 }, 39 }, 40 }), 41 }, 42 }); 43 44 pipeline.addStage(new TodolistApplication(this, \u0026#39;Prod\u0026#39;, { 45 env: { 46 account: process.env.CDK_DEFAULT_ACCOUNT, 47 region: process.env.CDK_DEFAULT_REGION, 48 }, 49 })); Some key points in above pipeline code snippet,\nthis example code hosts on Github, so using CodeStar connection to fetch code from Github synth of CodePipeline is the configuration of CodeBuild project, it installs the dependencies of project then build, test and generate the deployment artifacts(CloudFormation template), see docs of deploying from source the CDK pipeline has built-in mutation step to update pipeline itself before deploying the application After deploying the pipeline stack, the screenshot of pipeline looks like below, Todolist app pipeline As usual, all AWS resources are orchestrated by a AWS CDK project, it's easliy to be deployed to any account and any region of AWS!\nHappying continuously deploy your application \u0026#x1f680; \u0026#x1f606;\u0026#x1f606;\u0026#x1f606;\n","link":"https://kane.mx/posts/2022/build-serverless-app-on-aws/devops-pipeline/","section":"posts","tags":["Serverless","AWS","AWS CDK","CodePipeline","DevOps","Continuous Deployment"],"title":"Setup DevOps pipeline with few code"},{"body":"","link":"https://kane.mx/tags/amplify/","section":"tags","tags":null,"title":"Amplify"},{"body":"","link":"https://kane.mx/tags/api-gateway/","section":"tags","tags":null,"title":"API Gateway"},{"body":"","link":"https://kane.mx/tags/authentication/","section":"tags","tags":null,"title":"Authentication"},{"body":"","link":"https://kane.mx/tags/cognito/","section":"tags","tags":null,"title":"Cognito"},{"body":"When working on either 2C application or 2B service, the customers do not want to or is not allowed to sign up the new account, they can login the application via existing IdP or enterprise SSO. So, building the application supports the federated OIDC login to address such requirements.\nThis post extends the capability of Todolist application protected by Amazon Cognito, using Auth0 as the third party OpenID Connect provider introduces the external user pool.\nThe application also uses the AWS Amplify to build the frontend capabilities(for example, authentication, invoke backend restful api), Amazon Cognito providing both federated OIDC login and self-managed users sign in/sign up, and Amazon API Gateway providing the backend API and validating the token with OIDC provider.\nBelow is the key procedures to add the federated OIDC login to the existing web application protected by Cognito,\n1. Update the authorizer of API Gateway to validate the token issued by OIDC providers.\nThe previous authorizer is using API Gateway Cognito authorizer, it only can validate the token issued by Cognito user pool. Cognito user pool also complies with the OIDC standard, using Lambda authorizer can implement to validate the tokens issued by either Cognito user pool and third party OIDC provider.\nThe CDK code creates a lambda function as Lambda Authorizer of API Gateway, which sets the supported OIDC issuers as environment,\n1 const authFunc = new NodejsFunction(this, `${resourceName}AuthFunc`, { 2 entry: path.join(__dirname, \u0026#39;./lambda.d/authorizer/index.ts\u0026#39;), 3 handler: \u0026#39;handler\u0026#39;, 4 architecture: Architecture.ARM_64, 5 timeout: Duration.seconds(5), 6 memorySize: 128, 7 runtime: Runtime.NODEJS_16_X, 8 tracing: Tracing.ACTIVE, 9 environment: { 10 ISSUERS: issuers, 11 RESOURCE_PREFIX: Arn.format({ 12 service: \u0026#39;execute-api\u0026#39;, 13 resource: api.restApiId, 14 }, Stack.of(this)), 15 }, 16 }); The custom lambda authorizer uses the Auth0's jwt-decode and AWS JWT Verify to verify the ID tokens issued by OIDC provider. See source for detail implementation.\n2. Add the third party OIDC provider to Cognito user pool. It involves the client information with secrets generated by OIDC provider, we use the AWS Secrets Manager to securely store the credentials.\nAs prerequisites of this step, you must create an application in your OIDC provider. For example, creating an application in Auth0, then configure the allowed callback URLs to the pool domain. The next saving the issuer domain, client id, client secret and name(will be readable string in UI) to a secret in Secrets Manager. Todolist app in Auth0 The code snippet of CDK creates the external OIDC provider looks like below,\n1 const oidcSecretArn = this.node.tryGetContext(\u0026#39;OIDCSerectArn\u0026#39;); 2 var oidcProvider: UserPoolIdentityProviderOidc | undefined; 3 if (oidcSecretArn) { 4 const secret = Secret.fromSecretAttributes(this, \u0026#39;OIDCSecret\u0026#39;, { 5 secretCompleteArn: oidcSecretArn, 6 }); 7 oidcProvider = new UserPoolIdentityProviderOidc(this, \u0026#39;FedarationOIDC\u0026#39;, { 8 clientId: secret.secretValueFromJson(\u0026#39;clientId\u0026#39;).toString(), 9 clientSecret: secret.secretValueFromJson(\u0026#39;clientSecret\u0026#39;).toString(), 10 issuerUrl: secret.secretValueFromJson(\u0026#39;issuerUrl\u0026#39;).toString(), 11 name: secret.secretValueFromJson(\u0026#39;name\u0026#39;).toString(), 12 userPool: userpool, 13 scopes: [ 14 \u0026#39;profile\u0026#39;, 15 \u0026#39;openid\u0026#39;, 16 \u0026#39;email\u0026#39;, 17 ], 18 }); 19 userpool.registerIdentityProvider(oidcProvider); 20 } 3. Update the amplify configuration file with OIDC provider information.\n1 const amplifyConfFile = \u0026#39;aws-exports.json\u0026#39;; 2 const body = 3`{ 4 \u0026#34;aws_project_region\u0026#34;: \u0026#34;${Aws.REGION}\u0026#34;, 5 \u0026#34;Auth\u0026#34;: { 6 \u0026#34;region\u0026#34;: \u0026#34;${Aws.REGION}\u0026#34;, 7 \u0026#34;userPoolId\u0026#34;: \u0026#34;${poolInfo.userpool.userPoolId}\u0026#34;, 8 \u0026#34;userPoolWebClientId\u0026#34;: \u0026#34;${poolInfo.client.userPoolClientId}\u0026#34;, 9 \u0026#34;authenticationFlowType\u0026#34;: \u0026#34;USER_SRP_AUTH\u0026#34;, 10 \u0026#34;oauth\u0026#34;: { 11 \u0026#34;name\u0026#34;: \u0026#34;${poolInfo.oidc.name}\u0026#34;, 12 \u0026#34;domain\u0026#34;: \u0026#34;${poolInfo.poolDomain.domainName}.auth.${Aws.REGION}.amazoncognito.com\u0026#34;, 13 \u0026#34;scope\u0026#34;: [\u0026#34;email\u0026#34;, \u0026#34;openid\u0026#34;, \u0026#34;aws.cognito.signin.user.admin\u0026#34;, \u0026#34;profile\u0026#34;], 14 \u0026#34;redirectSignIn\u0026#34;: \u0026#34;${poolInfo.oidc.signinUrl}\u0026#34;, 15 \u0026#34;redirectSignOut\u0026#34;: \u0026#34;${poolInfo.oidc.signinUrl}\u0026#34;, 16 \u0026#34;responseType\u0026#34;: \u0026#34;code\u0026#34; 17 } 18 }, 19 \u0026#34;API\u0026#34;: { 20 \u0026#34;endpoints\u0026#34;: [ 21 { 22 \u0026#34;name\u0026#34;: \u0026#34;backend-api\u0026#34;, 23 \u0026#34;endpoint\u0026#34;: \u0026#34;https://${cloudFrontS3.cloudFrontWebDistribution.distributionDomainName}/prod/\u0026#34; 24 } 25 ] 26 } 27}`; 4. Customize the Amplify's React Authenticator component to add the federated OIDC login entrance.\n1 SignIn: { 2 Footer() { 3 const { toResetPassword } = useAuthenticator(); 4 5 return ( 6 \u0026lt;View textAlign=\u0026#34;center\u0026#34;\u0026gt; 7 \u0026lt;Divider orientation=\u0026#34;horizontal\u0026#34; /\u0026gt; 8 \u0026lt;Text\u0026gt; 9 { 10 !isAuthenticated \u0026amp;\u0026amp; ( 11 \u0026lt;View 12 as=\u0026#34;div\u0026#34; 13 backgroundColor=\u0026#34;var(--amplify-colors-white)\u0026#34; 14 borderRadius=\u0026#34;6px\u0026#34; 15 color=\u0026#34;var(--amplify-colors-blue-60)\u0026#34; 16 height=\u0026#34;4rem\u0026#34; 17 maxWidth=\u0026#34;100%\u0026#34; 18 padding=\u0026#34;1rem\u0026#34; 19 \u0026gt; 20 \u0026lt;Button 21 variation=\u0026#34;primary\u0026#34; 22 onClick={ 23 () =\u0026gt; { 24 Auth.federatedSignIn({ customProvider: oidcProviderName }); 25 }} 26 \u0026gt; 27 Sign In with {oidcProviderName} 28 \u0026lt;/Button\u0026gt; 29 \u0026lt;/View\u0026gt; 30 ) 31 } 32 \u0026lt;/Text\u0026gt; 33 \u0026lt;/View\u0026gt; 34 ); 35 }, 36 }, The new look of Amplify's authoricator component looks like below with both self-managed user pool and federated OIDC login, Todolist federated OIDC login As usual, all AWS resources are orchestrated by a AWS CDK project, it's easliy to be deployed to any account and any region of AWS!\nHappying logging your website with externl OIDC provider \u0026#x1f512; \u0026#x1f606;\u0026#x1f606;\u0026#x1f606;\n","link":"https://kane.mx/posts/2022/build-serverless-app-on-aws/federated-oidc-login-with-cognito-and-amplify/","section":"posts","tags":["Serverless","AWS","AWS CDK","API Gateway","Cognito","Amplify","OpenID Connect","Authentication"],"title":"Federated OIDC login with Cognito and Amplify"},{"body":"","link":"https://kane.mx/tags/openid-connect/","section":"tags","tags":null,"title":"OpenID Connect"},{"body":"","link":"https://kane.mx/tags/authorization/","section":"tags","tags":null,"title":"Authorization"},{"body":"Previous post we demonstrated how distributing and securely deploying the website to global end users. The authentication and authorization are always mandatory features of web application. Amazon Cognito is a managed AWS serverless service helping the applications to implement AuthN and AuthZ, with Cognito the applications securely scales to millions of users(up to 50,000 free users) supporting identity and access management standards, such as OAuth 2.0, SAML 2.0, and OpenID Connect.\nThe web application uses AWS Amplify to integrate with AWS services, such as Cognito and API Gateway. Below the procedures how integrating Cognito as AuthN via Amplify in Todolist project,\nadd amplify JS libraries into your project's dependencies 1{ 2 \u0026#34;name\u0026#34;: \u0026#34;todo-list\u0026#34;, 3 \u0026#34;dependencies\u0026#34;: { 4 \u0026#34;@aws-amplify/ui-react\u0026#34;: \u0026#34;^3.5.0\u0026#34;, 5 \u0026#34;aws-amplify\u0026#34;: \u0026#34;^4.3.34\u0026#34;, 6 \u0026#34;axios\u0026#34;: \u0026#34;^0.27.2\u0026#34;, 7 \u0026#34;react\u0026#34;: \u0026#34;^18.2.0\u0026#34;, 8 \u0026#34;react-dom\u0026#34;: \u0026#34;^18.2.0\u0026#34;, 9 \u0026#34;react-icons\u0026#34;: \u0026#34;^4.4.0\u0026#34;, 10 \u0026#34;sweetalert2\u0026#34;: \u0026#34;^11.4.24\u0026#34;, 11 \u0026#34;uuid\u0026#34;: \u0026#34;^8.3.2\u0026#34; 12 } 13} load the configuration file from server side and configure the Amplify categories 1 useEffect(() =\u0026gt; { 2 setLoadingConfig(true); 3 Axios.get(\u0026#34;/aws-exports.json\u0026#34;).then((res) =\u0026gt; { 4 const configData = res.data; 5 const tokenHeader = async () =\u0026gt; { return { Authorization: `Bearer ${(await Auth.currentSession()).getIdToken().getJwtToken()}` }; }; 6 configData.API.endpoints[0].custom_header = tokenHeader; 7 Amplify.configure(configData); 8 apiEndpointName = configData.API.endpoints[0].name; 9 setApiEndpoint(configData.API.endpoints[0].name); 10 11 Hub.listen(\u0026#39;auth\u0026#39;, ({ payload }) =\u0026gt; { 12 const { event } = payload; 13 switch (event) { 14 case \u0026#39;signIn\u0026#39;: 15 case \u0026#39;signUp\u0026#39;: 16 case \u0026#39;autoSignIn\u0026#39;: 17 getTasks(); 18 break; 19 } 20 }); 21 22 getTasks(); 23 24 setLoadingConfig(false); 25 }); 26 }, []); use [Authenticator component][authenticator] adding complete authentication flows with minimal boilerplate 1 return ( 2 \u0026lt;Authenticator components={components} loginMechanisms={[\u0026#39;email\u0026#39;]}\u0026gt; 3 {({ signOut, user }) =\u0026gt; ( 4 \u0026lt;Flex 5 direction=\u0026#34;column\u0026#34; 6 justifyContent=\u0026#34;flex-start\u0026#34; 7 alignItems=\u0026#34;center\u0026#34; 8 alignContent=\u0026#34;flex-start\u0026#34; 9 wrap=\u0026#34;nowrap\u0026#34; 10 gap=\u0026#34;1rem\u0026#34; 11 textAlign=\u0026#34;center\u0026#34; 12 \u0026gt; 13 \u0026lt;View width=\u0026#34;100%\u0026#34;\u0026gt; 14 ... 15 \u0026lt;/View\u0026gt; 16 \u0026lt;/Flex\u0026gt; 17 )} 18 \u0026lt;/Authenticator\u0026gt; 19 ) update TODO CRUD methods to use Amplify's API catagory to make HTTP requests to API Gateway 1 const getTasks = async () =\u0026gt; { 2 const canEnter = await ionViewCanEnter(); 3 if (canEnter) { 4 try { 5 setLoadingData(true); 6 7 const initData = { 8 headers: { \u0026#34;content-type\u0026#34;: \u0026#34;application/json\u0026#34; }, // OPTIONAL 9 response: true, // OPTIONAL (return the entire Axios response object instead of only response.data) 10 }; 11 API 12 .get(apiEndpointName || apiEndpoint, \u0026#34;/todo\u0026#34;, initData) 13 .then(res =\u0026gt; { 14 setLoadingData(false); 15 const tasksData = res.data; 16 if ((typeof tasksData === \u0026#34;string\u0026#34;)) { 17 Swal.fire(\u0026#34;Ops..\u0026#34;, tasksData); 18 } else { 19 setTasks(tasksData); 20 } 21 }) 22 .catch(error =\u0026gt; { 23 setLoadingData(false); 24 console.error(error); 25 Swal.fire( 26 `${error.message}`, 27 `${error?.response?.data?.message}`, 28 undefined 29 ); 30 }); 31 } catch (error) { 32 console.info(error); 33 } 34 } 35 }; All above changes are implemented Cognito authN with the web react application.\nIn the server-side the Cognito user pool will be provisioned, the API Gateway endpoint is authorized by Cognito user pool authorizer. The Amplify configuration file aws-exports.json will be created on the air when provisioning the stack with the user pool and API information.\nAs usual, all AWS resources are orchestrated by AWS CDK project, it's easliy to be deployed to any account and any region of AWS!\nHappying protecting the website with Cognito \u0026#x1f512; \u0026#x1f606;\u0026#x1f606;\u0026#x1f606;\n","link":"https://kane.mx/posts/2022/build-serverless-app-on-aws/protect-website-with-cognito/","section":"posts","tags":["Serverless","AWS","AWS CDK","API Gateway","Cognito","Amplify","Authentication","Authorization"],"title":"Protect website with Cognito"},{"body":"","link":"https://kane.mx/tags/cloudfront/","section":"tags","tags":null,"title":"CloudFront"},{"body":"It's a well known pattern to distribute the website via CDN globally, it reduces the latency of the site and improve the availibity and security leveraging the infrastructure of cloud provider.\nUsing CDN service CloudFront and simple storage S3 on AWS hosts the static website. It well fits the SPA(single page application) framework technologies, for example, React, Vue and Angularjs. There are lots of existing project and code snippets to sharing this pattern, such as CloudFront to S3 and API Gateway and AWS S3 / React Website Pattern.\nIn the TODO application it reuses an existing project Todolist built by React. The original Todolist application is a pure client application without communicating the backend service. In this demo the Todolist application is updated to communicate with Restful TODO APIs created by Amazon API Gateway. Also the restful backend API is distributed by CDN CloudFront to reduce the latency and protect the origin service without crossing domain request.\nTodolist app The demo uses the aws-cloudfront-s3 construct from AWS Solutions Constructs to simplify orchestrating the CloudFront to S3/API Gateway pattern. And use AWS S3 Deployment Construct Library to publish the static web page to S3 bucket. See below code snippet how archive it in CDK.\nAs usual, all AWS resources are orchestrated by AWS CDK project, it's easliy to be deployed to any account and any region of AWS!\nHappying distributing the website \u0026#x1f310; \u0026#x1f606;\u0026#x1f606;\u0026#x1f606;\n","link":"https://kane.mx/posts/2022/build-serverless-app-on-aws/static-website/","section":"posts","tags":["Serverless","AWS","AWS CDK","CloudFront","S3"],"title":"Distribute the website globally"},{"body":"","link":"https://kane.mx/tags/s3/","section":"tags","tags":null,"title":"S3"},{"body":"Most web applications are using Restful APIs to interactive with the backend services. In the TODO application, it's the straight forward to get, update and delete the items from backend database. Amazon DynamoDB is a key-value database, it fits for this scenario with scalability and optimized pay-as-you-go cost. Also Amazon API Gateway has built-in integration with AWS serivces, the restful API can be transformed to the request to DynamoDB APIs. Using this combination you can provide the restful APIs only provisioning AWS resources without writing the CRUD code!\nLet's assume the TODO application having below model to represent the TODO items,\n1{ 2\u0026#34;subject\u0026#34;: \u0026#34;my-memo\u0026#34;, // some subject of TODO item 3\u0026#34;description\u0026#34;: \u0026#34;the great idea\u0026#34;, // some description for the TODO item 4\u0026#34;dueDate\u0026#34;: 1661926828, // the timestamp of sceonds for the due date of TODO item 5} Then define below restful APIs for list, fetch, update and delete TODO item/items.\nCreate new TODO item 1PUT /todo Update a TODO item 1POST /todo/\u0026lt;todo id\u0026gt; Delete a TODO item 1DELETE /todo/\u0026lt;todo id\u0026gt; List TODO items 1GET /todo All magic with no code restful API of API Gateway is setting up data transformations for REST API.\nBelos is using the Apache VTL to transform the request JSON payload to DynamoDB UpdateItem API request.\nAlso using API Gateway's transformation feature of the response of integration(DynamoDB API in this case) to shape the response like below,\nThere are few best practise of using API Gateway and AWS services integration to simplify the CRUD operations,\nuse request validator to validate the request payload use integration response to handle with the error cases of integration services. Below is an example checking the error message of DynamoDB API then reshape the error message 1#if($input.path(\u0026#39;$.__type\u0026#39;) == \u0026#34;com.amazonaws.dynamodb.v20120810#ConditionalCheckFailedException\u0026#34;) 2{ 3 \u0026#34;message\u0026#34;: \u0026#34;the todo id already exists.\u0026#34; 4} 5#end sanity all string inputs from client via API Gateway built-in $util method $util.escapeJavaScript() to avoid NoSQL injection attack response valid json if the string contains signle quotes(') 1\u0026#34;subject\u0026#34;: \u0026#34;$util.escapeJavaScript($input.path(\u0026#39;$.Attributes.subject.S\u0026#39;)).replaceAll(\\\u0026#34;\\\\\\\\\u0026#39;\\\u0026#34;,\\\u0026#34;\u0026#39;\\\u0026#34;)\u0026#34; As usual, all AWS resources are orchestrated by AWS CDK project, it's easliy to be deployed to any account and any region of AWS!\nHappying 👨‍💻 API \u0026#x1f606;\u0026#x1f606;\u0026#x1f606;\n","link":"https://kane.mx/posts/2022/build-serverless-app-on-aws/restful-api/","section":"posts","tags":["Serverless","AWS","API Gateway","DynamoDB","AWS CDK"],"title":"Build no code restful HTTP API with API Gateway and DynamoDB"},{"body":"","link":"https://kane.mx/tags/dynamodb/","section":"tags","tags":null,"title":"DynamoDB"},{"body":"Building web application is a common use case, leveraging cloud services could accelerate the builders to develop and deploy the services. With AWS serverless services, the application can easily get the capabilities like security, highly availability, scalability, resiliency and cost optimized.\nThis is a series posts to demonstrate how building a serverless TODO web application on AWS with AWS serverless services and AWS CDK, it consists of,\nRestful HTTP APIs, use Amazon API Gateway and Amazon DynamoDB Securely and accelerately distribute the static website via Amazon CloudFront and Amazon S3 Authentication and Authorization via Amazon Cognito and AWS Amplify Federated OIDC authentication with Amazon Cognito CI/CD DevOps pipeline source code written by AWS CDK to archive above features ","link":"https://kane.mx/posts/2022/build-serverless-app-on-aws/intro/","section":"posts","tags":["Serverless","AWS"],"title":"Build serverless web application with AWS Serverless"},{"body":"","link":"https://kane.mx/tags/cd/","section":"tags","tags":null,"title":"CD"},{"body":"","link":"https://kane.mx/tags/continuous-delivery/","section":"tags","tags":null,"title":"continuous delivery"},{"body":"","link":"https://kane.mx/tags/debugging/","section":"tags","tags":null,"title":"Debugging"},{"body":"","link":"https://kane.mx/tags/flux/","section":"tags","tags":null,"title":"Flux"},{"body":"After enabling E2E testing of FluxCD powered GitOps continuous deployment, the feedback of new commits are quite slow. Because you have to wait for the E2E testing result, lots of time cost on setuping the environment and provisioning your development from scrath.\nInspired by E2E testing in Github actions, the DevOps engineers can build local debugging environment in Kind or minikube.\nBelow is a script how using Kind to provision FluxCD then reconciling the latest commits by FluxCD.\n","link":"https://kane.mx/posts/gitops/fluxcd-local-debug-tip/","section":"posts","tags":["Flux","GitOps","Kubernetes","Git","CD","Continuous Delivery","Debugging"],"title":"FluxCD GitOps debugging tip"},{"body":"","link":"https://kane.mx/tags/git/","section":"tags","tags":null,"title":"Git"},{"body":"","link":"https://kane.mx/series/gitops/","section":"series","tags":null,"title":"gitops"},{"body":"","link":"https://kane.mx/tags/gitops/","section":"tags","tags":null,"title":"GitOps"},{"body":"","link":"https://kane.mx/categories/kubernetes/","section":"categories","tags":null,"title":"kubernetes"},{"body":"","link":"https://kane.mx/tags/kubernetes/","section":"tags","tags":null,"title":"Kubernetes"},{"body":"","link":"https://kane.mx/tags/aws-secrets-manager/","section":"tags","tags":null,"title":"AWS Secrets Manager"},{"body":"","link":"https://kane.mx/tags/eks/","section":"tags","tags":null,"title":"EKS"},{"body":"","link":"https://kane.mx/tags/external-secrets-operator/","section":"tags","tags":null,"title":"External Secrets Operator"},{"body":"背景 密钥的管理对于使用 GitOps 方式做持续发布是一个挑战，特别是当目标部署平台是 Kubernetes 的时候。 K8S 使用声明式配置管理最终状态，而K8S中的密钥仅仅是将密钥内容做了base64格式的编码。 在基于 Flux 的 GitOps 实战介绍了使用Bitnami Sealed Secrets加密密钥内容， 可以安全的将加密后的Kubernetes Manifest文件提交到Git代码仓库，由Sealed Secrets发现这些SealedSecret的密码， 并解密后动态的创建K8S原生Secrets对象。\nSealedSecret 解决了如何在 Git 代码仓库中安全的保存密钥的痛点，但是该方式仍然需要系统管理员自行的妥善保存 SealedSecret 使用的私钥，以及如何从灾难中恢复的场景。此外，整个密钥的生命周期管理在K8S集群内部， 无法让集群外的工作负载安全有效的使用这些密钥，例如，云厂商上托管的 RDS 类型数据库。\n使用外部密钥服务管理K8S密钥 在 CNCF 基金会在2021年做的一份关于密钥管理的技术雷达报告上指出， AWS Secrets Manager, HashiCorp Vault 被列为成熟的密钥管理服务或方案。 如果可以在 Kubernetes 中使用这些成熟的密钥服务或方案来管理密钥将可以同时获得密钥服务安全功能强大和 Kubernetes 任务编排的多重收益。\n图1：CNCF End User Technology Radar, Secret Management, February 2021 External Secrets Operator(ESO) 针对以上不足之处，接下来介绍的 External Secrets Operator 将按这个思路解决这些问题。\nExternal Secrets Operator 是一个 Kubernetes Operator，它集成了外部密钥管理系统， 例如 AWS Secrets Manager、HashiCorp Vault、Google Secrets Manager、Azure Key Vault 等等。 他使用外部密钥管理服务的 API 读取信息并自动将值注入 Kubernetes Secret。\n以上是 External Secrets Operator 的简介，看了以后是不是觉得特别眼熟。他跟同时 CNCF 下另一个 DNS 解析服务External DNS非常的类似，为 Kubernetes 内的域名解析注册提供统一的实现体验， 同其他众多第三方成熟的 DNS 解析集成。\n下面将介绍如何在使用 FluxCD 管理 External Secrets Operator，以及在 EKS 中使用 AWS Secrets Manager 管理的密钥。\nFluxCD 部署 External Secrets Operator External Secrets Operator 支持使用 Helm 安装，Flux 部署 ESO 同安装其他 Helm Chart 类似。\n加入 ESO 的 Helm 仓库 1apiVersion: source.toolkit.fluxcd.io/v1beta1 2kind: HelmRepository 3metadata: 4 name: external-secrets 5spec: 6 interval: 10m 7 url: https://charts.external-secrets.io 通过 HelmRelease 部署 ESO 1apiVersion: helm.toolkit.fluxcd.io/v2beta1 2kind: HelmRelease 3metadata: 4 name: external-secrets 5spec: 6 # Override Release name to avoid the pattern Namespace-Release 7 # Ref: https://fluxcd.io/docs/components/helm/api/#helm.toolkit.fluxcd.io/v2beta1.HelmRelease 8 releaseName: external-secrets 9 targetNamespace: kube-system 10 interval: 10m 11 chart: 12 spec: 13 chart: external-secrets 14 sourceRef: 15 kind: HelmRepository 16 name: external-secrets 17 namespace: kube-system 18 values: 19 installCRDs: true 20 serviceAccountName: helm-controller 21 timeout: 5m 22 test: 23 enable: true 24 ignoreFailures: true 25 install: 26 crds: CreateReplace 27 remediation: 28 retries: 3 29 upgrade: 30 crds: CreateReplace 31 remediation: 32 remediateLastFailure: false 为 ESO 创建配置 IRSA EKS 通过IRSA将 K8S 内 RBAC 的 ServiceAccount 同 IAM role 统一在一起， 可以让K8S内的工作负载通过原生的 ServiceAccount 绑定 IAM Role，无需显示的指定 AccessKey/Secret 来访问 AWS API。\n因为 ESO 必须通过 AWS API 访问读取保存在 AWS Secrets Manager 中的密钥。所以需要为 ESO 配置 AWS 访问密钥或使用 IRSA 支持。\n根据 ESO 文档建议的 AWS Secrets Manager 权限创建 IAM Policy 1{ 2 \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, 3 \u0026#34;Statement\u0026#34;: [ 4 { 5 \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, 6 \u0026#34;Action\u0026#34;: [ 7 \u0026#34;secretsmanager:GetResourcePolicy\u0026#34;, 8 \u0026#34;secretsmanager:GetSecretValue\u0026#34;, 9 \u0026#34;secretsmanager:DescribeSecret\u0026#34;, 10 \u0026#34;secretsmanager:ListSecretVersionIds\u0026#34; 11 ], 12 \u0026#34;Resource\u0026#34;: [ 13 \u0026#34;arn:aws:secretsmanager:us-west-2:111122223333:secret:dev/*\u0026#34; # 替换 region, accountid, 密钥的名称前缀 14 ] 15 } 16 ] 17} 使用eksctl工具为 EKS 集群创建ESO需要的 Role 及绑定 ESO 需要的权限，例如， 1eksctl create iamserviceaccount --cluster=gitops-cluster --name=external-secrets \\ 2--role-only --role-name=gitops-cluster-dev-external-secrets-role --region ap-southeast-1 \\ 3--namespace=kube-system --attach-policy-arn=arn:aws:iam::123456789012:policy/gitops-dev-external-secrets-sm \\ 4--approve namespace需要跟ESO部署的命令空间保持一致\nname 需要跟部署 ESO Chart 指定的 ServiceAccount 名称一致，默认为 external-secrets\n使用 Kustomization patch 为 ESO Chart 创建的 ServiceAccount 指定 IAM role 1apiVersion: kustomize.config.k8s.io/v1beta1 2kind: Kustomization 3resources: 4 - ../../base 5 - ./secrets.yaml 6patches: 7 - patch: | 8 - op: add 9 path: /spec/patches/- 10 value: 11 patch: | 12 - op: add 13 path: /spec/values/serviceAccount/annotations/eks.amazonaws.com~1role-arn 14 value: arn:aws:iam::845861764576:role/gitops-cluster-dev-external-secrets-role 15 target: 16 kind: HelmRelease 17 name: external-secrets 18 target: 19 group: kustomize.toolkit.fluxcd.io 20 version: v1beta2 21 kind: Kustomization 22 name: external-secrets 创建 SecretStore 或 ClusterSecretStore 配置访问 AWS Secrets Manager 1apiVersion: external-secrets.io/v1beta1 2kind: ClusterSecretStore 3metadata: 4 name: secretstore 5 namespace: kube-system 6spec: 7 provider: 8 aws: 9 service: SecretsManager 10 region: ap-southeast-1 11 auth: 12 jwt: 13 serviceAccountRef: 14 name: external-secrets 15 namespace: kube-system 上面的配置使用了 ServiceAccount 的短时间有效期 JWT token 访问 AWS API，避免了在集群内管理保存 AWS 访问凭证。\n创建 ExternalSecret 对象从 Secrets Manager 获取密钥并配置到 K8S 的 Secret 对象 1apiVersion: external-secrets.io/v1beta1 2kind: ExternalSecret 3metadata: 4 name: slack-url 5 namespace: kube-system 6spec: 7 refreshInterval: 1h 8 secretStoreRef: 9 name: secretstore 10 kind: ClusterSecretStore 11 target: 12 name: slack-url 13 creationPolicy: Owner 14 deletionPolicy: Delete 15 data: 16 - secretKey: address 17 remoteRef: 18 key: dev/slackurl 如上的 ExternalSecret 对象声明了在 kube-system 命令空间创建名为 slack-url 的密钥。ESO会通过名为 secretstore 的 ClusterSecretStore 对象获取 AWS Secrets Manager 访问凭证，将名为 dev/slackurl 的 AWS Secrets Manager 密钥内容设置到 K8S Secret slack-url 的 address 键值。\n确保 FluxCD 创建 ESO 资源的顺序 如上部署通过 Helm 部署了 ESO，通过 ESO 自定义资源创建了 ClusterSecretStore 和 ExternalSecret 创建密钥。 这些资源通过不同的 Flux 控制器(Kustomization或Helm)所创建，这些资源可用的顺序没有办法保证先后顺序。但是 ESO 的自定义资源对象声明（如ClusterSecretStore）依赖 ESO 完整的部署创建自定义资源声明。这里通过嵌套的 Flux Kustomization 对象来管理不同对象间的依赖。示例实现如下，\n1apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 2kind: Kustomization 3metadata: 4 name: secrets 5 namespace: flux-system 6spec: 7 interval: 10m0s 8 path: ./infrastructure/overlays/development/secrets 9 prune: true 10 dependsOn: 11 - name: sealed-secrets 12 - name: external-secrets 13 sourceRef: 14 kind: GitRepository 15 name: flux-system ESO Examples 文档也详细解释了 FluxCD 中的这个问题，并且示例了解决方法。\n小结 本文介绍了 External Secrets Operator 将成熟且经过验证的密钥管理服务（如 AWS Secrets Manager）引入到 Kubernetes 原生生态。 用户可以保留使用这些密钥服务的最佳实践和经验，同时让 K8S 编排的任务也无需改动仍然使用云原生的方式访问密钥。 整个方案兼容了安全成熟的密钥管理同 K8S 内程序访问密钥的需求。\n随后简短的示例了如何在 EKS 环境最佳实践的管理 ESO 部署，同时示例了如何使用 FluxCD GitOps 方式同时管理 ESO 部署和外部密钥。 完整的代码示例可以这个仓库获取。\n如果用户有需求通过文件访问 AWS Secrets Manager 的密钥，可以使用 AWS 开源的 AWS Secrets Manager and Config Provider for Secret Store CSI Driver, 这个项目将 Secrets Manager/Parameter Store 通过 CSI Driver 挂载到容器，提供文件系统的访问。\n","link":"https://kane.mx/posts/gitops/manage-k8s-secrets-in-external-secrets-manager/","section":"posts","tags":["External Secrets Operator","AWS Secrets Manager","Flux","GitOps","Kubernetes","Git","EKS","CD","Continuous Delivery"],"title":"使用外部Secrets Manager管理Kubernetes密钥"},{"body":"","link":"https://kane.mx/tags/crossplane/","section":"tags","tags":null,"title":"Crossplane"},{"body":"背景 在Flux 部署实战的总结展望中有一个方向是如何将云上基础设施资源同Kubernetes内资源统一管理， 而Crossplane提供了一个高度可扩展的后端，使用声明式程序同时编排应用程序和基础设施，不用关心它们在哪里运行。\n近期 AWS 官方博客宣布了 AWS Blueprints for Crossplane，为客户提供了在 Amazon EKS 上应用 Crossplane 的参考实现。\nAWS Blueprints for Crossplane AWS Blueprints for Crossplane 是一个 Github 上开源项目，它提供了如下参考架构及功能，\n✅ 使用Terraform 创建 Amazon EKS 集群并部署Crossplane ✅ 使用eksctl 创建 Amazon EKS 集群并部署Crossplane ✅ AWS Provider- Crossplane Compositions for AWS Services ✅ Terrajet AWS Provider - Another Crossplane Compositions for AWS Services ✅ AWS IRSA on EKS - AWS Provider Config with IRSA enabled ✅ 使用 AWS Provider 和 Terrajet AWS Provider 的 Composite Resources (XRs)示例部署模式 ✅ 使用Crossplane Managed Resources (MRs) 的示例部署 部署 Crossplane EKS Crossplane 参考蓝图示例了如何使用 Terraform(通过Amazon EKS Blueprints for Terraform) 和 eksctl 部署 EKS 集群及部署 Crossplane， 本文将演示如何使用 Flux 按照 GitOps 方式部署管理 Crossplane，演示将沿用 Flux 实战 所使用的示例repo。\n手动部署 Crossplane 按照 Crossplane 部署文档，Crossplane 在 EKS 上的部署分为下面三步，\n通过 Helm 部署 Crossplane chart 由于 Crossplane 大量通过 CRD 使用扩展性，需要在 Crossplane 组件部署成功后， 通过 Crossplane pkg CRD 部署及配置对应的 Provider，如在 AWS 上管理 AWS Provider 或 Terrajet AWS Provider AWS Provider 或 Terrajet AWS Provider 是通过 pkg CRD 异步部署的，需要等 Provider CRD 可用后，才可部署对应的 Provider Config 通过 Flux 实现 GitOps 部署 Crossplane 鉴于 Crossplane 部署三个步骤的强依赖性，所以使用 Flux 部署通过 Kustomization dependencies 功能实现三部分资源创建的先后依赖。\n1. 部署 Crossplane Helm chart 如下 manifest 创建 Crossplane helm release kustomization， 通过healthChecks检查确保 Crossplane 组件部署成功后才将 kustomization 设置为 reconcilation 成功。\n1apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 2kind: Kustomization 3metadata: 4 name: crossplane 5 namespace: flux-system 6spec: 7 interval: 10m0s 8 path: ./infrastructure/base/crossplane/release 9 targetNamespace: crossplane-system 10 prune: true 11 sourceRef: 12 kind: GitRepository 13 name: flux-system 14 namespace: flux-system 15 timeout: 5m 16 healthChecks: 17 - apiVersion: apps/v1 18 kind: Deployment 19 name: crossplane 20 namespace: crossplane-system 通过 Flux Helm 支持部署 Crossplane helm release\n1apiVersion: helm.toolkit.fluxcd.io/v2beta1 2kind: HelmRelease 3metadata: 4 name: crossplane 5 namespace: crossplane-system 6spec: 7 releaseName: crossplane 8 targetNamespace: crossplane-system 9 chart: 10 spec: 11 chart: crossplane 12 version: \u0026#34;1.8.0\u0026#34; 13 sourceRef: 14 kind: HelmRepository 15 name: crossplane-stable 16 namespace: crossplane-system 17 serviceAccountName: helm-controller 18 timeout: 5m 19 test: 20 enable: true 21 ignoreFailures: true 22 interval: 1h0m0s 23 install: 24 crds: CreateReplace 25 remediation: 26 retries: 3 27 upgrade: 28 crds: CreateReplace 29 remediation: 30 remediateLastFailure: false 2. 创建 Crossplane AWS Provider Kustomization crossplane-provider 将依赖 kustomization crossplane， 并检查 Crossplane AWS provider 自定义资源 providerconfigs.aws.crossplane.io 创建成功与否。\n1apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 2kind: Kustomization 3metadata: 4 name: crossplane-provider 5 namespace: flux-system 6spec: 7 interval: 10m0s 8 path: ./infrastructure/base/crossplane/provider 9 prune: true 10 sourceRef: 11 kind: GitRepository 12 name: flux-system 13 namespace: flux-system 14 dependsOn: 15 - name: crossplane 16 targetNamespace: crossplane-system 17 healthChecks: 18 - apiVersion: apiextensions.k8s.io/v1 19 kind: CustomResourceDefinition 20 name: providerconfigs.aws.crossplane.io 21 timeout: 5m 22 patches: 23 - patch: | 24 - op: replace 25 path: /metadata/annotations/eks.amazonaws.com~1role-arn 26 value: arn:aws:iam::845861764576:role/crossplane-provider-aws 27 target: 28 group: pkg.crossplane.io 29 version: v1alpha1 30 kind: ControllerConfig 3. 创建 Provider Config 同样方式创建部署 ProviderConfig 资源的 kustomization 对象，依赖 crossplane-provider kustomization 部署。\n1apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 2kind: Kustomization 3metadata: 4 name: crossplane-provider-config 5 namespace: flux-system 6spec: 7 interval: 10m0s 8 path: ./infrastructure/base/crossplane/provider-config 9 prune: true 10 sourceRef: 11 kind: GitRepository 12 name: flux-system 13 dependsOn: 14 - name: crossplane-provider 15 timeout: 5m 使用 Crossplane 创建 AWS 基础设施 Crossplane 提供了两种方式表示外部系统资源，\n托管资源 (MR) 是 Crossplane 对外部系统中资源的表示，例如，最常见的是云提供商。如下资源申明由 AWS Provider 支持，创建 AWS 上的 RDS 数据库实例。 1apiVersion: database.aws.crossplane.io/v1beta1 2kind: RDSInstance Crossplane 复合资源 (XR)是由托管资源组成的封装的 Kubernetes 自定义资源。 复合资源旨在让用户使用自己的观点和 API 构建自己的平台，而无需从头开始编写 Kubernetes 控制器。 相反，用户定义的 XR 架构教会 Crossplane 当有使用用户定义的 XR 时它应该组成（即创建）哪些托管资源。 AWS Blueprints for Crossplane 提供了 Compositions 示例，涵盖了 VPC，S3，IAM，RDS，DynamoDB，EKS 等服务。 如前面介绍 Crossplane Compositions(XRs) 是对基础设施的模式封装和组合，并不会直接创建云原生资源。\nAWS Blueprints for Crossplane 同时提供了 Examples 示例 直接使用 AWS Provider 提供的托管资源 (MR) 和示例的复合资源 (XR)，如上Compositions中示例VPC，S3, DynamoDB等AWS资源。\n小结及展望 Crossplane 目前是 CNCF 基金会下孵化中项目，一定程度可以实现云上基础设施资源和 Kubernetes 内资源统一使用声明式方式管理。 复合资源 (Composite Resources) 支持了对业务需求的高层次抽象，理念同 Construct Hub 类似。 基础实施团队可以通过复合资源提供高阶抽象，复用经过验证且符合管理需求的抽象组合，简化下游团队管理资源的复杂度。\nCrossplane 自身利用 K8S CRD 创建管理 Composite Resources，首先需要用户熟悉 CRD 的实现。 XRs 本质是通过声明式方式管理云原生基础设施，同样 AWS CloudFormation 是由 AWS 原生提供的通过声明式方式管理 AWS 上资源。 由于云原生资源的功能复杂性，CloudFormation 面临的编写复杂声明式代码，不易于测试和复用的问题同样在 Crossplane XRs 上存在。 同时面对数量庞大的 AWS 或其他云厂商原生服务资源，需要大量的社区资源来创建管理 AWS 可复用的复合资源模式， 可以预见在相当一段时间内云厂商托管资源覆盖率及高阶的复合资源数量都是该技术被广泛采纳的一个障碍。\n对比 AWS CDK/Pulumi 编程方式管理创建的复用资源和更高阶的抽象， Crossplane 在开发和复用效率上并没有优势。 Crossplane 最大的优势是可通过统一 Kubernetes 声明式方式来管理云上资源和 Kubernetes 集群内资源。 但对用户而言采用 Crossplane 的学习成本和开发复杂度较高，Crossplane 及类似技术可列为持续评估调用中，小量谨慎用于生产环境。\n","link":"https://kane.mx/posts/gitops/crossplane-meets-gitops/","section":"posts","tags":["Crossplane","Flux","GitOps","Kubernetes","Git","EKS","CD","Continuous Delivery"],"title":"基于 Flux 的 GitOps 管理 Crossplane 部署及资源"},{"body":"","link":"https://kane.mx/tags/aws-cloudformation/","section":"tags","tags":null,"title":"AWS CloudFormation"},{"body":"AWS CDK is a great abstract to accelerate managing the cloud infrastructure as code. The journey will be enjoyful with leveraging the Construct Hub to use the high level contributions from AWS partners and commnunity.\nUse Case AWS CloudFormation is one of the underly technologies of AWS CDK to manage the cloud infrastructure. It easily to enable the IT administrators even business operators whom has no/limited developer skills to develop the end-to-end solutions with one-click user experience.\nSo it's a use case for effectively developing the Cloud Application via AWS CDK, then publishing it as CloudFormation template with better user experimental experience.\ncdk synth command CDK has a built-in capability to synthesize its application to CloudFormation templates, as known as the cdk synth command. You can upload the syntheized output templates to Amazon S3 bucket, then deploy it via AWS CloudFormation. Looks like it's quite easy to publish the CDK application as CloudFormation templates.\nWhy cdk synth does not work However above procedure is not working in most case while orchestrating a large application in cloud. Due to the CDK applications probably contains assets which need be uploaded to S3 and ECR before deploying the application. For example, a CDK application with using Node.js Function, Python Function, S3 Deployment, Docker Image Assets and so on will be synthesized to the templates that are not deployable directly. It requires to publish those assets(both S3 and ECR assets) firstly, then deploy the templates with parameters pointing to the assets. This step is difficult to be completed manually, because the assets are named with its content hash are not readable by human being in CDK V1. CDK v2 uses the modern bootstrapping template which uses deterministic name for resources to remove the parameters, but it still depends on the assets published priorly before deploying the CloudFormation template.\ncdk-assets command Hence there is another experimental tool provided with CDK project, it's cdk-assets. cdk-assets command use the outputs of cdk synth, then publish the assets of application to S3 and ECR, and update the templates to refer to the assets in S3 and ECR. Looks like the utility perfectly fits the requirement of my use case.\ncdk-assets drawbacks But it still has some drawbacks for this solution. For some AWS services, the assets are mandatorily required from same region. It means that the Lambda code packages(reside on S3) must be from same region S3 bucket, the container images(reside on ECR) must be from same region of SageMaker training job / inference endpoint. For the applications with multiple regions support, we have to replicate above procedure in multiple times and provide multiple CloudFormation links per region like below. It means the users can not switch to another region via region selector after opening one of the links.\nCloudFormation link per region the solution cdk-bootstrapless-synthesizer There is another commnuity tool cdk-bootstrapless-synthesizer to resolve above painful perfectly. It can help synthesize a single CloudFormation template entrypoint, then deploy it to any supported regions. Also it provides a pipeline example(based on AWS CodePipeline) to publish a CDK application to CloudFormation template with multiple regions supported.\n","link":"https://kane.mx/posts/2022/publish-cdk-app-via-cloudformation/","section":"posts","tags":["AWS CDK","AWS CloudFormation","AWS","Tip"],"title":"Publish your AWS CDK applications via AWS CloudFormation templates"},{"body":"在上篇介绍基于 CNCF 下的 GitOps 工具 FluxCD v2 实现了管理多账户的 Kubernetes 集群的共享组件，Secrets 使用的最佳实践， GitOps 流水线事件同 IM(Slack) 的集成，以及对 GitOps 代码的 CI 流程。\n本文将围绕如何使用 Flux 的多租户管理最佳实践，打造基于 GitOps 工作流程的共享服务平台， 实现租户(业务/应用团队)可自助的持续部署。\n一、基于 GitOps 的共享服务平台设定 Kubernetes 提供了命名空间作为一种机制将同一集群中的资源划分为相互隔离的组。 同一个集群中多租户多团队的应用管理将沿用 Kubernetes 内置的各种机制来为不同的租户、团队或应用进行隔离，包括且不限于，\n命名空间(Namespaces) 资源配额(Resource Quotas)，限制应用的资源总量 RBAC 鉴权，限制应用的权限，如可创建 Ingress，不可创建密钥可读取指定名称的密钥，不可创建持久卷等 网络策略(Network Policies) 基于 Kubernetes 以上能力，为基于 GitOps 的共享服务平台设定如下，\n平台团队通过一个 Git 仓库来管理多个跨网络跨账户跨云平台的 Kubernetes 集群，平台团队通过 GitOps 管理如下资源， GitOps Toolkit 组件，如 Flux 集群共享组件，如 CNI, CSI Driver, Ingress Class，Service Accounts, CRD, DNS 等 可观测性的共享组件，如 Log, Metrics, Trace 每个租户/团队/应用的基础资源，如 Namespaces, Resource Quotas, Open Policy，Service Accounts，密钥等 为集群中的每个租户/团队/应用使用独立的 Git 仓库来隔离其持续部署，假设有应用名为 app-a， 应用 app-a 相关的资源都将部署在命名空间 app-a 限制应用使用的总资源，如不超过 2 vCPU, 4 GiB 内存 应用团队使用独立的 Git 仓库来管理应用编排，应用团队将负责应用发布到不同 stage 环境的节奏 应用团队可以使用 Kustomization、Helm 部署应用 应用团队无法创建集群相关的组件，如持久卷、CRD 等资源 应用团队无法创建密钥、Service Account等资源，但仅可使用 infra 团队提前为应用创建的这类资源 二、Flux 多租户的安全设置 对于一个使用命名空间在隔离多租户的集群，Flux 提供了选项来禁止跨命令空间的引用， 例如，Flux 的 Kustomization 或 Helm Releases 禁止引用其他命名空间定义的 Source。 同时，启用强制模拟功能，将 Kustomization 或 Helm Releases 资源的部署默认限制到最小来显示的提升部署的安全性。\n遵循以上 Flux 的多租户安全最佳实践，进行如下 Flux Toolkits 配置（./cluster/cluster-dev/kustomization.yaml） 来禁用跨命名空间引用和强制模拟限制 Kustomization 和 Helm 部署的默认权限，\n1apiVersion: kustomize.config.k8s.io/v1beta1 2kind: Kustomization 3resources: 4 - gotk-components.yaml 5 - gotk-sync.yaml 6patches: 7 - patch: | 8 - op: add 9 path: /spec/template/spec/containers/0/args/0 10 value: --no-cross-namespace-refs=true 11 target: 12 kind: Deployment 13 name: \u0026gt;- 14 (kustomize-controller|helm-controller|notification-controller|image-reflector-controller|image-automation-controller) 15 - patch: | 16 - op: add 17 path: /spec/template/spec/containers/0/args/0 18 value: --default-service-account=default 19 target: 20 kind: Deployment 21 name: (kustomize-controller|helm-controller) 22 - patch: | 23 - op: add 24 path: /spec/serviceAccountName 25 value: kustomize-controller 26 target: 27 kind: Kustomization 28 name: flux-system 29 - patch: | 30 - op: add 31 path: /spec/serviceAccountName 32 value: helm-controller 33 target: 34 kind: HelmRelease 35 name: flux-system 同时为 infra 团队管理的共享 Kustomization/Helm 组件部署显示的指定部署权限， 例如，DEV环境 infrastructure 配置的入口./clusters/cluster-dev/infrastructure.yaml\n1apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 2kind: Kustomization 3metadata: 4 name: infrastructure 5 namespace: flux-system 6spec: 7 interval: 10m0s 8 serviceAccountName: kustomize-controller 9 path: ./infrastructure/overlays/product 10 prune: true 11 sourceRef: 12 kind: GitRepository 13 name: flux-system 或通过 Kustomize 的补丁机制为所有的 Kustomization/Helm Flux 自定义资源指定部署权限， 例如DEV环境的overlay的入口./infrastructure/overlays/development/kustomization.yaml配置，\n1apiVersion: kustomize.config.k8s.io/v1beta1 2kind: Kustomization 3resources: 4 - ../../base 5 - ./secrets.yaml 6patches: 7 - path: ./aws-load-balancer-controller-patch.yaml 8 - path: ./aws-load-balancer-serviceaccount-patch.yaml 9 - path: ./dns-patch.yaml 10 - path: ./dns-sa-patch.yaml 11 - path: ./slack-patch.yaml 12 - patch: | 13 - op: add 14 path: /spec/serviceAccountName 15 value: kustomize-controller 16 target: 17 kind: Kustomization 18 namespace: (flux-system|kube-system|mariadb) 19 - patch: | 20 - op: add 21 path: /spec/serviceAccountName 22 value: helm-controller 23 target: 24 kind: HelmRelease 25 namespace: (flux-system|kube-system|mariadb) 最佳实践 通过在平台团队管理的 Kustomization 配置中，强制为应用团队 Git 仓库的 Kustomization, HelmRelease 等部署对象指定部署时使用的 Service Account。\n三、租户的集群资源管理 基于前面的管理需求假设，在 infrastructure Git 仓库中，专门为多租户/多团队/多应用创建如下目录结构， 共享 apps 通常的租户配置，例如，命名空间，RBAC(通过 Service Account)加上 Policy 实现等。\n1apps 2|-- base 3| |-- app-a 4| | |-- bitnami.yaml 5| | |-- kustomization.yaml 6| | |-- namespace.yaml 7| | |-- policies.yaml 8| | `-- rbac.yaml 9| `-- kustomization.yaml 10`-- overlays 11 `-- development 12 |-- app-a 13 | |-- kustomization.yaml 14 | `-- prestashop-sealed-secrets.yaml 15 `-- kustomization.yaml 同时创建一个 apps 的 Kustomization 入口配置同集群集成，例如 ./clusters/cluster-dev/apps.yaml 文件内容如下，\n1apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 2kind: Kustomization 3metadata: 4 name: apps 5 namespace: flux-system 6spec: 7 dependsOn: 8 - name: infrastructure 9 interval: 3m0s 10 serviceAccountName: kustomize-controller 11 path: ./apps/overlays/development 12 prune: true 13 sourceRef: 14 kind: GitRepository 15 name: flux-system 最佳实践 Kubernetes 原生的 RBAC 权限控制无法细粒度的控制资源权限，如资源创建必须指定某些 Label 等。 但结合 Policy as Code，如 Gatekeeper, Kyverno 可以满足细粒度的管理需求。\n为应用 app-a 创建了如下 Policy，仅允许应用通过自助的 Git 仓库在部署时仅可创建 Helm Chart 部署必须的 Secrets。\n1apiVersion: kyverno.io/v1 2kind: Policy 3metadata: 4 name: restrict-secrets-by-type 5 namespace: app-a 6 annotations: 7 policies.kyverno.io/title: Restrict Secrets by Name 8 policies.kyverno.io/category: security 9 policies.kyverno.io/subject: Secret 10 policies.kyverno.io/description: \u0026gt;- 11 Disallow creating/deleting secrets in namespace \u0026#39;app-a\u0026#39; beside the helm 12 storage. 13spec: 14 background: false 15 validationFailureAction: enforce 16 rules: 17 - name: safe-secrets-for-helm-storage 18 match: 19 resources: 20 kinds: 21 - Secret 22 preconditions: 23 all: 24 - key: \u0026#39;{{request.operation}}\u0026#39; 25 operator: In 26 value: 27 - CREATE 28 - UPDATE 29 - DELETE 30 - key: \u0026#39;{{serviceAccountName}}\u0026#39; 31 operator: Equals 32 value: app-a-reconciler 33 validate: 34 message: Only Secrets are created by Helm v3+ 35 pattern: 36 type: helm.sh/release.v1 四、租户隔离且自服务的应用持续部署 上一步为租户/应用 app-a 配置了独立的命令空间，部署权限，策略等。同时为应用 app-a 创建了独立的 GitOps 仓库， 应用团队可以通过独立的 Git 仓库自主的发布其应用程序到不同的 STAGING 集群。 如示例中的仓库，应用团队使用 Kustomize 管理不同 STAGING 环境的部署，且通过 Helm 方式部署了电商应用 Prestashop。 应用团队的部署可以使用由 infrastructure 团队统一管理的 External DNS, Ingress Class, 应用所在命名空间的 Secrets。\n最终平台团队将应用 app-a 独立的仓库作为一个新的 GitOps 来源，通过如下配置将应用仓库的部署同集群关联上，\n1apiVersion: source.toolkit.fluxcd.io/v1beta1 2kind: GitRepository 3metadata: 4 name: app-a-tenant 5spec: 6 interval: 1m 7 url: https://github.com/zxkane/eks-gitops-app-a.git 8 ref: 9 branch: main 10--- 11apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 12kind: Kustomization 13metadata: 14 name: app-a-tenant 15spec: 16 serviceAccountName: app-a-reconciler 17 interval: 5m0s 18 retryInterval: 5m0s 19 prune: true 20 sourceRef: 21 kind: GitRepository 22 name: app-a-tenant 23 namespace: app-a 24 patches: 25 - patch: |- 26 - op: replace 27 path: /spec/serviceAccountName 28 value: app-a-reconciler 29 - op: replace 30 path: /metadata/namespace 31 value: app-a 32 target: 33 group: helm.toolkit.fluxcd.io 34 version: v2beta1 35 kind: HelmRelease 36 - patch: |- 37 - op: replace 38 path: /spec/serviceAccountName 39 value: app-a-reconciler 40 - op: replace 41 path: /metadata/namespace 42 value: app-a 43 target: 44 group: kustomize.toolkit.fluxcd.io 45 version: v1beta2 46 kind: Kustomization 47 - patch: |- 48 - op: replace 49 path: /namespace 50 value: app-a 51 target: 52 group: kustomize.config.k8s.io 53 version: v1beta1 54 kind: Kustomization 应用 app-a 团队将自助的通过独立的应用 GitOps 仓库持续发布团队的应用。 如下示例 app-a 在其自助的 Git 仓库通过 HelmRelease 部署了 Web 应用。\n1apiVersion: helm.toolkit.fluxcd.io/v2beta1 2kind: HelmRelease 3metadata: 4 name: prestashop 5spec: 6 releaseName: prestashop 7 chart: 8 spec: 9 chart: prestashop 10 sourceRef: 11 kind: HelmRepository 12 name: bitnami 13 namespace: app-a 14 version: 14.0.10 15 values: 16 existingSecret: prestashop 17 service: 18 type: ClusterIP 19 ingress: 20 enabled: true 21 path: \u0026#39;/*\u0026#39; 22 annotations: 23 alb.ingress.kubernetes.io/scheme: internet-facing 24 alb.ingress.kubernetes.io/inbound-cidrs: \u0026#39;0.0.0.0/0\u0026#39; 25 alb.ingress.kubernetes.io/auth-type: none 26 alb.ingress.kubernetes.io/target-type: ip 27 kubernetes.io/ingress.class: alb 28 alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06 29 alb.ingress.kubernetes.io/listen-ports: \u0026#39;[{\u0026#34;HTTP\u0026#34;: 80}]\u0026#39; 30 alb.ingress.kubernetes.io/backend-protocol: HTTP 31 alb.ingress.kubernetes.io/healthcheck-path: \u0026#39;/\u0026#39; 32 persistence: 33 enabled: false 34 storageClass: gp2 35 # for mariadb 36 mariadb: 37 enabled: false 38 externalDatabase: 39 host: mariadb.kube-system.svc.cluster.local 40 user: prestashop 41 database: prestashop 42 existingSecret: prestashop-db-secrets 43 allowEmptyPassword: false 44 interval: 1h0m0s 45 install: 46 remediation: 47 retries: 3 五、自动发布镜像更新 在本节实践中我们将使用 Sock Shop（一个使用 Spring Boot, Go kit, Node.js 容器化的微服务示例应用）。 同在第三，第四章节配置应用 app-a 一样，为 sock-shop 应用在 infrastructure GitOps 仓库中创建了单独的命名空间、RBAC、独立的 Git 仓库来管理应用的发布， 具体实现可参考 commit1, commit2。\n1. 部署微服务应用程序 Sock Shop 在我们分叉的 Sock Shop 通过 Kustomization 实现了多集群部署的支持， 同时将 front-end 服务通过 LoadBalancer 类型对外暴露出来，利用 Amazon EKS 同 Amazon Elastic Load Balancing 的集成来负载均衡 Sock Shop 应用的入口 front-end 服务。\n1apiVersion: kustomize.config.k8s.io/v1beta1 2kind: Kustomization 3resources: 4 - ./complete-demo.yaml 5patchesStrategicMerge: 6 - delete-ns.yaml 7patches: 8 - patch: |- 9 - op: replace 10 path: /spec/type 11 value: LoadBalancer 12 - op: replace 13 path: /metadata/annotations/service.beta.kubernetes.io~1aws-load-balancer-type 14 value: external 15 - op: replace 16 path: /metadata/annotations/service.beta.kubernetes.io~1aws-load-balancer-nlb-target-type 17 value: ip 18 - op: replace 19 path: /metadata/annotations/service.beta.kubernetes.io~1aws-load-balancer-scheme 20 value: internet-facing 21 target: 22 version: v1 23 kind: Service 24 name: front-end 通过定制化 front-end 微服务为我们的 Sock Shop 应用持续改进，最新的 front-end 通过自动化测试后打包的镜像版本通过 Github packages 容器镜像仓库对外发布。 我们在 DEV 环境将使用 Kustomization overlays 将 front-end 微服务替换为定制化更新的版本。\n1apiVersion: kustomize.config.k8s.io/v1beta1 2kind: Kustomization 3resources: 4 - ../../base 5patches: 6 - patch: |- 7 - op: replace 8 path: /metadata/annotations/external-dns.alpha.kubernetes.io~1hostname 9 value: socks-dev.test.kane.mx 10 target: 11 version: v1 12 kind: Service 13 name: front-end 14images: 15- name: weaveworksdemos/front-end 16 newName: ghcr.io/zxkane/weaveworksdemos/front-end 17 newTag: 0.3.13-rc0 在 DEV 等可持续集成的敏捷环境，在构建新服务镜像且发布后，通过人工或脚本更新 GitOps 代码仓库显得过于繁琐。 Flux 自身提供了完善且强大的 Git 仓库镜像自动升级功能。下面在我们的 GitOps 部署仓库来实现该能力。\n注意 镜像自动更新功能需要确保 Flux 在安装配置时已启用镜像自动更新组件。如未启用，可重复 bootstrap Flux 时加上 --components-extra=image-reflector-controller,image-automation-controller 参数来启用。\n2. 注册 front-end 微服务的镜像仓库 1apiVersion: image.toolkit.fluxcd.io/v1beta1 2kind: ImageRepository 3metadata: 4 name: sock-shop-front-end 5spec: 6 image: ghcr.io/zxkane/weaveworksdemos/front-end 7 interval: 1m0s 3. 设置镜像更新策略 如下规则 ^0.3.x-0 将匹配 0.3.13-rc0, 0.3.13-rc1, 0.3.13 等镜像版本。\n1apiVersion: image.toolkit.fluxcd.io/v1beta1 2kind: ImagePolicy 3metadata: 4 name: sock-shop-front-end 5spec: 6 imageRepositoryRef: 7 name: sock-shop-front-end 8 policy: 9 semver: 10 range: \u0026#39;^0.3.x-0\u0026#39; 4. 创建自动镜像更新配置 Flux 自动镜像配置会指定应用配置的 Git 仓库，包括分支、路径等信息。\n1apiVersion: image.toolkit.fluxcd.io/v1beta1 2kind: ImageUpdateAutomation 3metadata: 4 name: sock-shop-front-end 5spec: 6 git: 7 checkout: 8 ref: 9 branch: gitops 10 commit: 11 author: 12 email: fluxcdbot@users.noreply.github.com 13 name: fluxcdbot 14 messageTemplate: \u0026#39;{{range .Updated.Images}}{{println .}}{{end}}\u0026#39; 15 push: 16 branch: gitops 17 interval: 1m0s 18 sourceRef: 19 kind: GitRepository 20 name: sock-shop-tenant 21 namespace: sock-shop 22 update: 23 path: ./deploy/kubernetes/overlays/development 24 strategy: Setters 5. 为应用 GitOps 仓库配置读写凭证 由于 Flux 需要将更新后的镜像版本信息提交回应用仓库，需要为 Flux 中配置的应用 GitRepository 指定可读写的访问凭证。 下面提供参考步骤创建 Git 仓库访问凭证并配置。\n1. 创建 Sealed Secret 保存 Git 仓库读写权限的私钥 1kubectl -n sock-shop create secret generic flux-image-automation \\ 2--from-file=identity=/path/gitops-image-update-id-ecdsa \\ 3--from-file=identity.pub=/path/gitops-image-update-id-ecdsa.pub \\ # 确保此公钥已配置在 Git 仓库且具有读写权限，如 Github 仓库的 `Deploy Keys` 4--from-literal=known_hosts=\u0026#34;github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\u0026#34; \\ 5--dry-run=client \\ 6-o yaml \u0026gt; flux-image-automation-secrets.yaml 7 8kubeseal --format=yaml --cert=pub-sealed-secrets-dev.pem \\ 9\u0026lt; flux-image-automation-secrets.yaml \u0026gt; ./apps/overlays/development/sock-shop/sealed-git-token.yaml 2. 通过 Kustomize 为 DEV 环境的 GitRepository 配置指定访问凭证 1apiVersion: kustomize.config.k8s.io/v1beta1 2kind: Kustomization 3namespace: sock-shop 4resources: 5 - ../../../base/sock-shop 6 - ./sealed-slack-secrets.yaml 7 - ./sealed-git-token.yaml 8 - ./registry.yaml 9 - ./policy.yaml 10 - ./image-automation.yaml 11patches: 12 - patch: |- 13 - op: replace 14 path: /spec/path 15 value: ./deploy/kubernetes/overlays/development 16 target: 17 group: kustomize.toolkit.fluxcd.io 18 version: v1beta2 19 kind: Kustomization 20 name: sock-shop-tenant 21 - patch: | 22 - op: replace 23 path: /spec/channel 24 value: gitops-flux 25 target: 26 group: notification.toolkit.fluxcd.io 27 version: v1beta1 28 kind: Provider 29 name: slack 30 - patch: | 31 - op: replace 32 path: /spec/url 33 value: git@github.com:zxkane/microservices-demo.git 34 - op: replace 35 path: /spec/secretRef 36 value: {} 37 - op: replace 38 path: /spec/secretRef/name 39 value: flux-image-automation 40 target: 41 group: source.toolkit.fluxcd.io 42 version: v1beta1 43 kind: GitRepository 44 name: sock-shop-tenant 6. 验证镜像自动更新 更新微服务 front-end 代码且tag版本后，新的镜像版本被发布到镜像仓库。 通过前面配置的 ImageRepository 和 ImagePolicy 扫描到 front-end 镜像符合策略的新版本发布， 根据 ImageUpdateAutomation 配置的 Sock Shop 应用仓库，查找指定的镜像变量， Flux 的 image-automation-controller 自动将更新的镜像信息提交到应用仓库实现持续部署。\n图1：镜像自动更新消息通知 六、小结及展望 本文介绍了如何使用 GitOps 工具 FluxCD v2 构建企业内部在 Kubernetes 上持续交付共享服务平台， 将平台团队和应用/业务团队统一在同样的 Git 工作流程下，同时授权应用/业务团队用自服务的方式持续交付应用的敏捷部署。 此方案将安全和效率有效的结合在一起。前述的示例可在此仓库获取完整的 GitOps 代码。\n同时面对复杂的企业场景，还有一些方面还可以持续的优化，例如，\n面对关键的线上生产系统，如何安全增量的灰度发布？ Sealed Secrets 引入了额外的私钥管理需求，在云计算环境如何改善 GitOps 密钥的管理？ 如何将云平台的资源 IaC 同 Kubernetes 内资源 GitOps 协同管理？ 如何更加高效的开发 Kubernetes manifests(YAML)？ 将在后续的文章中逐个探讨这些问题。\n","link":"https://kane.mx/posts/gitops/flux-in-action-2/","section":"posts","tags":["GitOps","Kubernetes","Flux","Git","EKS","CD","Continuous Delivery"],"title":"基于 Flux 的 GitOps 实战（下）"},{"body":"在前文介绍了 GitOps 的概念，Kubernetes 上 GitOps 最佳实践以及对比了 CNCF 基金会下 云原生的 GitOps 工具（ArgoCD 和 Flux）。本篇将带你按照 Flux 的最佳实践在跨VPC跨账户的 Kubernetes 上实践 GitOps 的持续集成，轻松管理数十数百乃至更多的集群及部署在上面的应用。\n0. 必备条件 假设业务对稳定性的需求，使用3个 Kubernetes 集群分别对应 DEV, STAGING 和 PRODUCT 环境。这些集群环境根据企业的需求 可能会分布在不同的云账户和VPC网络中。读者可根据实际企业情况创建一个或多个集群。本文以 Amazon EKS 为例，EKS集群的创建请参阅其文档。 Git 仓库用于保存集群的声明式配置。Flux 支持 Git 在线服务（包括 Github, Gitlab, Bitbucket）和其他任意 Git 服务。本文将使用 Github 托管 Git 仓库为例。 安装 Flux CLI 1. Kubernetes 集群安装配置 Flux Github repo 为例，执行以下命令，\n1export GITHUB_TOKEN=\u0026lt;your-token\u0026gt; 2 3flux bootstrap github \\ 4 --components-extra=image-reflector-controller,image-automation-controller \\ 5 --owner=zxkane \\ 6 --repository=eks-gitops \\ 7 --path=clusters/cluster-dev \\ 8 --personal 重要 请确保 Flux CLI 执行环境可以通过 kubectl 连接到 Kubernetes 集群，且用户具备 admin 权限。\n重要 创建的 Github Personal Accesss Token 需要至少同时选中全部 repo 和 user 的权限。\n注意 如需在 DEV 环境 启用镜像自动更新功能，bootstrap Flux 时需要加上 --components-extra=image-reflector-controller,image-automation-controller 参数。\n通过类似的步骤在 STAGING 和 PRODUCT 集群安装配置 Flux 。\n1export KUBECONFIG=$HOME/.kube/config-cluster-staging 2flux bootstrap github \\ 3 --owner=zxkane \\ 4 --repository=eks-gitops \\ 5 --path=clusters/cluster-staging \\ 6 --personal 7 8export KUBECONFIG=$HOME/.kube/config-cluster-product 9flux bootstrap github \\ 10 --owner=zxkane \\ 11 --repository=eks-gitops \\ 12 --path=clusters/cluster-product \\ 13 --personal 以上步骤是手动安装及配置 Flux ，Flux 也支持同现有的 IaC 代码集成，如 eksctl, Terraform。\n最佳实践 上面示例对多环境集群的支持并没有采用多仓库/多分支的策略，而是用的使用不同路径来管理不同的集群。 这也是 Flux 推荐的策略，可以减少代码维护和合并的难度。\n1./clusters/ 2├── cluster-dev [集群名称] 3│ ├── flux-system [命名空间] 4│ ├── gotk-components.yaml [默认 Flux 配置，请勿手动修改] 5│ ├── gotk-sync.yaml [默认 Flux 配置，请勿手动修改] 6│ └── kustomize.yaml [Kustomize 配置入口文件，将通过此入口聚合了集群的全部配置] 7├── cluster-product 8│ ├── flux-system 9│ ├── gotk-components.yaml 10│ ├── gotk-sync.yaml 11│ └── kustomize.yaml 12├── cluster-staging 13│ ├── flux-system 14│ ├── gotk-components.yaml 15│ ├── gotk-sync.yaml 16│ └── kustomize.yaml 在完成初始化不同的环境集群后，将在我们的Git仓库中查看到如上目录结构。 我们可以看到 Flux 自身的配置也是通过 GitOps 的方式来管理的。\n2. 管理集群共享的组件 在企业中通常会由 Infrastructure 团队统一管理集群的共享组件，例如，Namespace, CSI Driver, Ingress Class, Persist Volume, Service Account, Secret, DaemonSet, NetworkPolicy，CustomResource 等等 Kubernetes 对象。 接下来将演示如何在多集群中创建集群内共享组件，例如，AWS Load Balancer Controller 和 External DNS， 并且逐步将这些组件部署在不同的环境中。\nFlux 自身大量依赖了 Kustomize，通过 Flux 的 Kustomize Controller 来渲染最终的 Kubernetes 声明式配置，并集成了 Hook，ServiceAccount，超时等额外配置。\n通过如下Flux Kustomize对象声明为DEV环境声明了共享 Infrastructure 配置所在的路径（该配置文件放置在cluster/cluster-dev目录下），\n1apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 2kind: Kustomization 3metadata: 4 name: infrastructure 5 namespace: flux-system 6spec: 7 interval: 10m0s 8 path: ./infrastructure/overlays/development 9 prune: true 10 sourceRef: 11 kind: GitRepository 12 name: flux-system 以 External DNS(一个 CNCF 基金会项目，为 K8S Service LoadBalancer / Ingress 对象提供 DNS 域名解析注册) 为完整示例。\n使用 Flux 的 Helm Repositories 自定义对象，注册 bitnami 的 Helm Charts 仓库。\n1apiVersion: source.toolkit.fluxcd.io/v1beta1 2kind: HelmRepository 3metadata: 4 name: bitnami 5spec: 6 interval: 30m 7 url: https://charts.bitnami.com/bitnami 按照 External DNS for Amazon Route 53 的文档为 external-dns POD 创建执行 IAM 角色， 可以通过 Route 53 API 来创建修改相应的域名解析。针对 External DNS 部署的在 K8S 集群配置如下，\n为 External DNS 创建独立的 service account，同对应的 AWS IAM Role 绑定，限制该 Pod 仅拥有必需的最小权限。 关于 EKS 上如何绑定最小 AWS 权限到 pod 上请参考IAM roles for service accounts。 1apiVersion: v1 2kind: ServiceAccount 3metadata: 4 name: external-dns 5 annotations: 6 # create IAM role via following docs, 7 # https://docs.aws.amazon.com/eks/latest/userguide/specify-service-account-role.html 8 # https://github.com/kubernetes-sigs/external-dns/blob/master/docs/tutorials/aws.md#iam-permissions 9 # the role specified by kustomize 10 # eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/external-dns-role 11 eks.amazonaws.com/sts-regional-endpoints: true 定义 HelmRelease Flux 对象 从 Bitnami 的 Helm Charts 仓库安装 external-dns 。 1apiVersion: helm.toolkit.fluxcd.io/v2beta1 2kind: HelmRelease 3metadata: 4 name: external-dns 5spec: 6 releaseName: external-dns 7 targetNamespace: kube-system 8 chart: 9 spec: 10 chart: external-dns 11 version: \u0026#39;\u0026gt;=6.2.1 \u0026lt;7\u0026#39; 12 sourceRef: 13 kind: HelmRepository 14 name: bitnami 15 namespace: kube-system 16 interval: 1h0m0s 17 install: 18 remediation: 19 retries: 3 20 values: 21 provider: aws 22 aws: 23 zoneType: public 24 serviceAccount: 25 create: false 26 name: external-dns 27 podSecurityContext: 28 fsGroup: 65534 29 runAsUser: 0 使用 Kustomization 将相关的配置整合。 1apiVersion: kustomize.config.k8s.io/v1beta1 2kind: Kustomization 3namespace: kube-system 4resources: 5 - serviceaccount.yaml 6 - release.yaml 用 Kustomization 整合多个组件的配置。 1apiVersion: kustomize.config.k8s.io/v1beta1 2kind: Kustomization 3resources: 4 - sources 5 - aws-load-balancer-controller 6 - dns 以上所有配置都保存在Git仓库infrastructure/base下（详见下图）作为多套环境通用的配置，按照 Kustomize 的 Overlays 布局。\n1./infrastructure/ 2|-- base 3| |-- aws-load-balancer-controller 4| | |-- kustomization.yaml 5| | |-- release.yaml 6| | `-- serviceaccount.yaml 7| |-- dns 8| | |-- kustomization.yaml 9| | |-- release.yaml 10| | `-- serviceaccount.yaml 11| |-- kustomization.yaml 12| `-- sources 13| |-- bitnami.yaml 14| |-- eks-charts.yaml 15| `-- kustomization.yaml 16`-- overlays 17 |-- development 18 | |-- aws-load-balancer-controller-patch.yaml 19 | |-- aws-load-balancer-serviceaccount-patch.yaml 20 | |-- dns-patch.yaml 21 | |-- dns-sa-patch.yaml 22 | `-- kustomization.yaml 在DEV环境对应的 overlay 下面创建如下的补丁来覆盖跟DEV环境相关的信息声明，如集群名称、域名、 为External DNS pod所创建AWS IAM Role的ARN。\n1apiVersion: helm.toolkit.fluxcd.io/v2beta1 2kind: HelmRelease 3metadata: 4 name: external-dns 5spec: 6 values: 7 txtOwnerId: gitops-cluster 8 domainFilters[0]: test.kane.mx 9 policy: sync 10--- 11apiVersion: v1 12kind: ServiceAccount 13metadata: 14 name: external-dns 15 annotations: 16 eks.amazonaws.com/role-arn: \u0026gt;- 17 arn:aws:iam::845861764576:role/gitops-cluster-external-dns-role 最佳实践 充分利用 Kustomize 的 Overlays 机制来抽象通用的配置和覆盖每个环境所对应的特殊部分。\n最佳实践 将共享组件部署在非 Flux 命名空间(默认flux-system)，避免清理 Flux 时影响运行中的部署。\n同样在DEV环境验证External DNS组件部署成功后，将相似的配置应用到STAGING和PRODUCT环境。 通过Kustomize的Overlays分别设置STAGING和PRODUCT环境相关的配置。再将变更推送到Git仓库， Flux将会为我们部署这些声明在Git仓库中的组件！可查阅DEV, STAGING, PRODUCT这三个提交查看完整实现。\n3. 密钥的管理 最佳实践 2022/06更新：使用成熟的K8S集群外置的密钥管理服务可以很好的将成熟密钥管理最佳实践和K8S原生生态集成在一起。 详见博文使用外部Secrets Manager管理Kubernetes密钥。\nGitOps 的理念是将一切配置以声明式文本方式保存在仓库中。而对保存 Kubernetes Secrets 是个挑战， 因为 Git 仓库对所有读权限的用户公开，甚至项目的仓库是开源。Flux 通过支持 Bitnami Sealed Secrets 和 Mozilla SOPS 安全的在 Git 仓库中管理密钥。接下来将示例如何使用 Sealed Secrets 为 MariaDB 创建密码。\n首先使用 HelmRelease 部署 Bitnami Sealed Secrets。类似上面部署 External DNS，将 sealed secrets 添加到 infrastructure/base 里作为共享组件。 1apiVersion: helm.toolkit.fluxcd.io/v2beta1 2kind: HelmRelease 3metadata: 4 name: sealed-secrets 5 namespace: kube-system 6spec: 7 chart: 8 spec: 9 chart: sealed-secrets 10 sourceRef: 11 kind: HelmRepository 12 name: sealed-secrets 13 version: \u0026#34;\u0026gt;=1.15.0-0\u0026#34; 14 interval: 1h0m0s 15 releaseName: sealed-secrets-controller 16 targetNamespace: kube-system 17 install: 18 crds: Create 19 upgrade: 20 crds: CreateReplace 按照 Flux 的 Sealed Secrets 文档，安装 kubeseal。 使用 kubeseal 从集群中下载公钥。 1kubeseal --fetch-cert \\ 2--controller-name=sealed-secrets-controller \\ 3--controller-namespace=kube-system \\ 4\u0026gt; pub-sealed-secrets-dev.pem 为 Bitnami MariaDB 生成密钥。 1kubectl -n kube-system create secret generic prestashop-mariadb \\ 2--from-literal=mariadb-root-password=\u0026lt;put the ariadb root password here\u0026gt; \\ 3--from-literal=mariadb-replication-password=\u0026lt;put the replication password here\u0026gt; \\ 4--from-literal=mariadb-password=\u0026lt;put the mariadb password here\u0026gt; \\ 5--dry-run=client \\ 6-o yaml \u0026gt; /tmp/mariadb-secrets.yaml 从 K8S 内置的 Opaque Secrets 格式文件生成 sealed secret。 1kubeseal --format=yaml --cert=pub-sealed-secrets-dev.pem \\ 2\u0026lt; /tmp/mariadb-secrets.yaml \u0026gt; infrastructure/overlays/development/prestashop-mariadb-secrets.yaml 部署 Bitnami Helm Chart MariaDB，使用提前创建的密钥作为 DB 的密钥。 1apiVersion: helm.toolkit.fluxcd.io/v2beta1 2kind: HelmRelease 3metadata: 4 name: prestashop-mariadb 5spec: 6 releaseName: mariadb 7 chart: 8 spec: 9 chart: mariadb 10 sourceRef: 11 kind: HelmRepository 12 name: bitnami 13 namespace: kube-system 14 version: 10.4.0 15 interval: 1h0m0s 16 install: 17 remediation: 18 retries: 3 19 valuesFrom: 20 - kind: ConfigMap 21 name: prestashop-values 22--- 23auth: 24 existingSecret: prestashop-mariadb 25primary: 26 persistence: 27 enabled: false 28 storageClass: standard 最佳实践 切记使用 Sealed Secrets, SOPS 等工具仅将加密后的密钥提交到 Git 仓库，避免密钥的泄露！\n查阅DEV, STAGING, PRODUCT这三个提交查看完整 sealed secrets 使用。\n4. 通知集成 在运维集群的时候，不同的团队有订阅不同的 GitOps 流水线通知的需求。 例如，oncall 团队将收到有关集群中协调失败的警报， 而开发团队可能希望在部署新版本的应用程序以及部署是否健康时收到警报。\nFlux 内置了同 Slack, MS Teams, Discord 等知名 IM 工具的集成，也支持将消息发送到 webhook 接口， 由用户自行实现消息通知。\n下面以 Slack 为例，示例如何集成 GitOps 流水线消息。\n定义一个名为 slack 的 Flux 自定义资源 Provider 1apiVersion: notification.toolkit.fluxcd.io/v1beta1 2kind: Provider 3metadata: 4 name: slack 5 namespace: kube-system 6spec: 7 type: slack 8 secretRef: 9 name: slack-url 因为 Slack WebHook 并没有额外的鉴权保护，这里我们使用上一节的密钥管理机制加密保存在 Git 仓库的 slack webhook url， 同时 Provider 引用 Secrets 对象中保存的 url。 2. 创建 Flux Alert 对象订阅命名空间的各类 Flux 对象事件，并且同第一步定义的 Provider 关联。 3. 当创建多个 Alert 和不同的 Provider 关联，可以将消息发送到不同的 Slack channel 甚至是不同的 IM。\n1apiVersion: notification.toolkit.fluxcd.io/v1beta1 2kind: Alert 3metadata: 4 name: flux-alert 5 namespace: kube-system 6spec: 7 providerRef: 8 name: slack 9 eventSeverity: info 10 eventSources: 11 - kind: GitRepository 12 name: \u0026#39;*\u0026#39; 13 - kind: Kustomization 14 name: \u0026#39;*\u0026#39; 15 - kind: HelmRelease 16 name: \u0026#39;*\u0026#39; 17--- 18apiVersion: notification.toolkit.fluxcd.io/v1beta1 19kind: Alert 20metadata: 21 name: kube-system-alert 22 namespace: kube-system 23spec: 24 providerRef: 25 name: slack 26 eventSeverity: info 27 eventSources: 28 - kind: Kustomization 29 name: \u0026#39;*\u0026#39; 30 namespace: \u0026#39;kube-system\u0026#39; 31 - kind: HelmRelease 32 name: \u0026#39;*\u0026#39; 33 namespace: \u0026#39;kube-system\u0026#39; 查阅DEV, STAGING, PRODUCT这三个提交查看完整 commits 如何在不同环境集群中部署了 Slack 通知集成。\n图1：Slack channel 订阅 GitOps 流水线消息通知 最佳实践 针对订阅不同命名空间(非Alert对象定义的命令空间)的事件通知，需要显示指定命名空间属性。\n5. GitOps 代码的 CI GitOps 模式带来的又一个好处是可以使用企业成熟且惯用的代码管理工作流来自动化验证变更及代码审核审批。 针对 GitOps 代码可以引入如下 CI 步骤，\n由于 Flux 大量使用 Kustomize 来生成最终的声明式配置，可以实现在每次提交 Pull Request/Merge Request 后的验证阶段引入 kustomize CLI 验证 GitOps 配置是否可以正确的被生成。同时，使用 Flux OpenAPI 结合 kubeconform 验证 Kubernetes 内置资源和 Flux CRD 类型是否配置正确。 借助 KIND(Kubernetes in Docker) 实现完整的端到端测试。KIND 实现了 Docker 容器打包的 Kubernetes 环境， 可以每次 PR 验证阶段启动新的 KIND 环境且安装 Flux 后，执行 GitOps 代码的 reconciliation， 验证 GitOps 代码配置的资源是否可以被创建且状态为READY。 借助 Git 服务的 CI 能力，如 Github Actions, Gitlab CI/CD 等， 实现 GitOps 代码的上述两种自动化检查，以及同代码审核审批集成。 查阅此 Github Actions workflow 配置实现在 KIND 环境 End-To-End 验证 GitOps 配置，和 声明式配置 Manifests 验证。\n最佳实践 利用 Github Actions 或 Gitlab CI/CD 非常容易的将 GitOps 代码集成到 CI 环境， 通过 KIND/Kubeconform 验证代码的正确性。\n6. 小结 本文介绍使用 GitOps 工具 FluxCD v2 实现了管理多账户多 VPC 环境下的 Kubernetes 集群的共享组件，实践了 Secrets 使用的最佳实践， CD 部署事件同 IM(Slack) 的集成，最终示例了通过 GitOps 代码的 CI 流程来提高 GitOps 代码的质量，减少部署中断事故。 可在此仓库获取完整的 GitOps 代码。\n下篇将介绍基于 Flux 实现 GitOps 工作模型下的共享服务平台。\n","link":"https://kane.mx/posts/gitops/flux-in-action-1/","section":"posts","tags":["GitOps","Kubernetes","Flux","Git","EKS","CD","Continuous Delivery"],"title":"基于 Flux 的 GitOps 实战（上）"},{"body":"","link":"https://kane.mx/tags/argocd/","section":"tags","tags":null,"title":"ArgoCD"},{"body":"今天 Kuberentes 已经成为IT基础设施的重要玩家，容器编排领域的事实标准。写于3年前的文章不要自建 Kuberentes 的观点已经被绝大多数的企业所认可和接受。\n然而同众多企业接触中发现，企业有很高的意愿采用 Kuberentes 管理工作负载，并且已有大量的企业已经将 Kuberentes 用于生产环境。 但如何对多套不同阶段的 Kuberentes 集群来做持续部署，做到高安全性、权限分离、可审计、保证业务团队的敏捷等需求感到困惑。 目前客户实现方式非常多样，并没有很好的遵循业界的最佳实践。\nGitOps 是目前最佳的一种方法来实现基于 Kuberentes 集群的持续部署，且同时满足安全性、权限分离等企业级需求。\n什么是 GitOps GitOps 是一种为云原生应用程序实施持续部署的方法。 它通过使用开发人员已经熟悉的工具，包括 Git 和持续部署工具， 专注于在操作基础架构时以开发人员为中心的体验。\nGitOps 的核心思想包括，\n拥有一个 Git 存储库，该存储库始终包含对生产环境中当前所需基础设施的声明性描述，以及一个使生产环境与存储库中描述的状态相匹配的自动化过程 期望的状态以强制不变性和版本控制的方式存储，并保留完整的版本历史 如果您想部署一个新的应用程序或更新一个现有的应用程序，您只需要更新存储库，软件代理自动从源中提取所需的状态声明，自动化过程会处理其他所有事情 软件代理持续观察实际系统状态并尝试应用所需状态 同传统的持续部署系统对比如下，\n传统 CD 系统 GitOps 系统 由推送事件触发，如代码提交、定时任务、手动等 系统不断轮询变更 仅部署变更的部分 为任何部署声明了整个系统 系统可能会在部署之间漂移 系统将纠正任何漂移 CD 程序必须有权访问部署环境 部署管道在系统范围内被授权运行 GitOps 不会处理如下声明，\n持久化的应用数据，例如来自用户上传 基于 Schema 的部署，例如数据库 schema 即使采用了 GitOps 部署，对于以上数据的备份和恢复同样很重要。\n声明式配置是 Kuberentes 从 Day 1 开始提供支持的， 可以说 Kuberentes 声明式配置很好的匹配了 GitOps 原理中的声明性描述需求。 结合自定义资源定义将声明式配置扩展到了自定义资源，K8S 中的自定义资源也可以 无缝的适配 GitOps 部署方法。\nKuberentes 上 GitOps 最佳实践 GitOps 方法下，Git 成为系统所需状态的唯一事实来源，支持可重复的自动化部署、集群管理和监控。 复用企业中已经非常成熟的 Git 工作流程来完成编译、测试、扫描等持续集成步骤， 当系统最终状态的声明代码进入 Git 仓库主线分支后，依托 GitOps 工具链来完成验证部署，到观测告警， 到操作修复达到系统最终状态的闭环(见图1)。\n图1：GitOps -- 一个持续运维的模型 下面让我们来看看理想中的 Kuberentes 上的 GitOps 最佳实践。\n基于 GitOps 的持续部署 以下是基于 GitOps 的 Kuberentes 部署流程，\n开发者提交应用代码和配置到源代码仓库。 持续集成服务器编译、测试、扫描并且推送新版本的镜像到镜像仓库，同时更新 K8S manifests 到 Git 仓库。 GitOps 代理(如 ArgoCD/Flux) 检测到 Git 仓库变更并自动变动到 K8S 集群。 图2：基于 GitOps 的持续部署型 基于 GitOps 的多集群管理 当 Pull Request 被合并到平台仓库，配置在多集群上的 GitOps 代理将监控这个仓库， 并且部署这些更新到 kube-system 或者平台命名空间。 每个集群有一个集群仓库用于存储配置，例如访问控制、DNS等。同时每个集群通过平台仓库 同上游平台同步。 图3：基于 GitOps 的多集群管理 GitOps 下的应用开发体验 业务团队负责镜像的编译、测试和扫描等。声明配置被提交到业务/应用特定的配置仓库。 GitOps 代理运行在特定的租户命名空间，应用的状态从应用团队的仓库同步到特定的租户命名空间。 图4：GitOps 下的应用开发 支持多租户的集群 同上，不同的业务/应用团队有各自的配置仓库。在集群中，不同的业务/应用由不同的命名空间隔离， 被 GitOps 代理持续部署在各自不同的命名空间中。\n图5：GitOps 多租户支持 使用 Helm 管理应用程序 Helm 是 Kuberentes 生态下的包管理器，类似 Debian 下的 apt。 对 Helm 提供无缝的支持将可以利用到现有成熟的K8S应用打包生态，无论是部署三方组件还是企业已经存在的应用。\n对多环境的部署管理 在企业应用中多套环境、多云、混合云的场景是非常常见的，对应用的部署需要通过基础清单加上各个环境个性化的清单来 简化对多套环境的部署管理。\nKustomize 正是为解决这个问题而创建，并且已经成为 K8S 原生工具链中的一部分。对 Kustomize 提供支持， 将很好的在 GitOps 中满足此类需求。\n图6：GitOps 多环境支持 综上，从持续部署，多集群管理，多租户支持和现有工具链、生态集成方面，描述了对 Kubernetes 上 GitOps 的理想状态。接下来让我们来讨论下现有的 GitOps 工具， 是否可以很好的支持前面描绘的 GitOps 的理想状态。\n云原生的 GitOps 工具 由于 Kubernetes 是 CNCF 基金会的核心项目，整个生态会首先关注 CNCF 基金会下的项目，对 GitOps 来说同样如此。\nCNCF 在2020年发布了 Continuous Delivery 技术雷达，Flux 和 Helm 两个项目被归类为 采用，Kustomize 是被归类为试用，Argo CD 在雷达中为技术评估。\nCNCF 在2021年发布的 Multicluster Management 技术雷达 中的 Core Services and Add-ons 管理雷达，Flux, Kustomize, Argo 和 Helm 等项目都被评为可采用。\n基于前面对 GitOps 的核心定义，CNCF 的技术雷达象限以及社区的对比，目前整个社区中最为 普及的 GitOps 工具是 Argo CD 和 Flux。\nPush 还是 Poll? GitOps 在实践中面临是采用推(push)还是拉(pull)的部署风格选择。\n采用推部署风格会有如下好处，\n简单易理解。这种部署方式已经被众多知名的 CI/CD 工具所采用，例如 Jenkins CI，AWS Code系列。 灵活。易于同其他的脚本或工具集成。拉(pull)风格的 GitOps 代理只能运行在 Kuberentes 中。 采用拉部署风格会有如下好处，\n更加安全。因为 GitOps 代理运行在 Kubernetes 集群中，因此仅需要最小的权限用于部署。简化网络配置不需要该集群同 CD 程序建立网络连接，尤其在管理多集群时尤为简洁。 一致性。管理多集群时，确保了每个集群的管理方式都是一样的。 隔离性。每个集群的部署不依赖于集中的流水线 CD 程序。 可伸缩性。该方式可以容易的扩展到同时管理成百上千的集群。 从以上对比可见，采用拉(pull)的部署风格从安全性、可伸缩性、隔离性、一致性都更优，GitOps 部署方式应该首选拉部署风格。\n主流云原生 GitOps 对比 下表详细对比了 Argo CD / Flux v2，供参考。\nArgoCD Flux v2 安装/配置 一个命令安装，但没有原生的机制实现配置。需要通过 UI 或创建大量清单 一个命令完成安装和配置 部署风格 推(push) / 拉(pull) 拉(pull) 秘钥管理[1] Sealed secrets Sealed secrets / Mozilla SOPS Webhook 接收[2] 支持 支持 告警和通知 内置集成 slack，email，Google Chat 等。 内置集成 slack，discord，MS Teams 等。 镜像更新自动化 支持 支持 Reconciliation 可配置性 有限支持（只能全局设置 reconciliation 时间，不能为每个应用设置不同的 reconciliation 时间。） 支持设置 sync(同步) 和 reconciliation 间隔 应用交付 -- 原生 Kuberentes 清单(YAML) 是的，Argo CD 应用程序的副作用是需要在重试中重新应用资源。 支持，被视同为 kustomization yaml 应用交付 -- Kustomization 支持 支持，还提供 GitOps 组件间的依赖 应用交付 -- Helm charts 支持，但没有使用 Helm Go 语言程序库。 Helm chart 钩子被转为 Argo CD syncwaves/hooks。因此，不支持 Helm cli。 支持，原生支持 chart 钩子，可作为组件相互依赖。支持 Helm cli。 Web UI 支持，提供了完整的 UI 操作。 没有官方 UI 实现。开源平台 Weave GitOps 基于 Flux 提供 UI。 多租户权限管理 支持，实现了独立于 Kubernetes 基于访问控制列表的 RBAC，具有细粒度控制。 是的，它严格基于 Kubernetes 的 RBAC 能力，需要结合其他 CNCF 项目做粒度控制，比如 Kyverno。 多集群管理 -- 多集群管理和部署 支持，对集群做了原生抽象。 支持。理论上支持使用 KubeConfig 设置通过 Kustomziation 和 Helm 在一个 Flux 中管理多个集群上的工作负载。 多集群管理 -- 创建集群 不支持，需要通过第三方工具。例如，CAPI, Crossplane, Open Cluster Management 等。 不支持，需要通过第三方工具。例如，CAPI, Crossplane, Open Cluster Management 等。 GitOps 工具自身的可观测性 通过 Prometheus + Grafana 提供。 通过 Prometheus + Grafana 提供。 通过上表从 GitOps 核心理念来看，无论 ArgoCD 还是 Flux 都满足 GitOps 的理念。且满足了企业级需求，如多租户权限、多集群管理、 秘钥管理、告警通知、支持 Helm 和 Kustomization。从自身的实现上说，ArgoCD 提供了完整的抽象，包括且不限于 Cluster、RBAC、Application、Hook 等。 这样的做法具备了更加广泛的功能集的可能，但同时增加了自身程序的复杂度，也提高了用户的学习门槛。Flux 自身架构更加简洁，默认组件仅有 Source, Kustomize, Helm, Notification, Image automation 这5个组件，尽量复用 Kuberentes 原生能力，例如使用 ServiceAccount 实现多租户的 RBAC 控制， 降低了用户的学习门槛，同云原生社区其他项目的兼容性更强。\n[1]: Git仓库可能公开读且明文保存 Secrets 对象，需要将其加密后再提交到 Git\n[2]: 默认采用 Poll 轮询拉取 Git 仓库变更，提供 Webhook 接口可被 Git 仓库提交事件触发\n小结 本文介绍了什么是 GitOps，Kuberentes 上基于 GitOps 实现持续部署的最佳实践，以及 CNCF 下 GitOps 方向最为流行项目 Argo CD 和 Flux 的对比。后续将以 Flux v2 为实战，深入介绍如何实现 GitOps 持续部署且同时满足各类企业级需求。\n参考资料 GitOps: Cloud-native Continuous Deployment The CNCF End User Technology Radar Continuous Delivery, June 2020 The CNCF End User Technology Radar Multicluster Management, June 2021 Push vs. Pull in GitOps: Is There Really a Difference? Why is a PULL vs a PUSH pipeline important? GitOps on Kubernetes: Deciding Between Argo CD and Flux ","link":"https://kane.mx/posts/gitops/the-best-practise-of-gitops-in-kubernetes/","section":"posts","tags":["GitOps","Kubernetes","Flux","ArgoCD","Git","CD","Continuous Delivery"],"title":"Kuberentes 上 GitOps 最佳实践"},{"body":"","link":"https://kane.mx/tags/athena/","section":"tags","tags":null,"title":"Athena"},{"body":"","link":"https://kane.mx/tags/cost/","section":"tags","tags":null,"title":"Cost"},{"body":"As a builder in cloud, you might feel confused about which resources cost mostly in your account.\nIn AWS, you can quickly find out which services even functionality cost a lot via AWS Billing or AWS Cost Explorer. However sometimes it sucks on finding out which functions cost mostly if you have hundreds of Lambda functions, or which metrics/log groups cost mostly in Amazon CloudWatch.\nAWS Cost and Usage Reports should be helpful in above scenairos. The AWS Cost and Usage Reports (AWS CUR) contains the most comprehensive set of cost and usage data available, including product and product resource, and tags that you define yourself. You can use Cost and Usage Reports to publish your AWS billing reports to an Amazon S3 bucket that you own. The CUR reports are plain CSV text file, you still need analysis the report to find out the insight what you want. So Amazon Athena is one of simplest and effcientst ways to analyze your cost on demand. See the doc to how set up the Athea to analyze your AWS cost.\nAthena is out-of-the-box integrated with AWS Glue Data Catalog, allowing you to create a unified metadata repository across various services. With Amazon Athena, you pay only for the queries that you run. See my post how using Glue and Athena to analyze images in Docker repository.\nBelow are few samples to find out the mostly cost resources in your AWS account,\n1SELECT line_item_resource_id as resource, sum(line_item_unblended_cost) as total_cost FROM \u0026#34;athenacurcfn_main_account\u0026#34;.\u0026#34;main_account\u0026#34; 2WHERE year=\u0026#39;2022\u0026#39; and month=\u0026#39;1\u0026#39; and product_product_name = \u0026#39;AmazonCloudWatch\u0026#39; 3GROUP BY line_item_resource_id 4ORDER BY total_cost DESC 5LIMIT 10 Sample 1: find out the top 10 costly resources in CloudWatch, including Log Groups, Metrics, Synthetics and so on\n1SELECT line_item_resource_id, sum(line_item_usage_amount) as usage_amount, sum(line_item_blended_cost) as paid_amount FROM \u0026#34;athenacurcfn_main_account\u0026#34;.\u0026#34;main_account\u0026#34; 2 WHERE line_item_product_code=\u0026#39;AWSLambda\u0026#39; and product_group=\u0026#39;AWS-Lambda-Duration\u0026#39; 3 and year=\u0026#39;2022\u0026#39; and month=\u0026#39;1\u0026#39; 4 GROUP BY line_item_resource_id 5 ORDER BY usage_amount desc 6 LIMIT 10; Sample 2: find out the top 10 costly Lambda functions\nYou can refer to Data dictionary of CUR to understand the field definitions of report.\n","link":"https://kane.mx/posts/2022/find-out-most-costly-resource-in-your-aws-account/","section":"posts","tags":["AWS","Cost","Athena","Glue","Tip"],"title":"Find out the most costly resources in your AWS account"},{"body":"","link":"https://kane.mx/tags/glue/","section":"tags","tags":null,"title":"Glue"},{"body":"","link":"https://kane.mx/tags/aws-eks/","section":"tags","tags":null,"title":"AWS EKS"},{"body":"Though you're administrator of your AWS account, you probably see below warnings when viewing your cluster in EKS console.\nYour current user or role does not have access to Kubernetes objects on this EKS cluster.\nIt's caused by the Kuberentes has itself RBAC authorization. And AWS uses IAM to grant permissions to users. You have to map your IAM user or role to K8S RBAC authorization to grant the permissions to access K8S resources in EKS cluster.\nAbove documentation demonstrate how adding IAM roles/users to EKS cluster to grant the roles/users to access K8S resources. However the documentation is not clear to how adding federated users to EKS cluser.\nI'm facing two scenarios of federated AWS users to access K8S resources in EKS console,\nUse corp SSO to access internal system, then logging into AWS account via assuming existing role of the AWS account Use tool like AWS Vault/Alfred workflow to login AWS console via ak/sk of an IAM user Finally turn out below configuration to grant both federated users to access K8S resources in EKS console,\n1apiVersion: v1 2data: 3 mapRoles: | 4 - groups: 5 - system:bootstrappers 6 - system:nodes 7 rolearn: arn:aws:iam::123456789012:role/cluster-nodegroup-n-NodeInstanceRole-1OQT1WT84WVS8 # created by eksctl when bootrapping cluster 8 username: system:node:{{EC2PrivateDNSName}} 9 - groups: 10 - eks-console-dashboard-full-access-group 11 rolearn: arn:aws:iam::123456789012:role/Admin # granting the federated user via assuming role 12 username: Admin/kane 13 mapUsers: | 14 - userarn: arn:aws:sts::123456789012:federated-user/kane # granting the federated user via aws-vault 15 username: ops-user 16 groups: 17 - eks-console-dashboard-full-access-group ","link":"https://kane.mx/posts/2022/grant-federated-users-accessing-k8s-resources-in-eks-console/","section":"posts","tags":["Kubernetes","AWS EKS","Tip","AWS"],"title":"Grant federated users accessing kubernetes resources in EKS console"},{"body":"","link":"https://kane.mx/tags/construct-hub/","section":"tags","tags":null,"title":"construct hub"},{"body":"","link":"https://kane.mx/tags/npm/","section":"tags","tags":null,"title":"npm"},{"body":"","link":"https://kane.mx/tags/projen/","section":"tags","tags":null,"title":"projen"},{"body":"Construct Hub is a web portal to collect the constructs for AWS CDK, CDK8s and CDKtf. The construct could support multiple programming languages, such as Javascript/TypeScript, Python, Java and C#. Actually the construct is developed by TypeScript, then it's compiled as across languages library by jsii! Any npm/pypi package with certain tags will be discovered by Construct Hub, the package will be automatically recognized as construct package and listed in Construct Hub.\nProjen is a project generator to create project with simplifying the project configuration to support dependencies management, building, unit testing, code style linting, CI/CD via Github actions PR and actions. So projen supports the construct project out of box, which configures construct project with jsii configuration that build the construct to across languages library, though publish the packages to kinds of package registries, such as npmjs, pypi and maven central.\nProjen provides a Publishing capability to publish construct library to supported package managers. For example, npm for JavaScript/TypeScript, it could publish the package to several npm registries, for example, npm public registry, Github packages, AWS CodeArtifact and any public accessible private npm registry.\nHowever the projen only supports publishing the package to single npm registry by default, how about you would like to publish your package to both npm public registry and Github packages?\nThere is no mature way to archive it, but projen is a flexible tool, we can hack it like below to add multiple npm registries support to publish the package to both npm public registry and Github packages,\n1const target = \u0026#39;js\u0026#39;; 2const REPO_TEMP_DIRECTORY = \u0026#39;.repo\u0026#39;; 3const options = { 4 registry: \u0026#39;npm.pkg.github.com\u0026#39;, 5 prePublishSteps: [ 6 { 7 name: \u0026#39;Prepare Repository\u0026#39;, 8 run: `mv ${project.artifactsDirectory} ${REPO_TEMP_DIRECTORY}`, 9 }, 10 { 11 name: \u0026#39;Install Dependencies\u0026#39;, 12 run: `cd ${REPO_TEMP_DIRECTORY} \u0026amp;\u0026amp; ${project.package.installCommand}`, 13 }, 14 { 15 // remove this if your package name already has scope 16 name: \u0026#39;Update package name\u0026#39;, 17 run: `cd ${REPO_TEMP_DIRECTORY} \u0026amp;\u0026amp; sed -i \u0026#34;1,5s/\\\\\u0026#34;packagename\\\\\u0026#34;/\\\\\u0026#34;@scope\\\\/packagename\\\\\u0026#34;/g\u0026#34; package.json`, 18 }, 19 { 20 name: `Create ${target} artifact`, 21 run: `cd ${REPO_TEMP_DIRECTORY} \u0026amp;\u0026amp; npx projen package:js`, 22 }, 23 { 24 name: `Collect ${target} Artifact`, 25 run: `mv ${REPO_TEMP_DIRECTORY}/${project.artifactsDirectory} ${project.artifactsDirectory}`, 26 }, 27 ], 28}; 29project.release.publisher.addPublishJob((_branch, branchOptions) =\u0026gt; { 30 return { 31 name: \u0026#39;npm_github\u0026#39;, 32 publishTools: {}, 33 prePublishSteps: options.prePublishSteps ?? [], 34 run: project.release.publisher.publibCommand(\u0026#39;publib-npm\u0026#39;), 35 registryName: \u0026#39;npm-github\u0026#39;, 36 env: { 37 NPM_DIST_TAG: branchOptions.npmDistTag ?? options.distTag ?? \u0026#39;latest\u0026#39;, 38 NPM_REGISTRY: options.registry, 39 }, 40 permissions: { 41 contents: github.workflows.JobPermission.READ, 42 packages: github.workflows.JobPermission.WRITE, 43 }, 44 workflowEnv: { 45 NPM_TOKEN: \u0026#39;${{ secrets.YOUR_GITHUB_REGISTRY_TOKEN }}\u0026#39;, 46 // if we are publishing to AWS CodeArtifact, pass AWS access keys that will be used to generate NPM_TOKEN using AWS CLI. 47 AWS_ACCESS_KEY_ID: undefined, 48 AWS_SECRET_ACCESS_KEY: undefined, 49 AWS_ROLE_TO_ASSUME: undefined, 50 }, 51 }; 52}); Above code snippet adds an additonal step in release workflow of Github action that is managed by projen, which publishes the package to Github packages.\nHAPPY Projen!\n","link":"https://kane.mx/posts/2022/publishing-npm-packages-to-multiple-registries-with-projen/","section":"posts","tags":["CDK Construct","AWS CDK","npm","projen","continuous delivery","construct hub"],"title":"Publishing npm packages to multiple registries with Projen"},{"body":"近期在一个 Webinar 分享了如何在 AWS 上服务去中心化研发团队构建共享服务平台，核心观点总结如下，\n这里的去中心化团队是同理想的完全化的 DevOps 团队(负责设计、开发、测试、运维以及运营等所有环节)相对立的。 在较大型的组织中，账户管理、网络规划、服务审计等模块会由平台，基础设施或安全团队所负责， 多个研发团队会负责各个业务系统的开发、测试、运维等。\n如今组织的健康运营对安全性合规性要求越来越高，通常基础设施团队外加安全团队负责承担安全、合规需求的整体策略规划及实施。 但是满足安全、合规需求通常是同业务交付速度期望是相悖的。一方面，平台、安全团队要为应用上线或变更进行安全性与合规性审查， 而研发团队需要投入更多的资源去满足安全、合规的需求，这必然会推迟交付。另一方面，研发团队的交付变更还需要内部流程以及 人工操作的话，跨团队的沟通、协作必然也会延缓交付速度。所以基于安全、合规需求的抽象，外加自助服务的共享服务平台， 针对这种场景而生，可以大幅改善交付速度同时满足安全、合规要求。\nAWS 上抽象的助力 在亚马逊软件开发中的抽象分为以下几类，\n框架 框架为应用程序编写代码的时候，为了编写更小更高效的代码，代码被扩展成或被建成更实质性的软件部分。 开发人员对框架应该非常熟悉了，无论是Web开发的Spring、Django、VueJS、React还是ML模型训练的TesnorFlow和PyTorch都是 框架，帮助开发者降低开发门槛，专注在核心业务上。从组织的安全、合规角度出发，基础设施或安全团队可以通过模板或者模式来 强制实施企业规范来达到安全性和合规性需求。\nAWS 目前提供的框架类工具或服务有 AWS SAM, AWS CDK以及AWS CloudFormation。 基于这些框架类工具和服务，用户可以快速构建云上应用，或者是创建云上应用的组件且同时满足企业安全合规需求。\n命令行 CLI 框架的命令行 CLI 让开发团队用他们熟练的语言根据它构建自动化。CLI 能够简化框架的使用难度，开发者可以使用最熟悉的开发语言 (例如 Shell 脚本/Python)来调用 CLI，实现业务逻辑的封装。\nAWS Copilot，AWS SAM CLI是 AWS 提供的 CLI 工具。\n部署服务 最后部署服务拿应用软件来说，由开发团队编写并定义了如何使用那个软件，并让它在真实的基础设施环境运行。开发团队需要加快 应用交付速度来满足业务需求，而基础设施和安全团队需要作为企业安全合规方面的 GateKeeper。一套合理的协作模式将会加速 开发团队的交付且满足安全需求，例如共享自服务平台。\nAWS 提供了很多开箱即用的产品开启建立一个共享服务平台，例如，AWS Proton，AWS CodeDeploy。\n平台所有权模式的思考 作为一个共享服务平台，不同的管理需求/模式或应用负载类型，会有不同的服务扮演不同的角色。下面是一些客户实践的平台模式。\nAWS 账户作为\u0026quot;平台\u0026quot; 组织将 AWS 账户作为平台，自动化创建，其特点如下，\nAWS 账户属于应用团队且由他们运营 基础设施团队为应用账户提供工具，包括且不限于， 支撑型的基础设施(例如，网络，安全，域名，公司标准等) AWS Proton 环境和应用 AWS Service Catalog 产品 此外 [AWS Control Tower][control-towner], AWS Organizations, CloudFormation StackSets, AWS Config 一致性功能， 都是一些服务或功能可以支持以账户为管理单位的共享平台。\n托管容器集群作为\u0026quot;平台\u0026quot; AWS 账户由平台/基础设施团队运营，他们将管理容器集群的生命周期，例如托管的 EKS(Kubernentes) 集群。应用团队负责将 应用部署到基础设施团队管理的多租户集群，应用团队将承担如下职责(包括且不限于)，\n应用程序持续集成 入口流量控制 访问管理 运营可见性 服务于应用程序的周边基础设施(例如，数据库、队列或缓存等)的部署可以通过持续集成的 AWS CloudFormation/AWS CDK 模板，AWS Proton 环境/应用来实现。\n可部署的应用程序模式作为\u0026quot;平台\u0026quot; 这种模式下通常会由基础设施团队拥有共享账户，负责网络、域名、审计等资源。应用团队负责应用账户。基础设施团队创建现成的 应用程序、部署机制、抽象库供应用程序团队使用或自定义，如下一些服务或功能可以实现该模式，\nAWS Proton AWS CloudFormation / AWS Service Catalog AWS CDK constructs 产品化运营共享自服务平台 共享自服务平台除了根据组织管理和技术栈选择合适的实现模式外，是否能够在一个组织内真正的优化效率，提升研发交付速度取决于 如何运营这个平台。这里我们看到的成功案例都是将该平台产品化，按经营产品的方式来运营他。通常成功的共享自服务平台 分为三个步骤来实现自身价值，形成增长飞轮。\n1. 尝试，证明价值 所谓万事开头难，构建共享服务平台需要找到一个合适的应用团队作为种子用户。该团队的应用场景应该是一个典型用例，应用团队 需要频繁发布来交付业务价值，而该应用将涉及到基础设施团队负责的模块，且要符合组织对安全性和合规性的审查。由双方团队共同 定义交互模型，例如，如何开发基础设施即代码，平台基础架构，应用部署方式。并且应用团队方需要认可该平台的价值，在种子应用 成功落地共享服务平台后，会逐渐将更多应用落地到共享平台模式上。\n同时，平台的技术选项也非常重要，要适应企业自身的组织管理结构和技术栈能力。例如，\nAWS CloudFormation / AWS CDK: 通用且最灵活的实现；同时也是双刃剑，维护大型的 CloudFormation 模板是非常困难的，采用 AWS CDK 需要学习新的技能，且有时需要深入研究才可能 Hack 某些内部实现；是如果需要完全掌握实现细节时的选择， AWS Copilot: 仅适用于 ECS 上部署的容器应用；开发应用的团队不关心或不需要管理基础设施， AWS Proton: 适用于将应用和基础设施权限分离的场景；满足应用团队需要自服务的模式。 2. 复制推广 在满足了种子应用的需求后，让共享服务平台走向成功的关键是如何运营推广他。产品化的运营需要做的以下几点，\n文档化你构建的平台，包括 自服务/自动化的采用步骤 用户手册、API 文档 支持的机制，如何为采用平台的内部用户提供技术支持 公开代码，至少是内部开源，让更多的用户参与共享 内部营销平台 利用成功案例赢得领导们的支持，达到量化平台价值，规避风险，提升业务研发效率 内部\u0026quot;路演\u0026quot;招募团队并获得反馈 证明你的共享服务平台方式可扩展 考虑支持几十上百的团队 可跨越各种场景，例如，应用程序中断，AWS 服务事件，迁移，0-day 补丁 考虑平台复制的瓶颈在哪里？例如，采用难度，学习曲线，部署，支持 / on call 等等 3. 形成飞轮 共享自服务平台最终形成产生自身增长势头的良性循环，例如，\n投资平台团队 --\u0026gt; 添加平台功能 --\u0026gt; 应用开发者更快乐 --\u0026gt; 增加平台使用 --\u0026gt; 提升组织的效率 --\u0026gt; 投资平台团队 --\u0026gt; ...\n通过以上一个飞轮闭环，达成长期成功。\n","link":"https://kane.mx/posts/2021/shared-service-platform-for-decentralized-developer-teams/","section":"posts","tags":["SSP","DevOps","GitOps","Infrastructure as Code","AWS","Proton","Service Catalog"],"title":"AWS上构建共享自服务平台服务去中心化研发团队"},{"body":"","link":"https://kane.mx/tags/infrastructure-as-code/","section":"tags","tags":null,"title":"Infrastructure as Code"},{"body":"","link":"https://kane.mx/tags/proton/","section":"tags","tags":null,"title":"Proton"},{"body":"","link":"https://kane.mx/tags/service-catalog/","section":"tags","tags":null,"title":"Service Catalog"},{"body":"","link":"https://kane.mx/tags/ssp/","section":"tags","tags":null,"title":"SSP"},{"body":"","link":"https://kane.mx/tags/amazon-builders-library/","section":"tags","tags":null,"title":"Amazon Builders' Library"},{"body":"","link":"https://kane.mx/series/amazon-builders-library/","section":"series","tags":null,"title":"amazon-builders-library"},{"body":"","link":"https://kane.mx/tags/resilience-engineering/","section":"tags","tags":null,"title":"resilience engineering"},{"body":"","link":"https://kane.mx/tags/system-design/","section":"tags","tags":null,"title":"System Design"},{"body":"AWS架构的完善(AWS Well-Architected)框架涉及了五大支柱， 其中可靠性支柱要求侧重于确保工作负载在预期的时间内正确、一致地执行其预期功能。 这要求应用程序系统具备弹性设计，可从故障中快速恢复，以便满足业务和客户需求。 然而设计、开发、且验证具备弹性设计的应用程序，对经验和实践能力都有很高的要求。 利用成熟的经验和良好的工具将加快构建符合预期的弹性应用程序。\nApplication Resilience Workshop是一套课程和动手实践学习如何进行实验来观察系统的行为， 例如，极端系统负载和网络中断情况下，使用不同的软件模式来减轻这些实验对系统稳态的影响。 整个实验也是分为假设、方法、观测和缓解等步骤，同混沌工程有异曲同工之处。\n应用程序弹性实验假设了一个微服务构建的应用程序，通过压力测试工具注入极端的系统负载， 通过应用程序各服务的可观测性来理解目标应用的延迟，吞吐、容量、RTO等指标。\n当发现最初设计的应用程序在极端压力下会有灾难性的故障，教程中给出了队列，负载卸载， 通过降低服务QoS的Client Deadline Cutoff，断路器，令牌桶等程序设计模式来缓解极端压力对系统造成的灾难性的故障。\n但是无论使用队列解耦还是负载卸载都不是绝对完美的解决方案，在Amazon Builders' Library 中的几篇文章为我们分享了Amazon从运行大规模分布式系统中学习到的宝贵且成熟的经验，\n避免无法克服的队列积压 通过卸除负载来避免过载 超时、重试和抖动回退 利用这些成熟的经验我们可以权衡系统的需求和技术实现，选择当下最合理且可行的解决方案。\n在今年的Pre-re:Invent之际，AWS发布了AWS Resilience Hub服务，将应用程序云上资源状态的扫描， 系统弹性的评估，符合RPO/RTO的配置建议，以及基于混沌工程的实验运行集成为一个整体的服务，通过一个控制面板实现了应用程序弹性的管理。\n此外，如果你的应用刚好是一个电商或在线票务系统，系统正在面对秒杀、黑五等大规模负载压力的考验，可以参考甚至直接尝试AWS解决方案 AWS Virtual Waiting Room来直接构建一个弹性系统。\n","link":"https://kane.mx/posts/2021/application-resilience/","section":"posts","tags":["AWS","resilience engineering","Amazon Builders' Library","System Design"],"title":"应用程序弹性设计"},{"body":"","link":"https://kane.mx/tags/metaverse/","section":"tags","tags":null,"title":"metaverse"},{"body":"","link":"https://kane.mx/tags/nft/","section":"tags","tags":null,"title":"nft"},{"body":"","link":"https://kane.mx/tags/%E5%85%83%E5%AE%87%E5%AE%99/","section":"tags","tags":null,"title":"元宇宙"},{"body":"元宇宙是近期的热点话题，近期做了些学习了解，将一些学习内容总结为一个deck。分享如下，\n","link":"https://kane.mx/posts/2021/metaverse/","section":"posts","tags":["metaverse","nft","元宇宙"],"title":"元宇宙风口下的机会"},{"body":"","link":"https://kane.mx/tags/aws-fault-injection-simulator/","section":"tags","tags":null,"title":"AWS Fault Injection Simulator"},{"body":"","link":"https://kane.mx/tags/aws-fis/","section":"tags","tags":null,"title":"AWS FIS"},{"body":"混沌工程是一种帮助系统满足弹性需求的技术，它起源于Netflix的工程实践，著名的猴子军团。\nAWS一直提倡架构的完善(AWS Well-Architected)，混沌工程正是卓越运营和可靠性支柱的实践。 因此在 re:Invent 2020 AWS发布了Fault Injection Simulator服务来简化开发者在AWS上的混动工程实践。\nAWS FIS作为AWS上原生的混沌工程服务，目前已同EC2，ECS，EKS，RDS，CloudWatch，甚至是IAM Role API集成，可以触发这些服务中资源的变更来假设故障， 例如，重启或终止EC2实例，重启RDS实例等。\nChaos Engineering on AWS是一份非常详细的混沌工程在AWS上动手实验。 该实验将指导参与者快速设置实验初始环境，通过可观测性工具了解系统状态，然后带领实验参与者通过详细的实验步骤学习如何使用FIS服务来达到对系统可靠性的验证和优化。 实验项目除了覆盖FIS支持集成的EC2，ECS，RDS等服务外，还演示了SSM集成，并且通过FIS内置的SSM文档或自定义的SSM文档来假设系统故障。 混沌工程作为一种提升系统弹性的质量手段，需要重复性的在系统中实验，动手实验也为参与者设计了CI/CD实验，通过Gitops方式将混动工程持续实验到系统环境中。 总之，对混沌工程有兴趣的开发者，Chaos Engineering on AWS非常值得一做的动手实验，可以快速的帮助您了解混沌工程，及FIS在AWS上的实践。\n最后再强调下最重要的事，混沌工程不是一个孤立的系统弹性实验，它需要系统本身的弹性、可靠性设计以及可观测性的实现，是一个系统整体的设计实践。\n","link":"https://kane.mx/posts/2021/chaos-engineering-on-aws/","section":"posts","tags":["AWS","chaos engineering","AWS Fault Injection Simulator","AWS FIS"],"title":"AWS上的混沌工程"},{"body":"","link":"https://kane.mx/tags/chaos-engineering/","section":"tags","tags":null,"title":"chaos engineering"},{"body":"","link":"https://kane.mx/tags/filevault/","section":"tags","tags":null,"title":"filevault"},{"body":"","link":"https://kane.mx/tags/macos-monterey/","section":"tags","tags":null,"title":"macOS Monterey"},{"body":"","link":"https://kane.mx/tags/macosx/","section":"tags","tags":null,"title":"MacOSX"},{"body":"I'm trying to upgrade my Macbook Pro to macOS Monterey, however the installation can not be started due to the disk is encrypted by Filevault \u0026#x1f615; I have to turn off Filevault to disable disk encrpytion before installing macOS Monterey.\nI found this support article on how turning off Filevault, but it does not work at all. There is nothing hint or error message after clicking the option Turn off Filevault.\nAfter researching it for a while, I found this post via CLI command,\n1sudo fdesetup disable But above command also does not work, it exits with error code -69594.\n1sudo fdesetup disable 2Enter the user name:kane 3Enter the password for user \u0026#39;kane\u0026#39;: 4FileVault was not disabled (-69594). I found some articles said that the Filevault only can be disabled by the user whom enables it. I found below command to show the user whom enabled the Filevault, it's enabled by an unknown user! I don't have idea how enabling it.\n1sudo fdesetup list -extended 2ESCROW UUID TYPE USER 3 2D3F7CA5-4ED4-4537-8DA2-98B1E3637954 Unknown User Finally I found below command line to disable Filevault though I don't know which user enabled it.\n1diskutil apfs disableFileVault disk1s1 -user disk Input the disk password when booting the macOS. The disabling Filevault will be processed in backgroud, you can retrieve the progress by below command,\n1diskutil apfs list Happy Monterey!\n","link":"https://kane.mx/posts/2021/turn-off-filevault-on-macosx/","section":"posts","tags":["MacOSX","macOS Monterey","filevault","Tip"],"title":"Turn off Filevault on macOS"},{"body":"","link":"https://kane.mx/tags/aws-ecr/","section":"tags","tags":null,"title":"AWS-ECR"},{"body":"","link":"https://kane.mx/tags/helm/","section":"tags","tags":null,"title":"Helm"},{"body":"I met a case to mirror existing Helm charts to another repository. It might be caused by network availability or compliance requirements.\nThere are multiple ways to host a Helm repository, for example, Nexus OSS Repository, Github Pages, AWS ECR and so on.\nAmazon Elastic Container Registry (Amazon ECR) is a fully managed container registry that makes it easy to store, manage, share, and deploy your container images and artifacts anywhere. It's built with scale and secure. In my case I'm using this existing service to mirror the Helm charts.\nI created a script to mirror existing Helm chart to AWS ECR based on the official guide in ECR doc.\nFor example, below code snippet mirrors eks-charts/aws-load-balancer-controller with version 1.2.7 to Amazon ECR,\n1helm repo add eks-charts https://aws.github.io/eks-charts 2helm pull eks-charts/aws-load-balancer-controller --version 1.2.7 3./push-helm-chart-to-all-ecr-regions.sh aws-load-balancer-controller 1.2.7","link":"https://kane.mx/posts/2021/mirror-helm-chart-to-aws-ecr/","section":"posts","tags":["AWS","AWS-ECR","Helm","Kubernetes"],"title":"Mirror Helm Charts to AWS ECR"},{"body":"","link":"https://kane.mx/tags/amazon-neptune/","section":"tags","tags":null,"title":"Amazon Neptune"},{"body":"","link":"https://kane.mx/tags/graph-database/","section":"tags","tags":null,"title":"graph database"},{"body":"Amazon Neptune is a managed Graph database on AWS, whose compute and storage is decoupled like Amazon Aurora. Neptune leverages popular open-source APIs such as Gremlin and SPARQL, and easily migrate existing applications.\nAfter exploring Neptune few months in solution, I have below few learnings,\nBulk loading Always meet the ConcurrentModificationExceptions when concurrently loading vertices/edges into Neptune. Using neptune-python-utils with retry backoff can improve it, however it requires the expensive large Neptune instance.\nThe best way of batch loading the large vertices/edges into Neptune is using the bulk load feature, it works fine though the instance of Neptune is small. The loading time depends on the instance size of Neptune.\nproperties of vertice In my use case, I store the embedding as properties of vertices like relation database. There are almost 400 properties for every vertices, the query performance is bad with large number of properties. Due to the embedding properties will not be queried, consolidating the 400 properties as a single one properties to improve the query performance.\nstreams Neptune Streams logs every change to the graph. It's a Lab feature in 2019, and GA in 2020. However there is no Lambda integration now! It means you can not process the Neptune streams in Lambda functions!\nTools Neptune Tools Amazon Neptune Tools is a toolkit maintained by Neptune service team.\nNeptune sigv4 The script can connect Neptune to call control plane APIs with aswauthsigv4 and proxy support.\n","link":"https://kane.mx/posts/2021/the-practise-of-amazon-neptune/","section":"posts","tags":["graph database","Amazon Neptune","AWS"],"title":"The practise of Amazon Neptune"},{"body":"","link":"https://kane.mx/tags/amazon-eks/","section":"tags","tags":null,"title":"Amazon EKS"},{"body":"","link":"https://kane.mx/tags/sonatype-nexus/","section":"tags","tags":null,"title":"Sonatype Nexus"},{"body":"Last year I shared the production-ready, cloud native solution to deploy Sonatype Nexus Repository OSS on AWS.\nThe solution has an update with below notable changes,\nsupport specifying EKS version, v1.20, v1.19, and v1.18 are supported versions support provisioning to existing VPC support provisioning to existing EKS(require EKS v1.17+) update aws-efs-csi-driver to 1.3.1 update aws-load-balancer-controller to 2.2.0 See the solution page for detail usage.\n","link":"https://kane.mx/posts/2021/nexus-oss-on-aws-v110-update/","section":"posts","tags":["Amazon EKS","Kubernetes","Helm","AWS CDK","AWS","Sonatype Nexus"],"title":"The update of Sonatype Nexus repository OSS on AWS solution"},{"body":"","link":"https://kane.mx/tags/nat/","section":"tags","tags":null,"title":"NAT"},{"body":"","link":"https://kane.mx/tags/network/","section":"tags","tags":null,"title":"network"},{"body":"本方案的起因是，一个源代码托管在Github上的项目fix一个重要的bug后，在AWS上的持续部署流水线一直失败。分析日志后，发现流水线中的数个步骤需要克隆源代码，但是访问Github的网络非常不稳定，这数个流水线任务持续因连接超时，连接拒绝等网络错误而失败。而流水线任务大量使用了CodeBuild, Lambda等AWS托管服务，无法为执行环境配置可靠的网络连接。\n本方案思路如下，\n在 VPC public subnets 中创建 NAT instance 即 EC2 虚拟机， 配置 NAT instance，使用 tunnel 网络访问 github， 修改 private subnets 的路由表，添加 github 服务的 IP CIDRs，将对这些IP地址的请求通过 NAT instance 转发。 综上，实现了不用对现有持续部署流水线做任何修改，流水线中运行在 VPC private subnet 内的任务(包括但不限于CodeBuild, Fargate, Lambda, Glue等)，对外网的请求目标地址如在路由表的特殊规则(IP CIDRs)中，网络请求将会通过 NAT instance 来转发。\n为此，创建了一个基于 AWS CDK construct 的开源项目 SimpleNAT 来封装和复用创建配置 NAT instances，并且将指定的IP地址段更新到路由表设置路由规则。\n该项目同时提供了一个完整示例应用，演示了如何配置 NAT instance 使用 sshuttle 建立网络隧道，并且将指定的IP地址段请求通过 NAT instance 来转发。\n","link":"https://kane.mx/posts/2021/simple-nat-on-aws/","section":"posts","tags":["AWS","Tip","network","NAT","CDK Construct","AWS CDK"],"title":"在AWS上快速部署专用的NAT实例"},{"body":"So, Who Am I? I’m the father of three boys. Live in Beijing. Also I'm the *uix user, a full stack software engineer, devops and cloud native evangelist.\nCurious about me? Use the social links above to check out my profiles.\n","link":"https://kane.mx/about/","section":"","tags":null,"title":"About"},{"body":"Infrastructure as Code is the trend to manage the resources of application. AWS CloudFormation is the managed service offering the IaC capability on AWS since 2011. CloudFormation uses the declarative language to manage your AWS resources with the style what you get is what you declare.\nHowever there are cons of CloudFormation as a declarative language,\nthe readability and maintenance for applications involving lots of resources the reuseable of code, CloudFormation modules released in re:Invent 2020 might help mitigate it AWS CDK provides the programming way to define the infra in code by your preferred programming languages, such as Typescript, Javascript, Python, Java and C#. AWS CDK will synthesis the code to CloudFormation template, then deploying the stack via AWS CloudFormation service. It benefits the Devops engineers manage the infra on AWS as programming application, having version control, code review, unit testing, integration testing and CI/CD pipelines, the deployment still depends on the mature CloudFormation service to rolling update the resources and rollback when failing.\nFor solution development, using CDK indeed improves the productivity then publish the deployment assets as CloudFormation templates.\nThough CDK application can be synthesized to CloudFormation template, there are still some differences blocking the synthesized templates to be deployed across multiple AWS regions.\nThis post will share the tips on how effectively writing AWS CDK application then deploying the application by CloudFormation across multiple regions.\nGeneral Environment-agnostic stack Don’t specify env with account and region like below that will generate account/region hardcode in CloudFormation template.\n1new MyStack(app, \u0026#39;Stack1\u0026#39;, { 2 env: { 3 account: \u0026#39;123456789012\u0026#39;, 4 region: \u0026#39;us-east-1\u0026#39; 5 }, 6}); use CfnMapping/CfnCondition instead of if-else clause CloudFormation does not have logistic processing like programming language. Use CfnMapping or CfnCondition instead.\nNote: the CfnMapping does not support default value, you have to list all supported regions like below code snippet,\n1getAwsLoadBalancerControllerRepo() { 2 const albImageMapping = new cdk.CfnMapping(this, \u0026#39;ALBImageMapping\u0026#39;, { 3 mapping: { 4 \u0026#39;me-south-1\u0026#39;: { 5 2: \u0026#39;558608220178\u0026#39;, 6 }, 7 \u0026#39;eu-south-1\u0026#39;: { 8 2: \u0026#39;590381155156\u0026#39;, 9 }, 10 \u0026#39;ap-northeast-1\u0026#39;: { 11 2: \u0026#39;602401143452\u0026#39;, 12 }, 13 \u0026#39;ap-northeast-2\u0026#39;: { 14 2: \u0026#39;602401143452\u0026#39;, 15 }, 16 ... 17 \u0026#39;ap-east-1\u0026#39;: { 18 2: \u0026#39;800184023465\u0026#39;, 19 }, 20 \u0026#39;af-south-1\u0026#39;: { 21 2: \u0026#39;877085696533\u0026#39;, 22 }, 23 \u0026#39;cn-north-1\u0026#39;: { 24 2: \u0026#39;918309763551\u0026#39;, 25 }, 26 \u0026#39;cn-northwest-1\u0026#39;: { 27 2: \u0026#39;961992271922\u0026#39;, 28 }, 29 } 30 }); 31 return `${albImageMapping.findInMap(cdk.Aws.REGION, \u0026#39;2\u0026#39;)}.dkr.ecr.${cdk.Aws.REGION}.${cdk.Aws.URL_SUFFIX}/amazon/aws-load-balancer-controller`; 32 } never use Stack.region Don’t rely on stack.region to do the logistic for China regions. Use additional context parameter or CfnMapping like below snippet,\n1const partitionMapping = new cdk.CfnMapping(this, \u0026#39;PartitionMapping\u0026#39;, { 2 mapping: { 3 aws: { 4 nexus: \u0026#39;quay.io/travelaudience/docker-nexus\u0026#39;, 5 nexusProxy: \u0026#39;quay.io/travelaudience/docker-nexus-proxy\u0026#39;, 6 }, 7 \u0026#39;aws-cn\u0026#39;: { 8 nexus: \u0026#39;048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/quay/travelaudience/docker-nexus\u0026#39;, 9 nexusProxy: \u0026#39;048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/quay/travelaudience/docker-nexus-proxy\u0026#39;, 10 }, 11 } 12 }); 13partitionMapping.findInMap(cdk.Aws.PARTITION, \u0026#39;nexus\u0026#39;); Use core.Aws.region token referred to the region which region of the stack is deployed.\nexplicitly add dependencies on resources to control the creation/deletion order of resources For example, when deploying a solution with creating a new VPC with NAT gateway, then deploying EMR cluster in private subnets of VPC. The EMR cluster might fail on creation due to network issue. It’s caused by the NAT gateway is not ready when initializing the EMR cluster, you have to manually create the dependencies among EMR cluster and NAT gateway.\nAlways override the logical ID of CloudFormation resource when creating AWS resources with unique name UPDATED: 2023/10/24\nWhen creating an AWS resource via CDK with a friendly name, for example, you create a Glue Table named my-table in CDK. The logical ID will be generated by CDK constructs' name inheritance, however, you might refactor your constructs in the system design level. The default logical ID of the resource will be changed after your refactor or renaming the ID of construct. After the logical ID changes, the resource will be replaced when updating the CloudFormation stack to a new template. In the updating process of CloudFormation stack, a new resource will be created firstly, however, the resource creation will fail due to the conflict resource name. Currently, the workaround is that explicitly overriding the logical ID of the AWS resource created by CDK to avoid the replacement in stack updating. Explicitly override the logical ID will maintain the code readability and avoid the unintended the failure of stack update.\n1(table.node.defaultChild as CfnResource).overrideLogicalId(tableLogicId); EKS module(@aws-cdk/aws-eks) specify kubectl layer when creating EKS cluster NOTE: This tricky only applies for AWS CDK prior to 1.81.0. CDK will bundle kubectl, helm and awscli as lambda layer instead of SAR application since 1.81.0, it resolves below limitation.\nEKS uses a lambda layer to run kubectl/helm cli as custom resource, the @aws-cdk/aws-eks module depends on the Stack.region to check the region to be deployed in synthesizing phase. It violates the principle of Environment-agnostic stack! Use below workaround to create the EKS cluster,\n1const partitionMapping = new cdk.CfnMapping(this, \u0026#39;PartitionMapping\u0026#39;, { 2 mapping: { 3 aws: { 4 // see https://github.com/aws/aws-cdk/blob/60c782fe173449ebf912f509de7db6df89985915/packages/%40aws-cdk/aws-eks/lib/kubectl-layer.ts#L6 5 kubectlLayerAppid: \u0026#39;arn:aws:serverlessrepo:us-east-1:903779448426:applications/lambda-layer-kubectl\u0026#39;, 6 }, 7 \u0026#39;aws-cn\u0026#39;: { 8 kubectlLayerAppid: \u0026#39;arn:aws-cn:serverlessrepo:cn-north-1:487369736442:applications/lambda-layer-kubectl\u0026#39;, 9 }, 10 } 11}); 12 13const kubectlLayer = new eks.KubectlLayer(this, \u0026#39;KubeLayer\u0026#39;, { 14 applicationId: partitionMapping.findInMap(cdk.Aws.PARTITION, \u0026#39;kubectlLayerAppid\u0026#39;), 15}); 16const cluster = new eks.Cluster(this, \u0026#39;MyK8SCluster\u0026#39;, { 17 vpc, 18 defaultCapacity: 0, 19 kubectlEnabled: true, 20 mastersRole: clusterAdmin, 21 version: eks.KubernetesVersion.V1_16, 22 coreDnsComputeType: eks.CoreDnsComputeType.EC2, 23 kubectlLayer, 24}); If you're interested on this issue, see cdk issue for detail.\nmanage the lifecycle of helm chart deployment The k8s helm chart might create AWS resources out of CloudFormation scope. You have to manage the lifecycle of those resources by yourself.\nFor example, there is an EKS cluster with AWS load balancer controller, then you deploy a helm chart with ingress that will create ALB/NLB by the chart, you must clean those load balancers in deletion of the chart. Also the uninstall of Helm chart is asynchronous, you have to watch the deletion of resource completing before continuing to clean other resources.\nTHE END The tips will be updated when something new is found or the one is deprecated after CDK is updated.\nHAPPY CDK \u0026#x1f606;\n","link":"https://kane.mx/posts/2020/effective-aws-cdk-for-aws-cloudformation/","section":"posts","tags":["Infrastructure as Code","AWS CloudFormation","AWS CDK","AWS"],"title":"Effective AWS CDK for AWS CloudFormation"},{"body":"近期Amazon Builders Library发布了数篇文章介绍亚马逊如何实践持续部署，同时分享了亚马逊在部署方面的最佳实践。\n这里将这三篇文章核心内容做个概述，方便大家按需细读。\nGoing faster with continuous delivery 这篇文章先是分享了亚马逊持续改进和软件自动化的文化(Amazonian随时都惦记着的领导力准则)，然后介绍了亚马逊内部的持续部署工具Pipelines。从一个试点工具进化为亚马逊标准、一致且简洁的发布工具。并且将构建和发布软件的最佳实践检查也融入到Pipelines中。\n接下来是分享如何减小故障影响到客户的风险。有过软件开发经验的都知道，软件变更引入故障是不可避免的，如何将故障对客户的影响控制到最小是非常重要的。该文从下面几个方面给出了建议，\n部署卫生，如对新部署程序的健康检查 上生产系统之前的测试，自动化单元、集成、预生产测试 生产系统上的验证，分批的部署，控制故障影响半径 控制何时发布软件 最后作者介绍了亚马逊如何快速执行业务创新 -- 通过自动化一切事情。\nAutomating safe, hands-off deployments 这篇文章很好的呼应了Going faster with continuous delivery一文中如何避免新的部署导致故障影响，非常详细的介绍了亚马逊关于自动化安全部署的实践。\n对于持续部署，源码 -\u0026gt; 构建 -\u0026gt; 测试 -\u0026gt; 生产 这个流程大家都很熟悉。\n从下图看，亚马逊对于源码和构建的理解是非常深入和全面的。\n源码并不仅仅是应用程序源代码，还可以包括运维工具代码、测试代码、基础架构代码、静态资源、依赖库、配置和操作系统补丁。\n代码审核是必须的。对于全自动的流水线，代码审核是最后一道人工核验。代码审核不仅仅是审核代码的正确性，还应该检查代码是否包括足够的测试，是否有完善的工具来监测部署以及能否安全的回退。\n同时构建也不光是编译源代码，打包并存储构件。也包含单元测试，静态代码分析，代码覆盖率检查，代码审核检查。\n测试在亚马逊是一个多阶段的预生产环境，详见下图。\n集成测试是自动化的模拟客户一样使用服务，实现端到端的测试。部署到生产之前，还需要执行向后兼容性测试以及借助负载均衡实现one-box测试。\nAWS服务是部署在全球多个区域内的多个可用区，为了减少部署故障对客户的影响，生产通过波次部署来分批分阶段的安全部署。\n首先部署是在单区域的单可用区做one-box部署，如果引起负面问题，会自动回退并停止生产后续的部署。系统指标的监控是实现自动化安全部署的核心，需要通过监控的指标来自动触发部署回退。\nBake time也是实践经验总结出来的精髓。有时故障不是在部署后马上显现的，需要时间才会逐渐显现。设置合理的Bake time，能够让故障有足够时间被暴露出来，不至于照成大范围影响。\nEnsuring rollback safety during deployments 因为故障是不可避免的，部署能够被安全回退是非常必要的。这篇文章就详细介绍了如何实现可安全回退的部署 -- 通过两阶段部署的技术，以及序列化的最佳实践。\n这三篇文章分别从术和器的角度分享了亚马逊在软件部署的实践经验，开发者们可以结合自身业务情况集成适合的最佳实践。\n","link":"https://kane.mx/posts/2020/the-best-practise-of-deployment-at-amazon/","section":"posts","tags":["DevOps","Continuous Deployment","Amazon Builders' Library","System Design"],"title":"亚马逊的部署最佳实践"},{"body":"","link":"https://kane.mx/tags/aws-step-functions/","section":"tags","tags":null,"title":"AWS Step Functions"},{"body":"AWS CDK是编排部署AWS云上资源最佳的工具之一。基于AWS CDK的应用应该如何实践DevOps持续集成和部署呢？\n通常我们有下面几种方法，\n使用AWS CodePipeline来完成DevOps pipeline搭建。CodePipeline是AWS Code系列服务中的持续集成编排工具，它可以集成CodeBuild项目，在CodeBuild项目build中安装cdk，并执行cdk deploy命令来实现应用部署。 这种方法简单直接的实现了DevOps部署流水线。但缺少staging，将最新提交直接部署到生产是一种非常高风险的做法。\nCDK近期发布了体验性的新特性CDK Pipelines来封装CDK应用持续部署流水线的配置。CDK Pipelines也是基于AWS CodePipeline服务，提供快速创建可跨账号区域的持续部署流水线，同时支持部署流水线项目的自升级更新。整个流水线流程如下图所示， CDK Pipelines是非常高效且灵活的持续部署流水线创建的方式，但由于是体验性特性，在生产应用中还有一些局限性。例如，\n不支持context provider查找。也就是说，无法支持CDK应用查找账户中存在的VPC，R53 HostedZone等。 由于CDK Pipelines实际是使用CodePipeline来编排部署流水线，CodePipeline的局限性，CDK Pipelines同样存在。 CodePipeline在某些分区和区域还不可用。例如，AWS中国区暂时还没有CodePipeline服务，CDK Pipelines在AWS中国区也就无法使用。 使用AWS Step Functions来编排CDK应用部署的流水线。在Step Functions编译的部署流水线中，可用通过CodeBuild项目来完成cdk deploy执行做到完整的支持CDK的所有功能。同时Step Functions具备最大的灵活性来支持持续部署过程中的各种编排需求，例如，跨账户部署应用的不同stage，引入人工审批流程，通过Slack等chatops工具来完成审批。 Opentuna项目就实践了用Step Functions来编排持续部署流水线。整个部署流程如下图，\n如果对基于Step Functions实现的CDK应用持续部署感兴趣，可以访问OpenTUNA项目实现的源码了解更多细节。\n","link":"https://kane.mx/posts/2020/deploy-aws-cdk-applications-cross-accounts/","section":"posts","tags":["AWS","AWS CDK","DevOps","AWS Step Functions"],"title":"跨账号跨区域部署AWS CDK编排的应用"},{"body":"Sonatype Nexus repository OSS is an artifact repository that supports most software repositories such as Maven, Pypi, Npmjs, Rubygems, Yum, Apt, Docker registry and etc. In the enterprise Nexus repository is widely used for storing proprietary artifacts and caching the artifacts for speeding up the devops.\nBuilding a production ready Nexus repository always is a requirement for devops team, it should satisfy below criterias at least,\nartifacts storage management It's difficult to predicate the storage usage of artifacts, allocating large volume is not cost optimized. the durability of nexus3 data storage We need a way to make sure data storage of nexus when updating Nexus OSS to newer version or recover the service from unhealthy status. self healing capability when the service is down A reliable way recovers the Nexus repository OSS when it's unhealth. There is a well-architected solution(maintained by AWS team) to quickly(~10 minutes) deploy Nexus OSS leveraging below capabilities,\nHost on EKS cluster using managed EC2 nodes with IRSA Expose service via AWS Application load balancer managed by AWS load balancer controller(former ALB Ingress Controller) Use dedicated S3 bucket for storing Nexus OSS blobstore with ulimited and on-demand storage Use EFS, EFS CSI Driver, PV and PVC storing nexus data Use Helm to deploy Sonatype Nexus chart Optional Use External DNS to registry the domain record of Nexus repository to Route 53 Optional Use AWS Certificate Manager to create SSL certificate of domain name of Nexus repository Enjoy it\u0026#x1f60f;\n","link":"https://kane.mx/posts/2020/deploy-sonatype-nexus-oss-on-eks/","section":"posts","tags":["Amazon EKS","Kubernetes","Helm","AWS CDK","AWS","Sonatype Nexus"],"title":"Deploy Sonatype Nexus repository OSS on EKS"},{"body":"","link":"https://kane.mx/tags/analytics/","section":"tags","tags":null,"title":"Analytics"},{"body":"","link":"https://kane.mx/tags/aws-athena/","section":"tags","tags":null,"title":"AWS Athena"},{"body":"","link":"https://kane.mx/tags/big-data/","section":"tags","tags":null,"title":"Big Data"},{"body":"","link":"https://kane.mx/tags/cloud-native/","section":"tags","tags":null,"title":"Cloud Native"},{"body":"","link":"https://kane.mx/tags/data-lakes/","section":"tags","tags":null,"title":"Data Lakes"},{"body":"","link":"https://kane.mx/tags/docker/","section":"tags","tags":null,"title":"docker"},{"body":"","link":"https://kane.mx/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/","section":"tags","tags":null,"title":"云计算"},{"body":"近期对Docker镜像做了些数据分析，这里分享一下利用云原生技术快速且低成本的实现任意数量的数据分析。\n之前通过文章介绍了不用拉取Docker镜像就可获取镜像的大小的一种方法，通过其中的示例脚本，我们可以获取到待分析的原始数据。\n比如nginx镜像的部分原始数据(csv格式)如下，\n1 2 3 4 5 6 7 8 9 10 11 12 1.18.0-alpine,sha256:676b8117782d9e8c20af8e1b19356f64acc76c981f3a65c66e33a9874877892a,amd64,linux,null,null,\u0026#34;sha256:cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08\u0026#34;,2813316 1.18.0-alpine,sha256:676b8117782d9e8c20af8e1b19356f64acc76c981f3a65c66e33a9874877892a,amd64,linux,null,null,\u0026#34;sha256:6ade829cd166df9b2331da48e3e60342aef9f95e1e45cde8d20e6b01be7e6d9a\u0026#34;,6477096 1.18.0-alpine,sha256:70feed62d5204358ed500463c0953dce6c269a0ebeef147a107422a2c78799a9,arm,linux,v6,null,\u0026#34;sha256:b9e3228833e92f0688e0f87234e75965e62e47cfbb9ca8cc5fa19c2e7cd13f80\u0026#34;,2619936 1.18.0-alpine,sha256:70feed62d5204358ed500463c0953dce6c269a0ebeef147a107422a2c78799a9,arm,linux,v6,null,\u0026#34;sha256:a03f81873d278ad248976b107883f0452d33c6f907ebcdd832a6041f1d33118a\u0026#34;,6080562 1.18.0-alpine,sha256:2ba714ccbdc4c2a7b5a5673ebbc8f28e159cf2687a664d540dcb91d325934f32,arm64,linux,v8,null,\u0026#34;sha256:29e5d40040c18c692ed73df24511071725b74956ca1a61fe6056a651d86a13bd\u0026#34;,2724424 1.18.0-alpine,sha256:2ba714ccbdc4c2a7b5a5673ebbc8f28e159cf2687a664d540dcb91d325934f32,arm64,linux,v8,null,\u0026#34;sha256:806787fcd4f9e2f814506fb53e81b6fb33f9eea04e5b537b31fa5fb601a497ee\u0026#34;,6423816 1.18.0-alpine,sha256:6d6f19360150548bbb568ecd3e1affabbdce0fcc39156e70fbae8a0aa656541a,386,linux,null,null,\u0026#34;sha256:2826c1e79865da7e0da0a993a2a38db61c3911e05b5df617439a86d4deac90fb\u0026#34;,2808418 1.18.0-alpine,sha256:6d6f19360150548bbb568ecd3e1affabbdce0fcc39156e70fbae8a0aa656541a,386,linux,null,null,\u0026#34;sha256:f2ab0e3b0ff04d1695df322540631708c42b0a68925788de2290c9497e44fef3\u0026#34;,6845295 1.18.0-alpine,sha256:c0684c6ee14c7383e4ef1d458edf3535cd62b432eeba6b03ddf0d880633207da,ppc64le,linux,null,null,\u0026#34;sha256:9a8fdc5b698322331ee7eba7dd6f66f3a4e956554db22dd1e834d519415b4f8e\u0026#34;,2821843 1.18.0-alpine,sha256:c0684c6ee14c7383e4ef1d458edf3535cd62b432eeba6b03ddf0d880633207da,ppc64le,linux,null,null,\u0026#34;sha256:30a37aac8b54a38e14e378f5122186373cf233951783587517243e342728a828\u0026#34;,6746511 1.18.0-alpine,sha256:714439fec7e1f55c29b57552213e45c96bbfeefddea2b3b30d7568591966c914,s390x,linux,null,null,\u0026#34;sha256:7184c046fdf17da4c16ca482e5ede36e1f2d41ac8cea9c036e488fd149d6e8e7\u0026#34;,2582859 1.18.0-alpine,sha256:714439fec7e1f55c29b57552213e45c96bbfeefddea2b3b30d7568591966c914,s390x,linux,null,null,\u0026#34;sha256:214dff8a034aad01facf6cf63613ed78e9d23d9a6345f1dee2ad871d6f94b689\u0026#34;,6569410 各列的含义分别是，镜像tag, 镜像Digest, 镜像对应平台的Architecture, 镜像对应平台的OS, 镜像对应平台的变种（例如，ARM的v7, v8等）, 镜像对应平台的OS版本, 镜像组成层的Digest, 镜像组成层的大小。\n上面nginx镜像的示例数据，告诉我们镜像名nginx且tag为1.18.0-alpine的镜像包含了amd64-linux, arm-linux-v6, arm64-linux-v8, 386-linux, ppc64le-linux以及s390x-linux共5种Arch合计6个版本的镜像。且每个平台的对应镜像包含了两个层以及这两个层的大小。\n当我们有了成百数千甚至海量镜像的原始数据后，如何能快速且低成本的分析这些数据呢？\n在AWS上，我们可以利用数据湖相关的系列产品来实现低成本的交互式分析。\n在Docker镜像分析这个场景下，我已经获取到了待分析镜像的平台、层等数据。我将这些数据上传到Amazon S3作为数据湖的数据源。 接下来使用AWS Glue以S3中的数据创建Table并且从中提前数据的metadata。同时做数据分区，为接下来的查询做性能和成本优化。 打开Amazon Athena，根据业务需求通过SQL语句查询分析Docker镜像数据。 就是通过以上3个简单步骤，我就得到了一个无服务器架构的Docker镜像数据分析应用！整个应用完全是按量计费的，主要成本包括S3对象存储费用，和Athena费用（根据每次查询扫描数据的大小来计算）。\n使用该分析应用，我统计了Docker Hub官方镜像中包含层最多的10个镜像(分平台统计)， 最后，得力于AWS Infra as Code的强大能力，整个应用也是通过代码管理的且开源的，有兴趣的读者也可以部署自己的分析应用。\n","link":"https://kane.mx/posts/2020/serverless-docker-images-analytics/","section":"posts","tags":["云计算","AWS","Big Data","Data Lakes","Analytics","AWS Athena","Cloud Native","docker"],"title":"无服务器架构的Docker镜像数据分析应用"},{"body":"Recently I had a requirement to stats the size of some Docker images. It would be waste if pulling them all firstly then calculating the size of each image. Also you know the docker image consists of some Docker layers that probably are shared by other images. It's hard to get the disk usage if only sum the size of each image.\nIs there any way to get the size of Docker image without pulling it?\nIt's definitely Yes. The docker images are hosted by Docker Registry, which is defined by a public specification. The latest V2 of Registry has API to fetch the manifest of an image that contains the size of every layer. Looks like it's very cool. Utilitying the manifest API of image will satisfie my requirement!\nOne more thing you should note, the v2 of Docker registry still is compatible with schema specification V1. You have to properly handle with the mixed responses of manifest when you query the manifest of an image.\nI created a simple shell script gracefully handling either v1 or v2 response of the image manifest, which can calculate the total layers size of a Docker image with specific tag, or the size of all tags of a Docker image.\nAbove script was inspired by this post. Hope you enjoy it.\n","link":"https://kane.mx/posts/2020/get-docker-image-size-without-pulling-image/","section":"posts","tags":["docker","Tip"],"title":"Get the size of Docker image without pulling image"},{"body":"","link":"https://kane.mx/tags/oh-my-zsh/","section":"tags","tags":null,"title":"oh-my-zsh"},{"body":"Z shell搭配oh-my-zsh自定义配置已成为众多Linux/Macosx用户的标准terminal配置。\n最近遇到在zsh中执行任意命令都变得特别慢(哪怕简单执行ls也要花费肉眼可见的1，2秒钟)，这里记录下如何排查Z shell下启用oh-my-zsh的性能问题。\n性能问题症状 突然某天起在终端中执行任意命令，都至少要花费1，2秒（肉眼计数），该命令才会完成执行并退出到终端开始接受新的输入。\n我当前主要使用的终端是iTerm2，执行命令后，在终端Tab的title bar上能显式的看到git命令也被执行了。\n尝试了其他的shell，比如bash，是没有这个问题。基本断定问题同zsh相关。更多问题描述乃至动画截屏，可以参见这个issue。\nzsh + oh-my-zsh 性能问题分析 oh-my-zsh其实就是提供zsh的定制化配置，主要包括Theme主题和各种软件的插件。\noh-my-zsh 插件 通常oh-my-zsh中内置或三方社区提供的插件是导致性能降低甚至互相冲突的主要原因。排查思路也很简单，通过逐个禁用已加载的插件来测试是否可以解决问题。\n用文本编辑器打开当前用户的~/.zshrc配置，找到plugins开头的配置行，例如，\n1plugins=( 2 git 3 osx 4## gradle 5 brew 6## command-not-found 7 github 8# gnu-utils 9## mvn 10 python 11 pip 12# screen 13 vi-mode 14 docker 15## docker-compose 16 node 17## spring 18 mosh 19# httpie 20## sudo 21 tmux 22## kubectl 23## helm 24 golang 25 history 26 history-substring-search 27 zsh-autosuggestions 28 zsh-syntax-highlighting 29) 通过行首添加#来禁用oh-my-zsh插件，启动新的终端窗口或tab来验证是否该插件是引起问题的根源。\n在我的配置中，出现过因为启用过多插件，导致新建终端需要10来秒钟。但因为创建终端不是一个高频的需求，这个性能通常来说还是可以忍受。\noh-my-zsh 主题 在我的这个问题中，即使将所有插件都禁用了，命令执行后退出速度还是没有改善，git命令仍然有被执行。这时我尝试更换不同oh-my-zsh内置主题来排查问题。但是使用了包括默认主题robbyrussell，极简主题ys在内的多个主题都无法解决该问题。\n最后直接禁止oh-my-zsh使用主题，问题没有了！\n然而oh-my-zsh主题是对zsh的极大增强，改善了默认的用户体验，没有主题扩展使用起来会非常不习惯。\n小结 最终试用了另一个社区维护的知名zsh主题Pure，性能问题得到了解决\u0026#x270c;\u0026#xfe0f; 同时也满足了主题对zsh输入输出用户体验的增强 \u0026#x1f60a;\n希望这里分享的oh-my-zsh性能的调优思路，可以帮助到有类似需要的各位。\n将来社区对这个问题如有进一步的反馈，将会做更新。\n","link":"https://kane.mx/posts/2020/zsh-performance-tuning/","section":"posts","tags":["zsh","oh-my-zsh","performance-tuning","trobule-shooting"],"title":"oh-my-zsh性能调优思路"},{"body":"","link":"https://kane.mx/tags/performance-tuning/","section":"tags","tags":null,"title":"performance-tuning"},{"body":"","link":"https://kane.mx/tags/trobule-shooting/","section":"tags","tags":null,"title":"trobule-shooting"},{"body":"","link":"https://kane.mx/tags/zsh/","section":"tags","tags":null,"title":"zsh"},{"body":"","link":"https://kane.mx/tags/codecommit/","section":"tags","tags":null,"title":"CodeCommit"},{"body":"Github/Gitlab已经成为众多开发者非常熟悉的代码协作平台，通过他们参与开源项目或实施企业内部项目协作。\nAWS也提供了托管的、基于Git、安全且高可用的代码服务CodeCommit。CodeCommit主要针对企业用户场景，所以他并没有社交功能以及代码仓库fork功能，是否CodeCommit就无法实现Github基于Pull Request的协同工作模式呢？\n答案是，CodeCommit完全可以实现基于Pull Request的代码协作。由于Git的分布式代码管理特性，首先fork上游项目仓库，将修改后的代码提交到fork仓库，通过Pull Request申请修改请求合并。Github将这套协作流程推广开来并被开源项目广泛采用。其实还有另外的Git仓库协同方式来完成多人的协作开发，例如Gerrit Code Review。目前Android、Eclipse Foundation下面的各种项目都在使用Gerrit作为协同开发工具。Gerrit通过控制同一个代码仓库中不同角色的用户可提交代码分支的权限来实现代码贡献、Review、持续集成以及协同开发的。\nCodeCommit作为AWS托管的服务，同IAM认证和授权管理做了很好的集成。完全可以通过IAM Policy的设置，为同一个代码仓库中不同用户角色设置不同的权限。使用类似Gerrit的权限控制思路，\n任意代码仓库协作者可以提交代码到特定含义的分支，例如，features/*, bugs/*。可以允许多人协同工作在某一特定分支上。协作者同时可以创建新的Pull Request请求合并代码到主分支，例如master或者mainline。 代码仓库Master/Owner有权限合并Pull Request。 拒绝任何人直接推送代码到仓库主分支，包括仓库Owner/Admin。 监听仓库Pull Request创建和PR源分支更新事件，自动触发该PR对应分支的automation build，编译、测试等通过后，自动为PR的通过投票+1。反之若失败，则取消投票。 为代码仓库设置PR Review规则，至少需要收到PR automation build和仓库Master/Owner合计两票通过才允许合并代码。 监听代码仓库主分支，任意新提交将触发自动化发布Build。将最新变更在整个系统上做集成。 是不是很棒！完全做到了Github、Github Pull Request、Github Action/Travis CI整套devops协同开发的流程。\n协作流程如下图， 同时，以上整套基于CodeCommit代码管理的devops工作流程可以利用CloudFormation实现AWS资源编排，将Devops依赖的Infra使用代码来做管理！这样的好处是，企业内部即使有数百数千甚至更多代码仓库都可以统一管理，新仓库的申请也可以通过Infra代码的PR，在通过审批合并后自动从AWS provisioning创建出符合企业管理要求的安全代码仓库。很酷吧\u0026#x1f606;\n这里有一套完整的创建以上工作流的演示，有兴趣的读者可以在自己的账户内体验。整套方案完全使用的是AWS托管服务，仅按实际使用量(如使用CodeBuild编译了代码)计费。\n","link":"https://kane.mx/posts/2020/codecommit-devops-model/","section":"posts","tags":["云计算","AWS","Devops","CodeCommit","Git"],"title":"基于CodeCommit代码管理的无服务器架构Devops"},{"body":"","link":"https://kane.mx/tags/aws-api-gateway/","section":"tags","tags":null,"title":"AWS API Gateway"},{"body":"AWS在3月12日正式发布了新一代的API网关 -- HTTP APIs。AWS发布的第一代API Gateway服务已经快5年了，通过这些年来大规模服务客户的心得以及客户反馈，由此重新构建了更快（相比第一代网关60%的延迟减少）、更便宜（至少节省71%的费用）、更易用的第二代网关服务。\n除了性能、费用、易用性的大幅度改进之外，在HTTP APIs发布博客中着重介绍了以下新特性，\nHTTP APIs网关可同私有VPC内的负载均衡(ALB/NLB)，服务发现(Cloup Map)集成。意味着可将目前最流行且普遍应用的容器服务作为API后端 可以将自定义域名的API路径混合映射到第一代的REST APIs和最新的HTTP APIs 请求限流的改进。支持对不同stage以及请求路由分别设置不同的限流 Stage变量。可以将Stage变量传递给API网关后端的服务。同时支持路由在不同的stage动态集成不同的后端Lambda函数 Lambda集成时使用Payload version 2.0。Version 2.0格式提供了更多的灵活性及简化了数据格式 支持导入 Swagger / OpenAPI 配置文件 如果对HTTP APIs感兴趣，可以尝试在自己的账户内部署这个示例。这个示例演示了如何按需使用AWS Batch服务进行批量任务计算，同时将任务提交和查询状态通过HTTP接口提供出来。该示例支持部署时选用不同的AWS服务（ALB、REST APIs或HTTP APIs）来提供这些API接口访问。整个示例都是基于无服务器架构实现的，不进行批量计算是不产生任何费用的哦\u0026#x1f604;。\n","link":"https://kane.mx/posts/2020/new-http-apis-of-api-gateway/","section":"posts","tags":["云计算","FaaS","AWS","AWS API Gateway","Serverless Computing"],"title":"AWS发布更快、更便宜、更易用的HTTP APIs"},{"body":"","link":"https://kane.mx/tags/faas/","section":"tags","tags":null,"title":"FaaS"},{"body":"","link":"https://kane.mx/tags/serverless-computing/","section":"tags","tags":null,"title":"Serverless Computing"},{"body":"在re:Invent 2019之前，AWS Toolkit发布了Cloud Debugging beta功能。该功能支持在IntelliJ IDEs(IntelliJ, PyCharm, Webstorm, 以及 Rider)中远程调试 ECS Fargate 容器中执行的应用程序。\n\u0008对ECS Fargate demo启用了远程调试并调试成功后，这里记录一下该功能的使用体验并且分享体验过程中掉进去过的一些坑。\n试用体验 首先，该功能不适用于生产环境。因为对ECS Fargate类型的Service启用Cloud Debugging功能会将原始的ECS Services收缩为0个task副本，同时创建一个新的Service并启用新的Task Definition，新的Task Definition中会加入Cloud Debug Sidecar容器来辅助实现远程调试。整个过程会对生产环境造成变更。 如果ECS集群是通过CI/CD持续部署，并且是多人协同使用的环境，该功能也不适用。因为，对某些容器服务启用Cloud Debugging将导致他人的持续部署失败或不生效。 启用Cloud Debugging操作比较麻烦，且启用状态下无法更新ECS中部署的版本。需要先停用Cloud Debugging，部署新版本代码，然后再次启用Cloud Debugging才能调试新代码。尽可能的不要依赖Cloud Debugging来调试程序，花功能做好单元测试，集成测试以及E2E测试来避免调试云端环境。 试用经验 按照官方文档启用Cloud Debugging后，创建Cloud Debugging Launch Configuration并执行调试，遇到**Retrieve execution role finished exceptionally**错误。错误的原因是，文档中没有提到Cloud Debug Sidecar需要logs:CreateLogStream权限创建CloudWatch Logs Stream。解决方案是，为ECS Task Execution Role添加logs:CreateLogStream权限。 在AWS Toolkit Jetbrains当前的版本1.9-193不支持启用了AppMesh或X-Ray的Task。解决方案是，对需要启用Cloud Debugging的Task暂时禁用App Mesh和X-Ray。 Cloud Debugging是一个不错的开发工具尝试思路，帮助开发者更好的做出Cloud Native应用。但是该项目仍然是一个早期项目，有许多问题需要修复和改进。\n","link":"https://kane.mx/posts/2019/aws-cloud-debugging/","section":"posts","tags":["AWS","AWS Toolkit","AWS ECS","AWS Fargate","IntelliJ IDEs"],"title":"AWS Cloud Debugging初探"},{"body":"","link":"https://kane.mx/tags/aws-ecs/","section":"tags","tags":null,"title":"AWS ECS"},{"body":"","link":"https://kane.mx/tags/aws-fargate/","section":"tags","tags":null,"title":"AWS Fargate"},{"body":"","link":"https://kane.mx/tags/aws-toolkit/","section":"tags","tags":null,"title":"AWS Toolkit"},{"body":"","link":"https://kane.mx/tags/intellij-ides/","section":"tags","tags":null,"title":"IntelliJ IDEs"},{"body":"AWS Batch是一个全托管的批处理调度服务，它可为用户管理所有基础设施，从而避免了预置、管理、监控和扩展批处理计算作业所带来的复杂性。当然AWS Batch已与 AWS 平台原生集成，让用户能够利用 AWS 的扩展、联网和访问管理功能。让用户轻松运行能够安全地从 AWS 数据存储（如 Amazon S3 和 Amazon DynamoDB）中检索数据并向其中写入数据的作业。AWS Batch可根据所提交的批处理作业的数量和资源要求预置计算资源并优化作业分配。能够将计算资源动态扩展至运行批处理作业所需的任何数量，从而不必受固定容量集群的限制。AWS Batch还可以利用 Spot 实例，从而进一步降低运行批处理作业产生的费用。\nAWS Batch服务本身是免费的，仅收取实际使用的 EC2 实例费用。\n我创建了一个Batch App demo来演示AWS Batch相关使用方法。该示例通过一个Restful API接口来提交批处理任务，Restful API通过ALB + Lambda函数来暴露服务。Lambda函数被触发后，将新任务请求发送到SQS服务。随后另一个Lambda将消费这个SQS，并将调用AWS Batch API来提交新的批处理任务，同时将任务信息储存到DynamoDB中。同时Demo创建了Batch任务会使用到的Docker Image，并且预先提交到ECR中。同时Batch任务定义了使用的EC2实例类型(c5系列实例，且包括Spot和按需两种计费方式的实例，且优先使用Spot实例)，实例默认伸缩数量为0(没有可执行任务时将中止实例)。并且提交的任务分为计算任务和统计归并任务，统计归并任务会依赖所以计算任务执行完毕才开始执行。最后通过另一Restful接口查询计算任务的最终结果，该接口同样使用ALB + Lambda函数来实现。\nEnjoy this Batch App demo orchestrated by AWS CDK.\n","link":"https://kane.mx/posts/2019/aws-batch/","section":"posts","tags":["AWS","Batch","Infrastructure as Code"],"title":"AWS Batch简介"},{"body":"","link":"https://kane.mx/tags/batch/","section":"tags","tags":null,"title":"Batch"},{"body":"在拥有域名后，通常希望创建一些自有域名下的邮箱来收取不同用途的邮件，同时不希望为这部分功能付费\u0026#x1f603;。使用免费的企业邮箱(比如网易企业邮箱、阿里云企业邮箱)是一种选择。这时就需要配置邮件地址和邮件客户端来收取邮件，如果有多个邮箱地址，配置会特别麻烦。有时，这些企业邮箱的收件服务会莫名其妙的丢失一些邮件。\n这种场景下，邮件转发服务是一种非常好的解决方案。无需搭建邮件服务器或申请免费邮件服务，只需要配置域名的邮件MX解析到转发邮件收发件服务，同时使用DNS TXT record配置转发规则，即可将所以发送的自有域名下的邮件转发到已有的邮箱地址！\u0026#x1f192;\n特别安利Forward Email服务，一个免费而且是开源的邮件转发服务。\n如上面介绍的，只需要为域名mydomain.com创建如下3条DNS解析记录，\n名称 TTL 记录类型 优先级 记录的内容 @ 或者 空白 3600 MX 10 mx1.forwardemail.net @ 或者 空白 3600 MX 20 mx2.forwardemail.net @ 或者 空白 3600 TXT 20 forward-email=niftylettuce@gmail.com 所有发往@mydomain.com的邮件将被转发到邮箱niftylettuce@gmail.com。\u0026#x270c;\u0026#xfe0f;\n更多配置选项请查看文档。\n","link":"https://kane.mx/posts/2019/email-forwarding/","section":"posts","tags":["邮件转发","技巧"],"title":"免费邮件转发服务"},{"body":"","link":"https://kane.mx/tags/%E6%8A%80%E5%B7%A7/","section":"tags","tags":null,"title":"技巧"},{"body":"","link":"https://kane.mx/tags/%E9%82%AE%E4%BB%B6%E8%BD%AC%E5%8F%91/","section":"tags","tags":null,"title":"邮件转发"},{"body":"","link":"https://kane.mx/tags/edas/","section":"tags","tags":null,"title":"EDAS"},{"body":"","link":"https://kane.mx/tags/microservice/","section":"tags","tags":null,"title":"Microservice"},{"body":"","link":"https://kane.mx/tags/migration/","section":"tags","tags":null,"title":"Migration"},{"body":"近期实践了将阿里云EDAS微服务应用迁移到AWS上，在这里分享一下迁移方案。\n该方案涉及了以下三个方面，\n微服务应用集群。在AWS上采用的ECS集群部署微服务应用，通过Cloudmap实现服务注册发现，App Mesh实现服务间流量控制。更加详尽的微服务迁移要点和对应方案，详见下面的deck。 Devops pipeline。使用托管的CodePipeline，CodeBuild实现CI/CD。 Infra as Code。利用AWS强大的Infra as Code能力，将云上的基础设施和微服务应用编排通过CDK代码实现。 下面是迁移方案的deck。完整且可部署的PoC代码，点这里。\n","link":"https://kane.mx/posts/2019/aliyun-edas-migration-in-action/","section":"posts","tags":["AWS","EDAS","Migration","Microservice","Infrastructure as Code"],"title":"实战Aliyun EDAS应用迁移AWS"},{"body":"","link":"https://kane.mx/tags/analysis/","section":"tags","tags":null,"title":"Analysis"},{"body":"托管的RDS数据库已经是云计算服务中非常成熟的服务，绝大部分的云计算用户会采用RDS服务来提升数据库服务的可用性同时减少数据库的各类运维事务。\nAWS RDS服务支持开启和查询各类的数据库日志，包括常规日志、慢日志、错误日志和审计日志。但RDS服务默认提供的日志查看工具仅仅类似文本查看器，无法针对日志数据做统计和查看历史滚动的存档。\n本文将介绍如何使用AWS上云原生的服务搭建无服务架构的实时日志分析报表系统。该系统的实现思路来自于AWS中国的一篇博客，该文介绍了使用 CloudWatch Logs，Kinesis Firehose，Athena 和 Quicksight 实现实时分析 Amazon Aurora 数据库审计日志。\n这里提供了一个完整的AWS CDK应用实现了博客中介绍的服务搭建思路，RDS审计日志通过 CloudWatch Log -\u0026gt; Kinesis Firehose -\u0026gt; S3 这样一个数据管道被过滤，转换，压缩最终保存到S3上，可被无服务分析服务Athena使用。同时创建了一个Lambda函数模拟应用访问数据库，它周期性的连接上应用中创建的RDS Aurora数据库并执行查询或变更Sql。在整个应用在被部署成功后数分钟，及可通过Athena数据表查询统计Aurora审计日志。Enjoy it\u0026#x1f606;\u0026#x1f606;\n","link":"https://kane.mx/posts/2019/rds-log-analysis/","section":"posts","tags":["AWS","Serverless","Analysis"],"title":"AWS RDS数据库日志分析及展示"},{"body":"","link":"https://kane.mx/tags/aws-vpn/","section":"tags","tags":null,"title":"AWS VPN"},{"body":"","link":"https://kane.mx/tags/openswan/","section":"tags","tags":null,"title":"Openswan"},{"body":"","link":"https://kane.mx/tags/site-to-site-vpn/","section":"tags","tags":null,"title":"Site-to-Site VPN"},{"body":"业务上云之后，经常也有需求将多云、数据中心或办公室的私有网络同云端的私有网络建立连接。AWS Site-to-Site VPN正是AWS提供的托管VPN服务，我们可以在另一端的私有网络通过Openswan同AWS VPC网络建立基于IPSec协议的安全连接。\n下面是配置的详细步骤，\n如果是创建数据中心或办公室的连接，数据中心或办公室需要有公网IP。如果是在其他公有云上，需要创建带公网IP的EC2，或使用EIP。 如果使用AWS EC2配置Openswan，需要禁用 EC2 的 Source/Destination Check。 在AWS上创建Virtual Private Gateway 和 Customer Gateway(指定对端的公网IP作为静态路由)。 在AWS上创建Site-to-Site VPN连接，使用第一步和第二步创建的Virtual Private Gateway和Customer Gateway。 在对端机器上安装openswan。 1sudo yum install openswan 编辑/etc/sysctl.conf文件，确保有以下配置， 1net.ipv4.ip_forward = 1 2net.ipv4.conf.default.rp_filter = 0 3net.ipv4.conf.default.accept_source_route = 0 重新加载sysctl配置并重启network服务。 1sudo sysctl -p 2sudo service network restart 编辑/etc/ipsec.conf确保include /etc/ipsec.d/*.conf没有被注释。 创建/etc/ipsec.d/aws.conf文件，内容拷贝来自第三步创建的连接Openswan建议配置。 创建/etc/ipsec.d/aws.secrets文件，内容拷贝来自第三步创建的连接Openswan配置。 启动ipsec服务。 1# Start the ipsec service. 2sudo service ipsec start 3 4# Check the logs. 5sudo service ipsec status 6sudo ipsec auto --status 以上配置在Amazon Linux, Centos 6.9上验证通过。但是在Amazon Linux 2、Centos 7等较新的Linux发行版本上，启动ipsec服务遇到如下错误， 1Starting Internet Key Exchange (IKE) Protocol Daemon for IPsec... 2ERROR: /etc/ipsec.d/aws.conf: 12: keyword auth, invalid value: esp 解决方法是，从 AWS Site-to-Site VPN 下载的 Openswan 配置中删掉不支持的配置行auth=esp。\n","link":"https://kane.mx/posts/2019/using-openswan-connect-aws-vpn/","section":"posts","tags":["AWS","AWS VPN","Site-to-Site VPN","Openswan"],"title":"使用Openswan连接AWS VPC"},{"body":"Infrastructure as Code(架构即代码)一直是衡量公有云是否支持良好运维能力的重要指标。作为云计算领先的AWS，通过服务CloudFormation来编排云环境中的基础设施资源。不过由于CloudFormation是使用YAML/JSON编写的声明式语言，不善于处理逻辑，编写繁琐且不利于调试排错，对于新上手的Devops工程师来说也有不小的学习曲线。三方开源的工具Terraform同样没有很好解决CloudFormation存在的这些问题。\nAWS CDK的出现解决了目前CloudFormation存在的绝大部分问题，极大的提升基础设施编排代码的开发和维护效率。\nAWS CDK是一种开源软件开发框架，开发者可以用自己使用熟悉的编程语言模拟和预置云应用程序资源，目前支持Typescript/Javascript、Python、Java和.Net。AWS CDK将云中资源抽象对象化，通过极其简单语法描述资源对象或设置其各种属性(重载CDK默认属性设置)来创建或更新云中资源。\n例如，下面简单几行将创建一个新的名为Gameday的VPC网络，并且跨了两个可用区分别创建了公有子网和私有子网。\n1 this.vpc = new ec2.Vpc(this, \u0026#39;Gameday\u0026#39;, { 2 cidr: \u0026#39;10.0.0.0/16\u0026#39;, 3 maxAzs: 2, 4 subnetConfiguration: [ 5 { 6 cidrMask: 24, 7 name: \u0026#39;Public\u0026#39;, 8 subnetType: SubnetType.PUBLIC 9 }, 10 { 11 cidrMask: 24, 12 name: \u0026#39;Private\u0026#39;, 13 subnetType: SubnetType.PRIVATE 14 } 15 ] 16 }); 我创建了两个示例项目使用了AWS CDK快速创建应用环境且部署应用，\nGameday 为一个ECS上运行的Web应用编排了完整的环境，包括VPC、RDS Aurora、NAT Gateway、安全组、ECS集群、ECS Task定义、ALB负载均衡。 Serverlss Domain Redirect 基于AWS搭建了无服务器架构的域名重定向服务。基于不同的配置参数，提供了基于 S3 + CloudFront + Route 53 或是 Lambda + API Gateway + Route 53 两种解决方案。 总体的来说，AWS CDK是一个非常值得采用的云中资源编排和管理方式，高效的管理了AWS上的资源。\n由于CDK还在相对早期，成熟度还不是那么完美。我在使用中发现下面一些值得注意的问题。\nCDK程序最终还是创建了CloudFormation配置，提交到CloudFormation完成资源变更。核心的用户体验，需要依赖CloudFormation的能力。CloudFormation的创建或回退超时过长，时常影响资源部署体验。另外，清理资源的时候，遇到部分资源无法清理且缺少明确提示。比如Aurora集群。 CDK类库缺少配置校验。这类错误只能通过CloudFormation部署后，才会被资源方发现并返回错误。导致整个创建的堆栈回退，调试大型的部署栈将花费比较长的时间。建议将整个部署拆分为多个小的堆栈，减小每次部署时间，方便调试。 文档还比较简陋。缺少较为深入的示例。增加了开发人员的学习曲线。 新版本向后兼容性不够好，时常新版本有break changes。在1.0GA之后发布的版本break changes相对减少，但仍然有出现。 ","link":"https://kane.mx/posts/2019/aws-cdk/","section":"posts","tags":["AWS","AWS CDK","Infrastructure as Code"],"title":"AWS CDK简介"},{"body":"","link":"https://kane.mx/tags/aws-s3/","section":"tags","tags":null,"title":"AWS S3"},{"body":"业务时常有需求将某个域名(A)的访问重定向到其他域名(B)，即使实现这样一个很简单的需求通常也需要部署Web服务器（例如Nginx），为域名A的请求返回302响应，并提供新的Location地址重定向到域名B。现在基于云计算服务，我们可以使用一些托管服务来实现同样的事情，无需管理服务器和维护应用，同时做到最低成本实现该需求。\n接下来将介绍如何利用AWS上的服务实现该需求。\n使用AWS S3和AWS CloudFront实现域名重定向 创建一个新的S3 bucket，例如 redirect.domain.com 配置新bucket属性，开启静态网站托管，同时配置为重定向请求到期望的域名 redirected-host.domain.com 创建新的CloudFront分发，设置第一步创建的S3 bucket作为自定义源站(不可以配置源站为S3 bucket)。并且配置使用自定义域名 redirect.domain.com。注意，配置自定义CNames需要提供域名对应的SSL证书，可以使用AWS Certificate Manager创建免费的SSL/TLS证书 在域名domain.com解析服务商为域名redirect.domain.com创建新的解析记录 使用AWS Lambda和API Gateway实现域名重定向 创建一个Lambda函数来返回302请求或者HTML页面，在页面中通过Javascript实现重定向页面 为该Lambda函数创建API Gateway触发器 为该API Gateway接口创建自定义域名 在域名domain.com解析服务商为域名redirect.domain.com创建新的解析记录 我创建了一个基于AWS CDK的Github项目，利用AWS Infrastructure as Code的强大能力一键部署以上两种无服务器环境，有需要的可以作为实现参考。\n","link":"https://kane.mx/posts/effective-cloud-computing/serverless-domain-redirect/","section":"posts","tags":["云计算","AWS","AWS S3","AWS Lambda","AWS CDK"],"title":"无服务器架构的域名重定向服务"},{"body":"","link":"https://kane.mx/tags/amazon-alexa/","section":"tags","tags":null,"title":"Amazon Alexa"},{"body":"近期需要做一些Alexa上的开发，在手机上安装了Amazon Alexa，一直得到下面这样的错误提示而无法登录。\nConnection Timed Out.\n先后尝试了翻墙、更改语言等方法仍然不可登录。并且在网络上也没有找到可用的方案，决定抓包研究下为什么我的账号始终无法登录。\n通过抓取Alexa登录时发送的数据包，发现他访问了amazon.cn等数个cn域名下的一系列服务，看来这些服务中部分已无法提供正常服务，导致登录一直出现上面的错误。\nAmazon Alexa作为一个服务全球用户的app，应该是判断手机用户在大陆地区后使用了配置在大陆地区的这些服务。\n临时解决方案的思路就是设置系统或app，让他无法获取到手机真实所在的地理位置，那么Alexa app会使用默认的全球服务器来请求数据。\n以下是临时解决方案的步骤，\n从Play市场安装Alexa app。如果已安装清空app数据。 禁用app Location权限(默认就是禁用的)。 更改系统语言为英文，设置时区为任意美国时区。 拔掉SIM卡，或者禁用所有SIM卡。 打开Alexa app，使用已有或新注册Amazon账号即可登录。\n","link":"https://kane.mx/posts/2019/alexa-login-issue/","section":"posts","tags":["AWS","Amazon Alexa","Troubleshoot"],"title":"Amazon Alexa Android版本国内登录问题"},{"body":"","link":"https://kane.mx/tags/troubleshoot/","section":"tags","tags":null,"title":"troubleshoot"},{"body":"个人电脑数据备份一直都是一个强烈的需求。使用网盘等云存储产品可以部分满足数据的备份需求，仍然无法做到使用便利性和很高的数据安全保障。\nMacOSX上系统内置了备份解决方案 -- 时间机器(Time Machine)。Time Machine支持AirPort Time Capsule，NAS存储或者外置的存储设备。然而这些备份方案都依赖于硬件设备，有容量限制或不便于移动。在云计算已经大行其道的今天，有没有使用云计算厂商对象存储作为目标存储的备份方案，为MacOSX数据备份提供无限容量、高度的安全性的云方案？经过一番搜索，既找到了开源免费的工具Restic，也有付费软件Arq。无论Restic还是Arq提供的是独立的三方工具来实现备份到云端存储或从云端恢复，有没有将Time Machine和云端储存结合在一起的方案呢？\nTimeMchine支持将外置存储作为备份设备，这里介绍的方法就是将远端云计算厂商的对象存储挂载为本地设备，设置Time Machine将它作为目标备份设备，实现将备份放到云厂商的对象储存。\n接下来我将一步步演示如何将AWS S3对象存储的bucket作为Time Machine备份的设备。\n此方法适用于将任意云厂商的对象存储作为备份存储，只要该厂商的对象存储支持被MacOSX挂载为本地磁盘。\n有很多成熟的方案将AWS S3挂载为MacOSX磁盘，例如S3fs、Goofys。本文推荐的方案是Juicefs，Juicefs为对象存储的元数据提供了缓存，能极大的优化对挂载磁盘的list，get等操作。\n首先按照Juicefs 文档安装必要的依赖和Juicefs客户端。接下来在Juicefs注册完成后，创建一个文件系统保存备份数据。注意：这里的bucket名称需要同随后创建或已有的bucket名称一致。 创建新的AWS S3 bucket(或者使用已有的bucket)，同时为该bucket专门创建用于Juicefs客户端使用的IAM用户。强烈建议不要使用云帐号的access token用于挂载，最佳实践是为不同的用途创建单独的IAM用户。更多IAM用户实践，请参考文章IAM最佳实践。下面是使用AWS CLI创建新S3 bucket及IAM用户的参考命令， 1# 创建S3 bucket 2aws s3 mb s3://my-bucket-for-mac-backup 3 4# 创建IAM用户 5aws iam create-user --user-name juicefs 6# 为juicefs用户授予读写备份S3 bucket权限 7echo \u0026#39;{ 8 \u0026#34;UserName\u0026#34;: \u0026#34;juicefs\u0026#34;, 9 \u0026#34;PolicyName\u0026#34;: \u0026#34;mac-backup-bucket-all-permissions\u0026#34;, 10 \u0026#34;PolicyDocument\u0026#34;: \u0026#34;{ \\\u0026#34;Version\\\u0026#34;: \\\u0026#34;2012-10-17\\\u0026#34;, \\\u0026#34;Statement\\\u0026#34;: [ { \\\u0026#34;Effect\\\u0026#34;: \\\u0026#34;Allow\\\u0026#34;, \\\u0026#34;Action\\\u0026#34;: \\\u0026#34;s3:*\\\u0026#34;, \\\u0026#34;Resource\\\u0026#34;: [ \\\u0026#34;arn:aws-cn:s3:::my-bucket-for-mac-backup/*\\\u0026#34;, \\\u0026#34;arn:aws-cn:s3:::my-bucket-for-mac-backup\\\u0026#34; ] } ] }\u0026#34; 11 1 { 12}\u0026#39; \u0026gt; policy.json 13aws iam put-user-policy --cli-input-json file://policy.json 14# 为juicefs用户创建access token用于juicefs客户端挂载bucket 15aws iam create-access-key --user-name juicefs 16{ 17 \u0026#34;AccessKey\u0026#34;: { 18 \u0026#34;UserName\u0026#34;: \u0026#34;juicefs\u0026#34;, 19 \u0026#34;AccessKeyId\u0026#34;: \u0026#34;\u0026lt;key id\u0026gt;\u0026#34;, 20 \u0026#34;Status\u0026#34;: \u0026#34;Active\u0026#34;, 21 \u0026#34;SecretAccessKey\u0026#34;: \u0026#34;\u0026lt;access key\u0026gt;\u0026#34;, 22 \u0026#34;CreateDate\u0026#34;: \u0026#34;2019-06-30T15:25:41Z\u0026#34; 23 } 24} 按照Juicefs文档挂载挂载S3 bucket。 进入挂载后的目录(如/jfs)，创建Sparse Image用于Time Machine写入备份。 1cd /jfs 2hdiutil create -size 600g -type SPARSEBUNDLE -fs \u0026#34;HFS+J\u0026#34; Time Machine.sparsebundle 上面命令将创建一个名为TimeMachine600 GB大小的镜像(初始仅占用数百MB，实际文件磁盘空间只有当文件写入后才会占用)。根据你的需要随意调整镜像大小，通常建议设置为Mac磁盘大小的两倍。 不熟悉命令行的用户，也可以使用磁盘工具(Disk Utility)创建。 通过Finder挂载之前创建的Sparse Image 现在是魔术步骤，告诉Time Machine使用之前创建的虚拟设备作为备份磁盘。 1sudo tmutil setdestination /Volumes/Time MachineDisk 由于S3 Bucket用于备份数据，建议开启S3 智能分层存储或者IA储存，降低花费。同时可以启用S3 KMS加密云端保存的数据，提升数据安全性。\n","link":"https://kane.mx/posts/2019/using-s3-as-device-for-mac-time-machine-backup/","section":"posts","tags":["MacOSX","AWS","AWS S3","Tip"],"title":"使用AWS S3作为MacOSX时间机器(Time Machine)的备份存储"},{"body":"","link":"https://kane.mx/tags/dingtalk/","section":"tags","tags":null,"title":"dingtalk"},{"body":"","link":"https://kane.mx/tags/spring/","section":"tags","tags":null,"title":"Spring"},{"body":"","link":"https://kane.mx/tags/spring-cloud-function/","section":"tags","tags":null,"title":"Spring Cloud Function"},{"body":"基于serverless框架的钉钉回调函数中介绍了serverless framework，一款支持跨云厂商/Serverless平台的部署工具。但是函数代码还是需要针对不同的serverless平台作对应的适配。而Spring Clound Function就是针对这种情况专门开发的跨serverless平台的框架，实现一套代码通过不同的打包实现跨serverless平台。Spring Clound Function目前支持AWS Lambda, Microsoft Azure Function以及Apache OpenWhisk。\n这里我们继续使用无函数版本的钉钉回掉函数来演示Spring Clound Function for AWS的使用。\n首先将spring cloud function for aws adapter添加到项目依赖，\n1implementation(\u0026#34;org.springframework.cloud:spring-cloud-function-adapter-aws:${springCloudFunctionVersion}\u0026#34;) 其次创建函数Handler，实现Spring Cloud Function跨函数计算实现抽象的SpringBootRequestHandler类，或者是继承自它的trigger类，例如SpringBootApiGatewayRequestHandler\n1import org.springframework.cloud.function.adapter.aws.SpringBootApiGatewayRequestHandler 2 3class Handler : SpringBootApiGatewayRequestHandler() 接下来创建Spring Boot应用程序，并将serverless实现函数注册为Spring Bean，函数的实现部分就是serverless函数具体做的业务逻辑。\n1@SpringBootApplication 2open class DingtalkCallbackApplication { 3 4 @Bean 5 open fun dingtalkCallback(): Function\u0026lt;Message\u0026lt;EncryptedEvent\u0026gt;, Map\u0026lt;String, String\u0026gt;\u0026gt; { 6 val callback = Callback() 7 return Function { 8 callback.handleRequest(it) 9 } 10 } 11} 12fun main(args: Array\u0026lt;String\u0026gt;) { 13 SpringApplication.run(DingtalkCallbackApplication::class.java, *args) 14} 最后将函数打包为fat jar（如果将依赖打包为lambda layer，可不用打包为fat jar）作为lambda的代码。\n函数的部署同其他的lambda函数没有任何区别，这个示例中沿用了之前的SAM/CloudFormation配置或者serverless framework部署配置。\n完整的可运行、部署代码请访问这个分支。\n总体来说，Spring Clound Function的实现原理并不复杂，定义统一的函数实现入口，通过不同serverless平台的adapter对接不同平台的API接口，做到编写一次函数实现，通过打包不同的adapter做到跨serverless平台运行。\n但个人认为现实中这样的场景并不多。并且serverless函数触发方式很多，例如AWS上的APIGateway、Kinesis、CloudWatch、IoT等服务，与这些服务对接或API调用其实也产生了耦合，并不能简单的迁移到三方的serverless平台去执行。同时，开发者需要引入spring/spring boot/spring cloud相关的依赖，增加了程序的复杂度，又延长了lambda函数clod start需要的时间。另外，开发者需要学习spring cloud function相关的知识，无形中增加了复杂度。总之使用spring cloud function作为函数计算框架收益并不高，整个项目给人感觉比较鸡肋。\n","link":"https://kane.mx/posts/effective-cloud-computing/spring-cloud-function-for-aws/","section":"posts","tags":["云计算","FaaS","函数计算","AWS","AWS Lambda","钉钉","dingtalk","Serverless Computing","Spring","Spring Cloud Function"],"title":"Spring Cloud Function -- 跨Serverless平台的函数计算框架"},{"body":"","link":"https://kane.mx/tags/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97/","section":"tags","tags":null,"title":"函数计算"},{"body":"","link":"https://kane.mx/tags/%E9%92%89%E9%92%89/","section":"tags","tags":null,"title":"钉钉"},{"body":"AWS是全球云计算领域的领跑者，它在计算、存储、网络等方面都做出了很多创新，同时也是其他云计算厂商学习及模仿的对象。\n阿里云是目前国内市场份额最大的云计算厂商，其份额超过了第二至五位厂商的总和，份额领先优势比AWS在全球还要显著，同时全球份额也超过IBM来到第四。\n本文将对AWS和阿里云核心服务做一个简要对比，以及这两家厂商发展方向的一些个人见解。\n云计算，其核心服务就是计算、存储及网络。这些基本能力的稳定性，功能完善性决定了云计算厂商能力的下限。\n除了上面提到的三大计算机核心组件能力，下面这些能力也是云计算中非常重要的组成部分，\n按量计费 资源编排（也就是平台作为代码） 云资源的认证及授权 API 基于上面列举的云计算核心服务和关键能力，我们来看看哪些方面是AWS的强项。\nAWS作为云计算的领军厂商，在计算、存储、网络这三大核心一直在不停的创新中，且被友商在不停的模仿。计算方面，AWS首先推出了Lambda无服务器计算引擎实现按量使用的全托管服务，生产可用的GPU实例(单虚机可配置最高64块GPU卡，而阿里云默认仅售卖2块GPU卡)，基于Nitro架构的EC2实例为客户送上了升性能降价的好事。\nS3作为AWS最早推出的云计算服务，仍然在不停的创新演化中。目前S3达到了11个9的持久性，为满足客户不同的存储需要，又推出了S3 Glacier、Glacier Deep Archive等存储方案。持续推出了Amazon Athena, Redshift, S3 select等服务及工具解决海量数据的大数据处理。\nAWS一直将PAYG(Pay-As-You-Go)的按量计费模型贯穿在各种服务中。无论是EC2(包括GPU实例)，ELB，NAT网关等等都提供小时级的按量计费。阿里云在这方面还有较多的改进空间，例如GPU实例最小售卖时长为一周，SLB首先按规格售卖，NAT网关按自然日计费。\nIAM为云上的资源提供了最细粒度的授权管理，AWS各个服务严格按最细粒度控制授权，满足企业的权限管理。在我使用过的数个阿里云服务中，多次遇到较新的服务IAM设计不周，权限粒度过大，甚至功能无法工作的情况下就上线发布了。\nAWS CloudFormation提供了云上资源编排管理，实现了资源的代码化，版本化(通常称为的Infrastrucure as Code)。将云端资源的管理运维提升到一个新的层次。\nAWS提供了三种方式管理云上资源，Web Console, CLI以及API。这三种方式，尽最大努力提供一致的功能。\nAWS同时是一个云计算的生态，各类三方云服务厂商通过Marketplace售卖各类SaaS，PaaS服务，形成一个云计算用户，三方服务Vendor，AWS三方共赢的局面。\n总得说来，AWS持续的在云计算核心服务和关键服务投入，不停的创新，保证了AWS整体服务的领先。\n接下来看看阿里云的强项。\n阿里云在提供基本的计算、存储、网络外，额外提供了很多SaaS服务，例如，Application Performance Monitor， Performance Testing Service, 日志服务，链路追踪服务，数据库管理服务等。这些服务显然同阿里云有更好的集成，对用户来说提供了开箱即用的解决方案。而这也是一把双刃剑，利用平台捆绑的优势抢占合作开发商的市场，长期来说利用平台垄断不利于基于阿里云的技术服务创业。\n总之，阿里云在云计算核心服务上同AWS比还有差距，但他在PaaS/SaaS服务上发展不错，更加容易提供全套基于阿里云的解决方案。由于阿里云在国内数据中心数量上的优势加上从万网收购的BGP资源，其服务在国内访问网络延迟会更低。\n最后，谈一个很有意思的话题，是否需要考虑云厂商的锁定。\nKubernetes事实上成为容器编排平台，首先考虑使用K8S及CNCF landscape下的项目作为应用运行环境，减少可能的迁移和学习成本。\n对不同用量的公司来说，考虑云厂商锁定的维度完全不一样。创业型公司或仍在快速发展业务中的中大型企业首先应该选择可靠性高，解决方案多，易学习的云厂商，尽可能利用云厂商的各种服务做到快速高效可靠的推进业务，将尽量多的精力、人力投入到业务相关的事情上。业务稳定的大型公司，可以使用多数据中心实现关键业务的高可用性，跨云完全不应该作为高可用的必要解决途径。另外，云厂商绝对会投入额外的人力，优先级支持他们的大客户，甚至为这类客户调整产品研发优先级或协同完成某些功能，这样绝对是个双赢的局面，Netflix和AWS的互相成就就是一个很好的例子。没有特别必要的原因，不要轻易投入精力将业务从服务已经很稳定的云厂商迁移到多云平台上，那样往往是白白耗费力气。\n下面是slide的最新完整版本，\n","link":"https://kane.mx/posts/2019/aws-vs-aliyun/","section":"posts","tags":["云计算","AWS","阿里云"],"title":"公有云对比"},{"body":"","link":"https://kane.mx/tags/%E9%98%BF%E9%87%8C%E4%BA%91/","section":"tags","tags":null,"title":"阿里云"},{"body":"Serverless Framework是一个开源命令行工具。他提供函数脚手架、流程自动化、最佳实践等帮助开发、部署跨云厂商的托管无服务器计算服务(官方已支持aws, Azure, GCP, IBM Cloud等各种厂商的无服务器计算)。同时支持使用插件来扩展各种功能，比如支持更多云厂商无服务器计算服务，例如阿里云的函数计算。\n这里使用基于函数计算的钉钉回调函数接口示例来演示如何使用Serverless Framework将一个无服务器函数部署到AWS Lambda。\n安装servereless后，可以通过serverless create命令创建函数脚手架工程，或者在已有工程的下创建serverless配置文件serverless.yml。\n接下来可以参考serverless aws reference配置你的aws lambda函数及需要的各种资源。如果已经有过使用AWS CloudFormation或者AWS SAM经验的，可以很快适应编写Serverless配置。Serverless的配置本质上是将CloudFormation/SAM相关的概念进行抽象，为各个云厂商的无服务器计算服务提供统一的工具、命令以及概念抽象。在部署aws lambda时，serverless配置会被转换为CloudFormation配置，通过AWS API进行创建或变更。\n对于Dingtalk Callback on AWS Lambda, serverless配置声明如下。其中指定了service的基本信息，全局的配置(如stage、region等)、云厂商provider(这里是aws)。函数的基本信息、权限、layer、触发器，自定义layer以及其他云厂商资源，比如Dingtalk callback这里用到的DynamoDB。完整的serverless配置查看这里。\n1service: 2 name: dingtalk-callback 3 4frameworkVersion: \u0026#34;\u0026gt;=1.0.0 \u0026lt;2.0.0\u0026#34; 5 6provider: 7 name: aws 8 runtime: java8 9 stage: ${opt:stage, \u0026#39;dev\u0026#39;} # Set the default stage used. Default is dev 10 region: ${opt:region, \u0026#39;ap-southeast-1\u0026#39;} # Overwrite the default region used. Default is ap-southeast-1 11 profile: ${opt:profile, \u0026#39;default\u0026#39;} # The default profile to use with this service 12 versionFunctions: true # Optional function versioning 13 endpointType: regional # Optional endpoint configuration for API Gateway REST API. Default is Edge. 14 15functions: 16 dingtalk-callback: 17 handler: com.github.zxkane.dingtalk.Callback::handleRequest # required, handler set in AWS Lambda 18 name: ${self:provider.stage}-dingtalk-callback # optional, Deployed Lambda name 19 memorySize: 384 # optional, in MB, default is 1024 20 timeout: 15 # optional, in seconds, default is 6 21 environment: # Function level environment variables 22 PARA_DD_TOKEN: DD_TOKEN 23 TABLE_NAME: {Ref: BPMTable} 24 package: 25 artifact: build/libs/dingtalk-callback-1.0.0-SNAPSHOT.jar 26 role: dingtalkCallbackIAMRole 27 layers: # An optional list Lambda Layers to use 28 - {Ref: DependenciesLambdaLayer} 29 events: # The Events that trigger this Function 30 - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function. Learn more in \u0026#34;events/apigateway\u0026#34; 31 path: dingtalk # Path for this endpoint 32 method: post # HTTP method for this endpoint 33 34layers: 35 dependencies: 36 path: build/deps 37 38resources: # CloudFormation template syntax 39 Resources: 40 dingtalkCallbackIAMRole: 41 Type: AWS::IAM::Role 42 Properties: 43 Policies: 44 - PolicyName: SSMPolicy 45 - PolicyName: DynamoDBPolicy 46 BPMTable: 47 Type: AWS::DynamoDB::Table 48 Properties: 49 TableName: bpm_raw_${self:service.name}_${self:provider.stage} 50 ProvisionedThroughput: 51 ReadCapacityUnits: 1 52 WriteCapacityUnits: 1 对于使用单一云厂商无服务器计算并且已经使用了类似sam cli实现持续集成、持续部署的用户，Serverless Framework并不能带来更多生产力的提升，在稳定性(封装云厂商的功能，增加复杂度很可能引入新的问题)或功能的及时性上可能还不如云厂商提供的工具。\n对于有多云厂商部署无服务器函数需求的用户，使用了Serverless Framework并不能轻松的将无服务器函数部署到不同云厂商的托管服务上，他只是帮助提供跨云厂商的统一工具链及相似的持续集成、部署等最佳实践流程。例如将一套函数从AWS迁移到Azure上，需要重新实现Azure provider下的配置，因为云厂商的托管无服务器服务和其他云资源都存在着大量差异。另外函数代码也需要面临改造，不同云厂商的触发器消息事件也都有不同的格式！这里可以考虑使用类似Spring Cloud Function这样的解决方案来实现跨云厂商的函数编写。\n总之，Serverless Framework对于跨云厂商部署场景有一定生产效率的提升，但他离完美解决跨云厂商无服务器托管服务（各厂商服务天生不兼容）还有很远的距离，也许这个思路就是走不通的\u0026#x1f615;。\n","link":"https://kane.mx/posts/2019/serverless-framework/","section":"posts","tags":["云计算","FaaS","AWS","AWS Lambda","Serverless Computing"],"title":"Serverless framework 101"},{"body":"在基于函数计算的钉钉回调函数接口中使用钉钉回调函数案例实践了AWS Lambda无服务函数。该示例中，我们将自定义的函数代码及依赖的第三方库（比如json处理库jackson, 钉钉openapi加密库, aws dynamodb client等）整体打包为一个部署包，上传到lamdba代码仓库用于函数执行。\n然而实际项目中，其实有大量的相关函数可能会共享这些基础依赖库、三方函数库(比如headless chrome(Puppeteer), pandoc, OCR library -- Tesseract等等)或者使用自定义runtime(如官方未支持的java11)的需求。AWS Lambda在去年底发布了Lambda layers功能来满足上述这些实际开发中的需求。\n接下来，让我们看看如何将前文中的函数依赖放置到一个单独的layer中，作为不同函数的共享依赖库。\n在我们的构建配置build.gradle中，将函数的共享依赖拷贝到java runtime特定的目录结构java/lib/下，\n153 154 155 156 157 tasks.register\u0026lt;Copy\u0026gt;(\u0026#34;depsLayer\u0026#34;) { into(\u0026#34;$buildDir/deps/java/lib\u0026#34;) from(configurations.compileClasspath.get()) from(configurations.runtimeClasspath.get()) } 接下来将共享的依赖创建为一个lambda layer，并且让callback函数依赖这个共享layer，不再将所有的依赖打包为一个很大的部署包减小每次变更需要发布的包大小。\n31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 DependenciesLayer: Type: AWS::Serverless::LayerVersion Properties: LayerName: DingTalkDependencies Description: DingTalk Dependencies Layer ContentUri: \u0026#39;build/deps\u0026#39; CompatibleRuntimes: - java8 LicenseInfo: \u0026#39;Available under the MIT-0 license.\u0026#39; RetentionPolicy: Retain CallbackFunction: Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction Properties: CodeUri: build/libs/dingtalk-callback-1.0.0-SNAPSHOT.jar Handler: com.github.zxkane.dingtalk.Callback::handleRequest Layers: - !Ref DependenciesLayer Policies: 在console查看部署后的函数，如下图，可以看到函数新增了一个layer。\n同其他的语言、技术一样，Awesome Layers项目收集了目前一些常用且维护较好的layer，自创轮子之前可以先参考下\u0026#x1f600;。\n使用layer同样有以下限制，使用前需要注意，\n依赖的layer数不能超过5个 函数以及依赖的所有layers解压后不可以超过250MB ","link":"https://kane.mx/posts/2019/aws-lambda-layers/","section":"posts","tags":["云计算","FaaS","AWS","AWS Lambda","Serverless Computing"],"title":"AWS Lambda Layer实践"},{"body":"","link":"https://kane.mx/tags/qcon/","section":"tags","tags":null,"title":"QCon"},{"body":"这周参加了QCon 2019北京站，这里记录下部分印象深刻的主题以及个人感受。\nQCon是由InfoQ主办的综合性技术盛会，主题涵盖了大前端、高可用架构、容器技术、大数据、机器学习等各种热门技术主题。其中也不乏下一代分布式应用、混沌工程等前沿有意思的主题，后面会详细介绍相关的主题演讲。\n工程效率提升 这是在QCon第一日个人感兴趣且非常有意思的一个系列主题。无论是创业公司、独角兽企业还是互联网巨头都希望不断提升工程效率，3个相关的分享分别来自BAT，可见互联网巨头们对团队效率提升的渴望和重视。\n10倍速原则对工程生产力建设的方向性影响 这个talk来自腾讯的高级顾问乔梁，这位老兄已经连续10年在QCon上分享持续集成、持续交付等工程效率相关的主题了！他的演讲始于对成功企业的一万次实验法则方法论， 而大量高效的实验基于一个双环模型的快速验证环。 最终工程生产力是由工作流程、支撑工具和工程素养三方面一起决定的。 非常认可决定工程效率的这三要素，个人认为工程素养是其他两个要素的基石，奈飞文化手册中开篇强调的只招聘成年人就是很好的诠释。\n百度工程能力提升之道 这个分享来自百度研发效能部门的产品经理，从人、技、法三方面强调工程能力提升的策略模型。其实这个模型就是对应着上面乔梁分享的工程生产力三要素。 关于对工程师的培养和技术规范，百度发布了\u0026quot;百度工程师手册\u0026quot;，据说可以从网络上下载到。大量工具的细节分享涉及的都是百度内部工具，不过工具针对的思路还是可以借鉴的。\n菜鸟集团研发效能变革实践 这个分享来自阿里系的菜鸟集团，特别强调数据化驱动的研发效能提升，里面很有意思的一点是建立成本模型来评估效能的好坏。\n作为效能部门负责人，有数据特别是成本数据，让高层管理者buy-in你的想法，这应该是个非常好的角度。\n高可用架构 声明式自愈系统——高可用分布式系统的设计之道 这个分享比较理论化的介绍声明式的、可自愈的分布式系统原理和实践，其实业界已经有个非常好的参考实现 -- 就是Kubernetes \u0026#x1f603;。\n超大规模高可用性云端系统构建之禅 这是一个非常实用的工程实践分享，列举了大量大规模云原生应用一定会面临的挑战，以及简单又实用的解决方法。每一个云原生应用开发者都应该看看这个slide，学习前人实践的经验。另外为讲演者蔡超做个推广，对Go语言有兴趣的同学，可以考虑学习蔡超的极客时间课程Go语言从入门到实战。\n运维架构 Kubernetes 日志平台建设最佳实践 这个分享介绍了Kubernetes上日志方案的解决思路，及它的实践 -- 阿里云的日志服务。对于很多有基础服务建设的团队可以作为很好的参考方案。对于已经托管在阿里云上的应用，建议就不要重复建设低端的轮子了，阿里云日志服务应该做为团队的首选。不论在性能同其他云托管服务集成上，都远远好于自建的方案。\n多云管下的自动化运维架构 多云是现在一些厂商力推的话题，个人认为是市场排名靠后的总要找些方法来提升自己产品的竞争力\u0026#x1f60f;。分享者企业做了一套ops平台来管理多云的资源，他们通过adapter方式来将不同云厂商的差异和资源进行了抽象。这其中涉及大量处理产品间差异性和被动适配的工作，个人不太认同这种方式。并且丢掉了infra as code这类重要的特性，对于有这种需求的大型企业来说不是一个完美的方案。\n混沌工程 混沌工程这个话题非常有意思，同时也是较新的一种实践工程。从最早的提出、系统实践到现在还不到10年时间。来自阿里巴巴的云原生架构下的混沌工程实践和AWS的AWS 云上混沌工程实践之对照实验设计和实施两个分享介绍了从混沌工程的起源到如何全方位的实践用于提升云原生应用的\u0026quot;韧性\u0026quot;，非常值得学习。蔡超的超大规模高可用性云端系统构建也提到了使用混沌工程来提升系统的高可用性，在云原生应用越来越普及的情况下，被动的设计高可用系统肯定不如主动(甚至持续的自动化)可控的注入混乱来逐渐提升系统的高可用性。目前chaos engineering的工具/平台支持还不太完善，这个方向看起来是技术创业很好的切入点\u0026#x1f60f;。最后切记一点，混沌工程最终一定要在生产系统上实施。 下一代分布式应用 这个主题虽说命名为下一代分布式应用，主要分享的大多是服务间流量治理问题，特别是Service Mesh下实践经验。其中来自阿里李云的分布式应用的未来——Distributionless特别值得一提。这个分享并没有实际的案例或经验分享，他重点分享的是对于Cloud Native本质和趋势的看法，这些观点我个人特别认同(好像找到知音似的:grinning:)！完整的slide这里下载。 用户增长 来自云测的陈冠诚在智能优化 \u0026amp; A/B 测试 - 实验驱动用户增长的理论与技术实践分享了A/B测试实验对用户增长的理论及实践，顺便也推广了他家云测的A/B测试SaaS服务。听圈内的朋友分享，云测的A/B测试服务确实比较简单好用，方便产品后台创建测试并分析结果，对增长有需求的小伙伴可以考虑体验下，减少不必要的重复建设轮子。\n","link":"https://kane.mx/posts/2019/2019-qconbeijing-reviews/","section":"posts","tags":["会议","QCon","DevOps","架构","混沌工程","工程效率"],"title":"QCon2019北京站回顾"},{"body":"","link":"https://kane.mx/tags/%E4%BC%9A%E8%AE%AE/","section":"tags","tags":null,"title":"会议"},{"body":"","link":"https://kane.mx/tags/%E5%B7%A5%E7%A8%8B%E6%95%88%E7%8E%87/","section":"tags","tags":null,"title":"工程效率"},{"body":"","link":"https://kane.mx/tags/%E6%9E%B6%E6%9E%84/","section":"tags","tags":null,"title":"架构"},{"body":"","link":"https://kane.mx/tags/%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B/","section":"tags","tags":null,"title":"混沌工程"},{"body":"","link":"https://kane.mx/tags/istio/","section":"tags","tags":null,"title":"istio"},{"body":"","link":"https://kane.mx/tags/service-mesh/","section":"tags","tags":null,"title":"service mesh"},{"body":"","link":"https://kane.mx/tags/spring-cloud/","section":"tags","tags":null,"title":"spring cloud"},{"body":"基于Java的Spring Cloud是由Java最大开源生态Spring社区推出的Out-of-Box分布式微服务解决方案，自2016年发布起就被众多开发者看好。Java作为广为流行的服务端编程语言，Spring Cloud也就越来越多的被用于微服务开发。\nSpring Cloud集成了Netflix OSS开源项目实现了很多功能(或作为实现之一)，包括服务治理、网关路由、客户端负载均衡、服务间调用、断路器等。Spring Cloud Netflix将很多生产级别微服务能力开箱即用的带到了Spring Cloud架构下的微服务中，帮助开发者快速的构建满足12要素的应用。\n在去年底发布的Spring Cloud Greenwich版本中宣布Spring Cloud Netflix中重要的组件Hystrix、Ribbon、Zuul 1等由于上游开源项目进入维护状态，对应的Spring Cloud Netflix项目也进入到维护状态。这些项目将不再适合用于长期维护的产品中！\n同时随着近年云计算的发展，特别是Kubernetes成为容器编排平台的事实标准，加上Service Mesh(服务网格)对微服务的服务治理和流量控制，为云原生应用提供了更为现代、平台无关的解决方案。\n让我们逐一看看在Kubernetes加上Serivce Mesh(例如Istio)如何实现微服务的服务发现、路由、链路追踪、断路器等功能。\n配置中心 Spring Cloud Config默认提供了多种配置管理后端，例如Git、Vault、JDBC Backend等。同时也有很多开源方案可以作为替换方案，比如Alibaba Nacos。\n作为部署在Kubernetes中的应用，最佳实践是平衡Configmap和Spring Cloud Config。将涉及程序功能的配置放置在Configmap和Secret，随同微服务的发布一起做版本管理，可以做到随着应用回退的时候同时回退到历史对应的配置版本，而不会因为历史版本的代码被最新版本的配置所中断。Spring Cloud Kuberentes项目很好的支持了Spring Cloud应用从Configmap和Secret中读取配置项。而涉及业务的配置选项，将可以考虑放到Spring Cloud Config后端实现统一管理。如果应用是部署在阿里云，使用阿里云托管的配置服务和Spring Cloud Config -- Nacos将是很好的选择。\n服务发现 Kubernetes Services提供了集群内原生的服务发现能力，是Eureka或Spring Cloud Zookeeper等服务发现服务的很好替代品。基于K8S Services的服务发现，很容易通过Service Mesh能力实现限流、A/B测试、金丝雀发布、断路器、chaos注入等服务治理能力。同时对微服务应用来说，不用在应用端添加对应三方库来实现服务注册及发现，减少了应用端开发需求。\n各种流量治理场景 应用被服务化后，一定会面临流量治理的问题。对于各种服务间如何实现限流、A/B测试、金丝雀发布、断路器、chaos注入测试、链接追踪等，这其实是一类通用的问题。\nSpring Cloud提供的是一种客户端解决思路，需要每个应用引入对应功能的libraries的支持。即使通过spring boot starter提供了近似开箱即用的能力，但是每个应用仍然需要自行添加对应的能力，版本更新、安全漏洞fix等场景都需要手动升级、测试、打包、部署。在异构编程语言实现的微服务架构下，未必每种编程框架都能提供很好的对应能力支持。除非有特别的服务治理策略，不推荐在微服务自身来实现服务流量的控制。\nService Mesh(例如Istio或Linkerd)从整个服务治理层面对上述需求提供了统一的解决方案，而不需要微服务做自身的升级或改动。在基于Kuberentes部署运行的微服务应用，Service Mesh提供了统一的服务治理方案，将用户从不同的微服务中自身维护服务治理功能中解放出来，从平台层面提供更加统一一致的解决方案。\n在去年的SpringOne Platform 2018上也有一个Topic A Tale of Two Frameworks: Spring Cloud and Istio 探讨什么场景应该使用Service Mesh，什么时候使用Spring Cloud服务治理组件，有兴趣的朋友可以看一看。\n","link":"https://kane.mx/posts/effective-cloud-computing/spring-cloud-or-cloud-native/","section":"posts","tags":["云计算","kubernetes","spring","spring cloud","service mesh","istio"],"title":"Spring Cloud or Cloud Native"},{"body":"","link":"https://kane.mx/tags/iam/","section":"tags","tags":null,"title":"IAM"},{"body":"","link":"https://kane.mx/tags/oauth2/","section":"tags","tags":null,"title":"oauth2"},{"body":"本文是为Kubernetes中任意应用添加基于oauth2的认证保护的下篇，将图文详解如何使用基于钉钉认证的oauth2 proxy为自身本没有认证授权功能的Web站点实现认证及授权。\n示例是使用的AWS EKS服务作为K8S环境。鉴于K8S的应用运行时属性，该示例也可以部署在其他云厂商托管的K8S。\n示例模块简介 Nginx Ingress Controller为K8S集群内Web应用提供反向代理，以及支持外部认证。 简单的Web站点，基于Nginx docker容器。该站点默认没有认证及授权功能，使用外部钉钉应用作为认证及授权。 OAuth2 Proxy on Dingtalk提供基于钉钉应用的扫码认证及授权，只有认证且授权的用户才可以访问上面的Web站点。 默认设定 Web站点域名web.kane.mx 认证服务域名oauth.kane.mx 准备AWS EKS环境 创建EKS集群。由于Nginx Ingress服务是LoadBalancer类型，EKS创建NLB或ELB对应的targets时需要targets部署在public VPC subnets，所以为了简化部署EKS集群的VPC subnets都选择public subnet。新建的EKS集群允许公开访问。 本地安装配置kubectl, aws-iam-authenticator用于远程管理集群。 为集群添加worker节点。 配置Helm部署环境。 钉钉应用准备 为企业或组织开通钉钉开发平台 创建一个新的移动应用。回调域名填写\u0026lt;http or https\u0026gt;/\u0026lt;认证服务域名\u0026gt;/oauth2/callback。记录下来应用的appId和appSecret。 创建一个企业内部工作台应用。地址可以随意设置。服务器出口IP设置为EKS集群中工作节点的公网IP或者NAT EIP，取决于工作节点如何访问Internet。并记录下来应用appKey和appSecret。 部署示例应用 克隆示例部署脚本。 替换values.yaml中的dingtalk_corpid为工作台应用的appKey， dingtalk_corpsecret为工作台应用的appSecret。 由于社区维护的oauth2-proxy charts并不支持dingtalk扩展的SECRET ENV，所以将密钥配置到了configmap中。用于生产环境的话，建议按这个commit使用secret保存应用secret。 62 63 64 65 66 67 68 69 70 71 72 oauth2-proxy: config: clientID: aaa clientSecret: bbb cookieSecret: ccc configFile: |+ email_domains = [ \u0026#34;*\u0026#34; ] cookie_domain = \u0026#34;kane.mx\u0026#34; cookie_secure = false dingtalk_corpid = \u0026#34;\u0026lt;appkey of dingtalk app\u0026gt;\u0026#34; dingtalk_corpsecret = \u0026#34;\u0026lt;appsecret of dingtalk app\u0026gt;\u0026#34; 如果仅希望企业部分部门的员工可以获得授权，在上面configFile配置下添加如下配置， 1dingtalk_departments = [\u0026#34;xx公司/产品技术中心\u0026#34;,\u0026#34;xx公司/部门2/子部门3\u0026#34;] 替换部署应用的域名为你的域名。 执行以下命令安装Helm部署依赖。 1helm dep up 执行以下命令部署nginx ingress controller, web应用以及oauth2 proxy 1helm upgrade --install -f values.yaml --set oauth2-proxy.config.clientID=\u0026lt;移动应用appid\u0026gt;,oauth2-proxy.config.clientSecret=\u0026lt;移动应用appsecret\u0026gt; site-with-auth --wait ./ 如果集群中已经部署了Nginx Ingress Controller，修改values.yaml如下将忽略部署Nginx ingress， 47 48 49 50 51 52 53 affinity: {} nginx-ingress: enabled: false controller: ingressClass: nginx config: 部署成功后，获取ELB地址。 1kubectl get svc -o jsonpath=\u0026#39;{ $.status.loadBalancer.ingress[*].hostname }\u0026#39; \u0026lt;deployment name\u0026gt;-nginx-ingress-controller;echo 2a3afe672259c511e98e2a0a0d88fda3e-xx.elb.ap-southeast-1.amazonaws.com 部署成功后配置 将站点和oauth服务域名解析到上面部署创建的ELB上。\n测试 访问Web站点(如本示例中的http://web.kane.mx)，未授权的情况下，调转到钉钉应用扫码登录界面。使用组织内成员的钉钉扫码授权后，将跳转回Web站点应用，可以正常浏览该域名下的页面。\n","link":"https://kane.mx/posts/effective-cloud-computing/oauth2-proxy-on-kubernetes/part2/","section":"posts","tags":["云计算","IAM","kubernetes","oauth2","钉钉","dingtalk","AWS","AWS EKS"],"title":"为Kubernetes中任意应用添加基于oauth2的认证保护 (下)"},{"body":"由于企业内部管理的需要，用到了钉钉的业务事件回调能力，正好将这个轻量级的接口使用无服务器技术来实现部署，以应对流量无规律下的动态扩展伸缩、按需使用、按量计费等需求。\n阿里云函数计算版本 由于公司系统部署在阿里云，首先选择使用阿里云函数计算来实现及部署。该接口使用了JVM上语言Kotlin开发，虽然阿里云函数计算官方支持的开发语言有Java但没有Kotlin。其实无论Java或Kotlin最终部署文件都是Java Class字节码，加上Kotlin与Java良好的互操作性，实测函数计算可以完美支持Kotlin开发(个人认为任意JVM上的开发语言都是支持的)。\n同时该函数使用了表格存储来持久化回调事件。表格存储是个按量计费的分布式存储，有兴趣的可以自行查阅文档了解更多。\n该函数通过API网关和表格存储触发器来触发。访问日志和执行日志被存储在日志服务中。\n函数的本地测试和线上部署，使用了函数计算提供的命令行工具Fun。基于Fun定义的阿里云Serverless模型实现了对函数们使用资源的声明和编排，集成Gitlab CI实现了函数的CI/CD自动化发布流程。\n不涉及公司业务的代码已开源在Github，有兴趣的可以作为参考。\n目前函数计算和表格存储有各自的免费配额，在业务量不大的情况下，该服务完全免费。\nAWS Lambda版本 AWS Lambda是目前全球使用最为广泛的serverless服务，同时也是函数计算发展方向的引领者。\n由于一些个人原因，笔者最近接触了部分AWS服务，同时尝试将钉钉回调函数移植到了AWS Lambda上。阿里云上使用的云服务改为由AWS上对应服务来实现，例如存储使用了DynamoDB，日志使用CloudWatch收集和查询。\n本地测试和部署工具，使用的是SAM CLI，持续集成和持续部署使用的是AWS CodeBuild和AWS CodePipeline。此外AWS通过AWS CloudFormation提供一种非常强大的能力，可以将AWS上的各种资源通过配置声明的方式来管理(也就是现在非常热门的一个概念--Infrastructure as Code)。AWS CloudFormation会为每次一个或多个资源的变更生成ChangeSet，提供查看对比、版本管理、遇到变更错误整体回退等能力。所以，AWS版本也将该项目的CI/CD部署用到的AWS CodeBuild、AWS CodePipeline、Amazon DynamoDB等资源通过CloudFormation的配置管理起来。\n配置代码段如下， 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 Description: Create a CodePipeline to include Github source, CodeBuild and Lambda deployment. Parameters: AppBaseName: Type: String Description: App base name Default: dingtalk-callback ArtifactStoreS3Location: Type: String Description: Name of the S3 bucket to store CodePipeline artificat. BranchName: Description: GitHub branch name Type: String Default: master RepositoryName: Description: GitHub repository name Type: String Default: dingtalk-callback-on-aws GitHubOAuthToken: Type: String NoEcho: true Resources: BuildDingtalkProject: Type: AWS::CodeBuild::Project Properties: Name: Fn::Sub: ${AppBaseName}-build-${AWS::StackName} Description: Build, test, package dingtalk callback project ServiceRole: Fn::GetAtt: [ CodeBuildRole, Arn ] Artifacts: Type: S3 Location: Ref: ArtifactStoreS3Location Name: Fn::Sub: ${AppBaseName}-build-${AWS::StackName} NamespaceType: BUILD_ID Path: Fn::Sub: ${AppBaseName}/artifacts Packaging: NONE OverrideArtifactName: true EncryptionDisabled: true Environment: Type: LINUX_CONTAINER ComputeType: BUILD_GENERAL1_SMALL Image: aws/codebuild/java:openjdk-11 PrivilegedMode: false ImagePullCredentialsType: CODEBUILD EnvironmentVariables: - Name: s3_bucket Value: Ref: ArtifactStoreS3Location Source: DingtalkCallbackPipeline: Type: \u0026#39;AWS::CodePipeline::Pipeline\u0026#39; Properties: Name: Fn::Sub: ${AppBaseName}-pipeline-${AWS::StackName} RoleArn: Fn::GetAtt: [ CodePipelineRole, Arn ] Stages: - Name: Source Actions: - Name: SourceAction ActionTypeId: Category: Source Owner: ThirdParty Version: 1 Provider: GitHub OutputArtifacts: - Name: Fn::Sub: ${AppBaseName}-source-changed Configuration: Owner: !Ref GitHubOwner Repo: !Ref RepositoryName Branch: !Ref BranchName OAuthToken: !Ref GitHubOAuthToken PollForSourceChanges: false RunOrder: 1 - Name: Build Actions: - Name: Build_Test_Package InputArtifacts: - Name: Fn::Sub: ${AppBaseName}-source-changed ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild OutputArtifacts: - Name: Fn::Sub: ${AppBaseName}-packaged-yml Configuration: ProjectName: Ref: BuildDingtalkProject RunOrder: 1 AWS版本完整的代码、CloudFormation配置以及部署文档可以通过这里查看。\n","link":"https://kane.mx/posts/effective-cloud-computing/serverless-dingtalk-callback/","section":"posts","tags":["云计算","FaaS","阿里云","函数计算","AWS","AWS Lambda","钉钉","dingtalk","Serverless Computing"],"title":"基于函数计算的钉钉回调函数接口"},{"body":"Serverless Computing(无服务器计算)是目前最被看好的云端计算执行模型。其最大的好处是提供分布式弹性可伸缩的计算执行环境，仅为实际使用资源付费，并且将应用维护者从常规的运维事务中解放出来，更利于专注到具体的业务上。\n在主流的应用部署方式下，无论是使用云主机还是Kubernetes作为运行环境，都会有大量运维层面的事务需要考虑和处理，并且应用程序需要按照分布式程序的设计准则来应对应用的水平伸缩。同时随着云计算服务的发展和完善，云计算厂商提供了越来越多的基础服务，例如API网关、对象存储、消息队列、日志、监控等服务，函数计算可以完美的同其他云服务集成，帮助用户快速实现出生产级别的弹性可伸缩的应用。\n那函数计算是什么呢？让我们一起来看看阿里云对于函数计算的定义。\n阿里云函数计算是事件驱动的全托管计算服务。通过函数计算，您无需管理服务器等基础设施，只需编写代码并上传。函数计算会为您准备好计算资源，以弹性、可靠的方式运行您的代码，并提供日志查询、性能监控、报警等功能。借助于函数计算，您可以快速构建任何类型的应用和服务，无需管理和运维。而且，您只需要为代码实际运行所消耗的资源付费，代码未运行则不产生费用。\n基于函数计算的特点，可以很好满足以下需求，\n业务流量不确定或有明细的周期性 构建分布式系统经验不足 无需运维 按需计算 计费灵活 由于函数计算的扩展能力，对运维的要求极少，按量计费等特性用于需要快速验证的早期项目也是非常好的场景。\n下面这个slide是近期针对阿里云函数计算做的分享。\n","link":"https://kane.mx/posts/effective-cloud-computing/serverless-computing-101/","section":"posts","tags":["云计算","FaaS","阿里云","函数计算","Serverless Computing"],"title":"无服务器计算101"},{"body":"企业随着业务的发展，必然会部署各种各样的IT系统。出于安全性的考虑，一些系统仅可企业内部使用，甚至仅开放给企业部分部门员工使用。\n这些IT系统大致可分为两类，\n系统本身不支持任何认证机制，例如资讯或文档类系统。需要增加认证保护，能够限制非企业员工访问即可。系统运维通常的做法是，为站点设置HTTP Basic认证保护。由于HTTP Basic认证是通过预设的用户、密码认证，认证信息比较容易泄露。即使定期更换密码，但需要额外的机制通知用户密码的变更，用户体验也不好。 系统自身支持认证，甚至支持多种认证机制。比如最常用的开源CI/CD工具，Jenkins内置支持本地数据库认证、通过插件支持多种第三方系统集成认证。如果大量的IT系统都有一套独立的用户管理，随着企业的员工的变更，用户的增删等操作对系统管理员来说是不小的工作量。同时，也很容易由于人为疏忽，造成资产、数据的安全隐患。 假设企业自身已经有了一套OA系统包含员工、组织结构管理，例如，国内目前最为普及流行的钉钉或企业微信。我们完全可以提供一套基于oauth 2.0协议的认证方式，让以上两类IT系统使用企业已有的OA系统(钉钉或企业微信)来实现登录认证。做到这一点后，企业无论有多少IT系统都不再需要额外管理用户的成本，并且也避免了数据安全隐患。\n钉钉通过钉钉开放平台提供的API开放了许多钉钉内部的能力，例如，身份验证、通讯录管理等等。然而钉钉的三方网站登录接口并不是标准的oauth 2.0协议实现，我们需要通过一个oauth2 proxy代理工具实现将钉钉的三方网站登录兼容oauth2协议。同理，使用这个oauth2代理工具，可以使用Google、Facebook等三方网站作为统一认证方式。\n有了基于钉钉的oauth2代理作为企业统一登录方式，对于上面两大类系统的认证需求解决方案分别如下，\n部署在Kubernetes中无内置认证机制的Web应用，通过nginx-ingress的外部OAUTH认证实现基于oauth2的安全认证。 Jenkins可以通过反向代理插件实现使用oauth2认证登录。 在下篇中，我们将图文详解如何一步步实现为一个无认证的企业文档Web应用添加基于钉钉的统一认证。\n","link":"https://kane.mx/posts/effective-cloud-computing/oauth2-proxy-on-kubernetes/part1/","section":"posts","tags":["云计算","IAM","kubernetes","oauth2","钉钉","dingtalk"],"title":"为Kubernetes中任意应用添加基于oauth2的认证保护 (上)"},{"body":"企业使用公有云服务的第一件事情就是创建云帐号，有了帐号之后如何让企业员工安全合规的使用云帐号下的各种资源是开启云之旅后的第一个考验。\n云计算厂商针对企业上云后面临的第一个需求已经推出了完善的解决方案--Identity and Access Management。IAM可以帮助云帐号安全地控制对云计算服务资源的访问。企业可以使用IAM控制对哪个用户进行身份验证 (登录) 和授权 (具有权限) 以使用资源。\n云厂商是否提供完善的IAM服务可以作为整体产品解决方案是否成熟的一个衡量指标，比如AWS的IAM和阿里云的访问控制都是较为成熟完善的产品。国内某个以AI能力为卖点的云厂商，在IAM产品方面几乎为零，很难相信对安全合规有需求的企业会完整使用他的云产品作为解决方案。\nIAM通常提供以下功能:\n对云账户的共享访问权限 允许在一个云账户下创建并管理多个用户身份，并允许给单个身份或一组身份（既可以是当前云帐号下也可以是其他云帐号下）分配不同的权限策略，从而实现不同用户拥有不同的云资源访问权限，而不必共享云帐号根用户的密码或访问密钥。\n精细权限 可以针对不同资源向不同人员授予不同权限。可以要求用户必须使用安全信道（如 SSL）、在指定时间范围、或在指定源 IP 条件下才能操作指定的云资源。\n多重验证 (MFA) 可以向云账户和各个用户添加双重身份验证以实现更高安全性。借助MFA，用户不仅必须提供使用账户所需的密码或访问密钥，还必须提供来自经过特殊配置的设备的代码。\n联合身份 可以允许已在其他位置（例如，在企业网络中或通过 Internet 身份提供商）获得密码的用户获取对云账户的用户访问权限。\n后面会有专门的文章来讲如何实践联合身份。\n统一账单 云账户接收包括所有用户的资源操作所发生费用的统一账单。\n尽管IAM提供了上面种种功能，云帐号的管理者仍可通过一些最佳实践来更好的使用IAM产品来提升安全级别和减少运维成本。\nIAM最佳实践 尽量不要使用云帐号的根用户，不要为根用户创建AK。云帐号管理员也使用各自独立的子账号。 为企业中每一个需要使用云服务的员工单独创建子账户，且默认不允许创建AK。便于员工离职的时候，通过删除帐号来完全清理用户在云计算平台的各种权限。 密码安全实践， 限制密码强度不少于8位，必须由大小写字母、数字和符号中的三种组成。 强制密码过期时间不超过90天，且过期后不可登录。 新密码至少禁止使用前3次密码。 设置密码重试约束，例如，一小时内使用错误密码最大尝试9次登录。 强制所有用户启用两步认证。 对访问网络有限制的企业，可以开启登录IP限制。 [推荐做法]已有SSO单点登录系统的企业，可以通过SAML 2.0标准实现从企业本地账号系统登录到阿里云，从而满足企业的统一用户登录认证要求。 细粒度的权限管理， 为各种云资源创建最细粒度的权限策略。例如，分别为RDS实例rds-instance-1创建只读权限策略rds-instance-1-readonly-access，RDS实例rds-instance-2创建只读权限策略rds-instance-2-readonly-access。 根据职能、部门等维度为云帐号子用户创建用户组。例如，按项目创建用户组，group-project-a，group-project-b。如果project-a用户需要访问rds-instance-1的信息，将自定义权限rds-instance-1-readonly-access授权给group-project-a。再将相关用户加到用户组group-project-a中，这样这些用户就具有只读访问RDS实例rds-instance-1的权限。而不是将所有RDS的读写权限都授予这些用户，最大限度的保证用户不获取超过实际需要的权限。 在实际场景中，通常会通过云计算服务的API来完成某些周期性任务，比如每日RDS中的慢查询统计、云帐号每日花费统计等。这些任务都需要一个云帐号的AK来完成API的身份认证。最佳的做法是，为每类相关的任务创建一个功能性子账号，禁用他们的web登录，且遵循特殊的命名规范(functional-开头)，比如functional-rds-stats、functional-cost-stats。创建最小的权限策略，然后分配给这些功能性用户。例如，functional-rds-stats仅被授予RDS只读权限，functional-cost-stats仅被授予费用的只读权限。为这些子账号创建AK，每类任务使用不同的AK来完成API认证，而不是都使用同一个AK。这样的好处是，不同类型任务的AK具有不同的权限，最大限度的保护了云帐号的安全，并且这些AK不跟实际的员工子账号关联，不会因为员工帐号的变更而受影响。如有更高的安全合规的要求下，可以定期作废已有AK，创建新AK替换。至于AK怎样安全管理，之后会有专门的文章来详解。 ","link":"https://kane.mx/posts/effective-cloud-computing/iam-best-practice/","section":"posts","tags":["云计算","阿里云","AWS","IAM"],"title":"IAM最佳实践"},{"body":"这是“如何高效使用云服务”系列文章的首篇分享。可能有朋友好奇为什么不是从云计算最基础的服务--计算资源ECS/EC2讲起呢？在Cloud Native已经被越来越接受的今天，基于Kubernetes部署、编排应用的方式已经是业界的事实标准。无论是互联网巨头，传统500强企业，还是创业团队都在使用或规划使用Kubernetes作为应用程序的自动化部署、可扩展管理平台。在云计算平台，虚拟机越来越不需要单独的管理，在绝大多数的业务场景下，它们只是作为容器集群所管理的计算资源。甚至虚拟机的创建到销毁整个生命周期管理都可以由Kubernetes根据集群的负载来自动完成。\n所有主流的云计算厂商都在解决方案中力推托管的Kubernetes，AWS的EKS，Azure上的AKS，当然少不了Google家GCP上的Kubernetes Engine。国内阿里云，腾讯云等每一个公有云玩家也都基于开源Kubernetes推出了托管服务。如果一家云计算厂商在提供托管Kubernetes这一服务上没跟上业界的步伐，将来极大可能被淘汰出这个市场。\n托管的Kubernetes类型 以国内的阿里云为例，目前提供了两大类三种不同的Kubernetes托管服务。\n经典Dedicated Kubernetes模式。这种模式下用户可以选择宿主机实例规格和操作系统，指定Kubernetes版本、自定义Kubernetes特性开关设置等。用户需要手动维护集群，例如升级Kubernetes版本，内置组件版本等。可以手动或自动伸缩集群节点数目。目前该模式下有两种类型，第一种集群主节点需要使用用户的ECS，用户可远程登录或管理这些ECS。另一种是，主节点也由云厂商托管，用户只能通过API Server管理Kubernetes。在费用方面，无论是否托管集群主节点，集群服务免费，按使用的ECS实例及计费方式收费。 Serverless 模式(目前公测中，暂时免费)。无需创建底层虚拟化资源，可以利用 Kubernetes 命令指明应用容器镜像、CPU和内存要求以及对外服务方式，直接启动应用程序。按容器使用的CPU和内存资源量计费。这种模式下应该是在一个集群内实现多租户，目前有些features不被支持。例如，部署不支持DaemonSet，Ingress不支持NodePort类型，存储不支持PV和PVC等。 用户可以根据自己的业务类型来选择适合的托管Kubernetes集群。如果部署的应用是无状态的Web服务，可以选择Serverless Kubernetes集群，进一步减少运维工作量。\n如果用户部署的应用有状态，需要挂载外部存储，例如MongDB集群，MQ集群，可以选择经典Dedicated Kubernetes模式。如果用户需要通过Kubernetes组件扩展或自定义实现某些功能，这些需求云厂商的标准版并没有提供，这时可以选择经典Dedicated Kubernetes模式，利用Kubernetes高度灵活的扩展机制来满足自定义需求。\n托管Kuberentes的优势 国内的阿里云有篇技术文档对比阿里云Kubernetes vs. 自建Kubernetes，文章看起来虽然有厂商自卖自夸的嫌疑。作为阿里云K8S的客户，在使用托管K8S近一年来，深切的体会到云厂商托管K8S带来的种种好处，文档中提到的种种优势确实是言之凿凿。\n接下来具体看看云厂商托管K8S到底有哪些优势。\n便捷 通过Web界面/API一键创建Kubernetes集群，集群升级。 Web界面/API实现集群的扩容或缩容。 集群的安装，补丁以及常规版本升级在运维工作中属于体力活。在规模不大的时候，使用人工实现需要花费不少时间准备环境测试验证，且易错。如果集群体量不够大的话，开发自动化运维脚本又浪费人力成本。云计算厂商的托管K8S集群将提供专业、稳定的技术运维服务，和几乎为零的人力成本。\n从效率和人力成本上看，托管K8S集群完胜自建Kubernetes集群。\n功能更强大 Kubernetes作为一个容器编排系统，开源版本中许多组件没有默认实现或实现有限，需要跟运行环境(如托管K8S的云平台)集成。例如，存储，Load Balancer，网络等核心组件。官方文档Internal load balancer就提供了在不同的云厂商环境中的使用示例。部署一个强大且完整的K8S集群需要同许多云计算的基础组件集成(且只能通过API完成)，这往往是云计算厂商的强项。\n云厂商托管的K8S可以在以下方面提供强大的云计算平台支持，\n网络 高性能 VPC 网络插件。 支持 network policy 和流控。 负载均衡 支持创建公网或内网负载均衡实例，或者复用已有实例。支持指定带宽大小、计费方式、4层或7层协议代理等云厂商负载均衡功能。对应用运维来说可以把负载均衡的配置通过代码实现，并且支持版本控制。对比传统的云端部署，也可以将应用部署和应用运维集成在一起统一管理，避免应用发布和运维配置的割裂，减少人为运维失误。\n阿里云托管K8S的负载均衡详细配置可以参考这个文档，AWS上见此文档。\n存储 集成了云厂商的云盘、文件存储NAS、块存储等存储方案，基于标准的FlexVolume驱动，提供了最佳的无缝集成。\n如果是在云厂商的虚拟机上自建Kubernetes集群，默认无法使用云上的存储资源。如果需要利用云厂商提供的存储方案，例如对象存储，就需要自行开发基于FlexVolume的驱动。在厂商托管K8S已经完美解决了存储集成的问题，何必自己又去费时费力的定制开发呢？\n可以看到，云厂商托管的K8S集群在网络、负载均衡和存储上有许多天然的优势。在其他几个维度，托管的K8S集群同样也优于自建的K8S，\n运维 集成厂商的日志服务，监控服务。 K8S集群cluster autoscaler自动利用云厂商的弹性伸缩扩缩容集群节点。 镜像仓库 高可用，支持大并发。 支持镜像加速。 支持 p2p 分发。 可集成云平台的用户权限。 部分厂商目前免费且不限容量。 高可用 提供多可用区支持。 支持备份和容灾。 技术支持 专门的技术团队保障容器的稳定性。 每个 Linux 版本，每个 Kubernetes 版本都会在经过严格测试之后之后才会提供给用户。 提供 Kubernetes 升级能力，新版本一键升级。 为开源软件提供兜底，无论是K8S、Docker甚至Linux自身的问题提供支持。 专业的技术团队是提供稳定K8S服务必不可少的。但绝大多数企业是无法做到有专业的技术团队来维护K8S、提供K8S或容器技术自身的各种最佳实践、发现以及修复开源软件Bug。\n在笔者的使用托管K8S的时候就遇到这样的状况。其中一个集群升级到新版本Kubernetes后，内置DNS组件从KubeDNS被替换为全新的CoreDNS，而当时的CoreDNS版本在Service ExternalName支持上有Bug，导致已有的这种Service无法提供服务。在同云厂商的技术团队沟通后，先用workaround将问题快速绕过，不影响业务的使用。同时，云厂商的技术人员（也是K8S社区committer）继续调研，发现该问题是CoreDNS的Bug。在为开源CoreDNS项目创建Issue后，同时提供Patch，又在CoreDNS committer建议下完善了测试用例，推动了该问题快速在CoreDNS中被修复。CoreDNS包含Fix的版本发布后，云厂商技术支持团队将更完美的解决方案提供给了我们。作为K8S服务的用户，这种体验是极好的。当时我们的技术团队既没有精力也没有能力快速发现并修复开源软件中的这类问题，而云厂商的服务间接帮我们实现了这种能力。\n这其实是一种非常好的共赢商业模式，云厂商有能力且有动力投入顶尖技术团队将开源技术商业化，云厂商的用户则用最小的代价获得了最优的基础服务来为核心业务赋能。\n","link":"https://kane.mx/posts/effective-cloud-computing/using-kubernetes-on-cloud/","section":"posts","tags":["云计算","阿里云","AWS","kubernetes"],"title":"不要自建Kubernetes"},{"body":"这是“如何高效使用云服务”系列文章的引子。该系列将讲述如何利用各种公有云服务来安全合规、高质量、快速、低成本的打造产品/系统，帮助企业（特别是中小微创业团队）在人少，钱缺的情况下做到最高效率。\n个人使用公有云服务的经历 初会 最早是2012年在parttime项目中开始接触使用云计算服务，当时的初创团队也是希望用最低的成本来验证idea，所有使用了云服务来做POC。目前国内市场最领先的云计算厂商阿里云那时也才提供公有云服务不到1年。由于云产品不够成熟，加上团队技能经验不足，自助互助的渠道不畅，导致最初的云计算使用体验并不好，团队没有选择完全使用云服务构建产品。\nIaaS or PaaS 云计算兴起的早期，云厂商大致分为两类，提供基于IaaS或PaaS的云服务。2013年起也有尝试不同类型的厂商平台，虽然也较好的完成一些体量不大的项目，但要在他们上面构建大规模用户产品或企业级应用，在云产品完善度上或支持开发团队协作上都有不少欠缺，还有大量的基础工作或限制留给了开发团队自身解决。\nAll-in Cloud 2015年我开始一个微电影项目创业，团队是不到10人的微型团队。从效率和成本考虑，我们将所有的服务都放到了阿里云上。我们使用了多种云产品，例如，云主机（多种OS），对象存储，图片处理，CDN，SLB，人脸识别等云服务，结合Devops集成开发，测试，部署pipeline来加速产品的迭代和更新。每名工程师承担一种以上角色，前端，后端，运维，数据，视频渲染等。合理使用云厂商的各种产品帮我们在质量，效率，成本上获得巨大的收益。\n2017年我加入了一家企业财税服务的初创公司负责技术团队。公司在2018年获得了B轮投资，研发产品运营团队近百人，属于中等规模。随着各种开源技术的巨大进步和影响逐步扩大，微服务架构的流行，基于Kubernetes的Cloud Native Computing兴起。我们利用云厂商的容器服务，DBaaS，Big Data，AI技术等用最高效的方式将数个单体应用平滑升级到高可用弹性的分布式架构，更好的满足复杂业务的多变需求，公司服务也在全国300多个城市落地，服务了数十万中小微企业客户。同时利用云厂商的VPC，访问控制，WAF等产品进行权限控制和安全保护，有效防范了因为团队扩大管理难度增加而出现安全问题。\n缘起 作为一名云计算服务6年的用户，见证了开源技术的快速发展和影响力急剧扩大，感受到整个云计算行业和厂商的长足进步。见证了国内头部云厂商从最初的使用难度颇大，现在成长为万众创业的首选服务商。\n过去的一年参加了数场技术会议，其中主题大多偏向于由知名的互联网或行业公司分享在海量数据下的技术应用。这些技术广泛涉及开发语言、应用架构、性能、大数据、机器学习和人工智能等领域，无论这些公司是否采用开源产品，在团队单兵技术能力，专业的分工，对开源项目的研发投入力量，这些经验和方法并不是中小企业可以轻易借鉴的。而云计算厂商将这些领域最基础通用的能力以产品的方式输出给用户，以按用量的方式计费，使用更简单，有专业团队维护和支持。中小团队就应该将这些事情“外包”给云厂商，集中精力到业务上，将最大的研发资源用到最核心最关键的地方。\n我同团队同事沟通中，和公司研发候选人面试交流中，发现许多从业者对云计算服务了解还不够深入。许多人理解中的云计算服务只有云服务器、云数据库等少数产品，需要自己安装维护应用服务器、负载均衡、收集日志等等看起来每个应用都绕不开的事情。他们的认知还停留在排查应用异常还需要远程登录服务器看日志，做不到合理的根据场景高效组合使用云服务，将云服务当做水电一样，作为最基础的能力加速业务的发展。业务上是采用名气大且成熟的产品，尝试新鲜看起来酷但不那么完善的产品，还是二次开发或自研开发？要做出最优的选择需要工程师能够从有高度的全局角度来考量，甚至在短时间内能用POC项目验证多个可选的方案，基于数据做出最终的选择。\n这就是这个系列的缘起，之后我将陆续分享使用那些高效的云服务产品的场景、心得、体会等等。\n封面图片Cloud Computing引用自The Blue Diamond Gallery under CC BY-SA 3.0\n","link":"https://kane.mx/posts/effective-cloud-computing/preface/","section":"posts","tags":["云计算","阿里云"],"title":"真的会用云服务吗？"},{"body":"上周参加了ArchSummit(全球架构师峰会)，在这里记录下部分参加的主题以及个人感受。\n会议回顾 今年参加了几次技术会议，微服务、容器技术、区块链、大数据、机器学习以及人工智能都是当下最热门的主题。同样这次ArchSummit绝大部分topics都跟这些主题相关。\n这次会议主要参加了两个专场主题，Kubernetes的应用和快手科技技术专题。\n基于 Kubernetes 的 DevOps是来自微软Azure的容器工程师分享如何基于 Kubernetes 的 CI/CD 落地实践。该分享中提到了CI/CD各个步骤中都有众多的工具支持，如何选择合适Kubernetes的工具将持续集成和部署串联在一起是Devops中的主要挑战。分享者也安利了AKS提供Devops完整的工具链，以及将开源工具同AKS中的服务集成实现CI/CD的最佳实践。\n我们噼里啪团队在CI/CD、Devops这块做得还不错。CI/CD pipelines持续将应用部署在运行的Kubernetes集群，过程中使用的工具链基本也是社区或CNCF推荐的主流工具。下一步可以考虑同云厂商的Devops工具链集成，进一步减少维护成本。\n基于Istio on Kubernetes云原生应用的最佳实践来自阿里云容器工程师的分享。他概要的分享了Istio技术和实现原理。当然也大力介绍了阿里云容器服务对Istio的原生支持，以及阿里云对客户使用Istio的支持，即使客户问题非常的初级他们的技术支持也很到位。\nIstio可以说是CNCF在Kubernetes上事实的服务治理实现。噼里啪技术团队也一直在关注这一块，正在尝试引入Istio提升服务的SLA。\n快手技术团队的4个分享都是围绕解决明确的业务问题而做得技术工作，非常具有实战性。其中快手万亿级实时 OLAP 平台的建设与实践介绍了快手实时OLAP平台从0到1的搭建过程。该平台从今年4月开始搭建，截止到11月，每日可以实时计算处理超过万亿的数据。而整个平台的搭建由两名大数据工程师外加一名前端工程师负责portal等UI，人效产出让人非常佩服。结合朋友间传言快手给技术人员的offer，快手应该是一家在实践类似Netflix管理文化的公司。\n最后给大家推荐一个国产的分布式New SQL数据库TiDB相关的主题。TiDB是国内技术团队开源的一个分布式数据库，已被CNCF作为Database实现推荐方案之一。他们的CTO分享了TiDB on Kubernetes 最佳实践，以及他们客户北京银行在两地多活的核心系统中采用的数据库就是TiDB。\n个人感受 会议的分享者大多来自国内一线的互联网公司，他们普遍具备流量大、数据多、技术团队能力更强等特质。并且很少使用公有云服务，使用开源产品多数也会维护私有版本。他们的业务解决方案对中小型技术团队来说可复制性不强，照搬实施的难度高，更多的是在扩展思路了解业界技术动态。中小型技术团队最紧迫的事情是满足业务快速发展和需求多变，更合理的解法是选用云厂商的服务或第三方服务快速高效的满足业务需求。极客邦旗下的会议大多缺少这类的分享，相比之下AWS的reInvent大会在这方面做得更好。\n","link":"https://kane.mx/posts/2018/2018-12-13-bj-archsummit-review/","section":"posts","tags":["会议","架构","ArchSummit"],"title":"2018北京ArchSummit回顾"},{"body":"","link":"https://kane.mx/tags/archsummit/","section":"tags","tags":null,"title":"ArchSummit"},{"body":"","link":"https://kane.mx/tags/jenkins/","section":"tags","tags":null,"title":"Jenkins"},{"body":"","link":"https://kane.mx/tags/trouble-shooting/","section":"tags","tags":null,"title":"trouble-shooting"},{"body":"V秘开发团队一直使用着Jenkins CI来持续集成V秘服务的新功能和各种改进。近日，Jenkins CI在重启之后，很多已有任务的配置无法被Jenkins CI完整的加载，导致很多功能无法使用。导致我们整个网站的各种服务无法被升级更新了:-(\nJenkins CI在管理控制台列出如下的错误信息，示意现有任务的部分配置由于错误无法加载。\nCannotResolveClassException: hudson.plugins.git.GitSCM, CannotResolveClassException: com.cloudbees.jenkins.plugins.BitBucketTrigger, CannotResolveClassException: hudson.plugins.emailext.ExtendedEmailPublisher, CannotResolveClassException: hudson.plugins.parameterizedtrigger.BuildTrigger 通过上面的错误信息，我们初步认为错误是由于插件无法被Jenkins CI加载。但是通过Jenkins CI的插件管理列表，我们发现Git插件已经被认为是安装的了。同时我们也可以在Jenkins CI安装目录中找到插件对应的文件git.jar，并且成功验证了类hudson.plugins.git.GitSCM也是存在在jar文件里面的。重新安装Git client插件也不能解决这个错误！\n经过进一步的分析，通过Jenkins CI的系统日志，我们发现Git插件虽然是成功安装了，但是它所依赖的某些插件没有被安装！这导致Jenkins CI无法正确加载Git插件。通过日志的提示，将缺失的插件一一安装上，重启Jenkins CI后，插件加载正常，任务执行也恢复正常。\n这个错误出现的还是相当奇怪。因为Jenkins CI会在安装插件的时候将依赖的插件一并安装上。此外该Jenkins CI已经运行很久了，这些插件也是一直安装着的。不过现在回想起之前升级Jenkins CI插件的时候，部分插件由于网络原因升级失败了，但是没有重新更新。这导致这些插件处在了一个不正确的状态。在重启Jenkins CI后，这些插件被标记为未安装，导致依赖它们的插件无法加载。\n","link":"https://kane.mx/posts/2016/how-to-fix-jenkins-fail-to-load-job-config/","section":"posts","tags":["Jenkins","trouble-shooting"],"title":"如何修复Jenkins CI无法读取存在的任务配置"},{"body":"","link":"https://kane.mx/tags/mongodb/","section":"tags","tags":null,"title":"MongoDB"},{"body":"MongoDB是目前最为流行的NoSQL数据库之一。V秘的后台数据就是保存在MongoDB中的哦;)\n尽管MongoDB的性能为业界称道，但任何数据库系统使用中都存在着慢查询的问题。慢查询的性能问题，可能是由于使用非最优的查询语句，不正确的索引或其他配置原因导致的。但开发人员或数据库维护人员首先要找出这些低效的查询，才能做出对应的查询优化。\n在MongoDB中实现慢查询的profile是非常容易，因为MongoDB内置了profile开关来记录执行时间触发了profile条件的查询。\n参照db.setProfileLevel()的文档，通过以下命令就可以记录执行时长超过300ms的查询。\n1db.setProfilingLevel(1, 300) 当慢查询被重现后，可以通过查找system.profile collection来查看执行时长超过300ms的查询。\n被profiler记录下来慢查询record看起来如下，\n1{ 2 \u0026#34;op\u0026#34; : \u0026#34;query\u0026#34;, 3 \u0026#34;ns\u0026#34; : \u0026#34;myCollection\u0026#34;, 4 \u0026#34;query\u0026#34; : { 5 \u0026#34;builds\u0026#34; : { 6 \u0026#34;$elemMatch\u0026#34; : { 7 \u0026#34;builtTime\u0026#34; : null, 8 \u0026#34;$and\u0026#34; : [ 9 { 10 \u0026#34;createdTime\u0026#34; : { 11 \u0026#34;$lt\u0026#34; : ISODate(\u0026#34;2016-09-20T20:07:00.796Z\u0026#34;) 12 } 13 } 14 ] 15 } 16 } 17 }, 18 \u0026#34;ntoreturn\u0026#34; : 0, 19 \u0026#34;ntoskip\u0026#34; : 0, 20 \u0026#34;nscanned\u0026#34; : 0, 21 \u0026#34;nscannedObjects\u0026#34; : 18231, 22 \u0026#34;keyUpdates\u0026#34; : 0, 23 \u0026#34;writeConflicts\u0026#34; : 0, 24 \u0026#34;numYield\u0026#34; : 577, 25 \u0026#34;locks\u0026#34; : { 26 \u0026#34;Global\u0026#34; : { 27 \u0026#34;acquireCount\u0026#34; : { 28 \u0026#34;r\u0026#34; : NumberLong(1156) 29 } 30 }, 31 \u0026#34;Database\u0026#34; : { 32 \u0026#34;acquireCount\u0026#34; : { 33 \u0026#34;r\u0026#34; : NumberLong(578) 34 } 35 }, 36 \u0026#34;Collection\u0026#34; : { 37 \u0026#34;acquireCount\u0026#34; : { 38 \u0026#34;r\u0026#34; : NumberLong(578) 39 } 40 } 41 }, 42 \u0026#34;nreturned\u0026#34; : 2, 43 \u0026#34;responseLength\u0026#34; : 98076, 44 \u0026#34;millis\u0026#34; : 11161, 45 \u0026#34;execStats\u0026#34; : { 46 \u0026#34;stage\u0026#34; : \u0026#34;COLLSCAN\u0026#34;, 47 \u0026#34;filter\u0026#34; : { 48 \u0026#34;builds\u0026#34; : { 49 \u0026#34;$elemMatch\u0026#34; : { 50 \u0026#34;$and\u0026#34; : [ 51 { 52 \u0026#34;$and\u0026#34; : [ 53 { 54 \u0026#34;createdTime\u0026#34; : { 55 \u0026#34;$lt\u0026#34; : ISODate(\u0026#34;2016-09-20T20:07:00.796Z\u0026#34;) 56 } 57 } 58 ] 59 }, 60 { 61 \u0026#34;builtTime\u0026#34; : { 62 \u0026#34;$eq\u0026#34; : null 63 } 64 } 65 ] 66 } 67 } 68 }, 69 \u0026#34;nReturned\u0026#34; : 2, 70 \u0026#34;executionTimeMillisEstimate\u0026#34; : 11080, 71 \u0026#34;works\u0026#34; : 18233, 72 \u0026#34;advanced\u0026#34; : 2, 73 \u0026#34;needTime\u0026#34; : 18230, 74 \u0026#34;needFetch\u0026#34; : 0, 75 \u0026#34;saveState\u0026#34; : 577, 76 \u0026#34;restoreState\u0026#34; : 577, 77 \u0026#34;isEOF\u0026#34; : 1, 78 \u0026#34;invalidates\u0026#34; : 0, 79 \u0026#34;direction\u0026#34; : \u0026#34;forward\u0026#34;, 80 \u0026#34;docsExamined\u0026#34; : 18231 81 }, 82 \u0026#34;ts\u0026#34; : ISODate(\u0026#34;2016-09-20T23:07:14.313Z\u0026#34;), 83 \u0026#34;client\u0026#34; : \u0026#34;10.171.127.66\u0026#34;, 84 \u0026#34;allUsers\u0026#34; : [ 85 { 86 \u0026#34;user\u0026#34; : \u0026#34;dbuser\u0026#34;, 87 \u0026#34;db\u0026#34; : \u0026#34;mydb\u0026#34; 88 } 89 ], 90 \u0026#34;user\u0026#34; : \u0026#34;dbuser@mydb\u0026#34; 91} 上面的数据具体解读如下，\nop: 'query'表示执行的是查询， ns是指查询的collection， query是具体的查询语句， 核心部分是execStats，给出了的查询语句具体执行统计，跟**.explain('execStats')**的内容是一致的。上面的统计是说，这个query执行了整个collection的扫描(总计扫描了18231个文档)，最终返回了2条文档，花费了11080ms，也就是11s还多的时间！这表明被记录下的慢查询跟collection的索引设置有问题，该查询没有用上索引。解决方案很简单，改善查询语句使用存在的索引或者设置合理的索引。 ts是查询开始请求的时间， allUsers和user都是MongoDB client连接所使用的用户。 ","link":"https://kane.mx/posts/2016/how-to-find-slow-queries-in-mongodb/","section":"posts","tags":["MongoDB","performance-tuning"],"title":"MongoDB中如何找出慢查询"},{"body":"Swarm mode在Docker v1.12中正式发布，Swarm mode带来了诸如Docker集群，容器编排，多主机网络等激动人心的特性。V秘团队也尝试着将各种后台服务部署到Docker Swarm Cluster获取更好的弹性计算能力。\nDocker v1.12中正式发布的Docker Swarm在我们实用中发现仍有不少不足之处，让我们一一分享给大家。\n无法将服务的published端口只绑定到特点的网卡上。比如我们的云主机（同时也是Swarm manager/node）有eth0和eth1两块网卡，分别连接内网和外网。我们计划在Docker Swarm中运行一个nginx服务，通过80/443端口提供HTTP/HTTPS服务。当我们希望将nginx中的Web服务暴露在云主机上时，我们通过以下命令创建nginx服务。然而我们无法选择将published的80端口绑定在哪个interface上。Docker Swarm会自动将服务监听到Swarm node的所有80端口上。如果我们只想将这个服务暴露在内网interface暂时无法实现。 1docker service create --name vme-nginx --network vme-network --replicas 1 \\ 2 --publish 80:80 --publish 443:443 \\ 3 nginx:1.11 无法为Docker Swarm内运行的服务设置主机名。通过docker run命令执行的容器可以设置hostname。比如， 1docker run --hostname vme-nginx nginx:1.11 但是docker service create命令缺少等价的参数为容器指定hostname。一些依赖于hostname的服务将无法部署在Docker Swarm中，比如clustered rabbitmq。 Docker compose还不能与Docker Swarm完美集成。目前有一个experimental的Docker Stacks and Distributed Application Bundles在尝试做更好的整合。 docker service update有时不能更新正在运行中的container。更多讨论见这个issue。 ","link":"https://kane.mx/posts/2016/the-limitations-docker-swarm-mode-v1.12/","section":"posts","tags":["docker","docker-swarm"],"title":"Docker Swarm mode(v1.12.x)的一些使用限制"},{"body":"","link":"https://kane.mx/tags/docker-swarm/","section":"tags","tags":null,"title":"docker-swarm"},{"body":"","link":"https://kane.mx/tags/ubuntu-1404/","section":"tags","tags":null,"title":"ubuntu-1404"},{"body":"V秘团队一直致力于用技术改善产品。V秘后台的各种服务一直是通过完善的Devops流程自动部署到Docker容器集群。随着Swarm mode在Docker v1.12中正式发布，Swarm mode带来了诸如Docker集群，多主机网络等激动人心的特性。我们也在尝试将V秘服务部署到Docker Swarm Cluster获取更好的弹性计算能力。\n然而我们将V秘的服务部署到Docker Swarm Cluster时遇到服务容器无法启动的错误。错误信息类似如下，\nstarting container failed: could not add veth pair inside the network sandbox: could not find an appropriate master \u0026quot;ov-000100-1wkbc\u0026quot; for \u0026quot;vethee39f9d\u0026quot;\n经过与Docker 社区的回馈讨论，暂时通过升级Docker主机(OS: Ubuntu 14.04 LTS)的内核版本解决了这个错误。\n具体方法如下，\n1root@swarm1:~# uname -r 23.13.0-32-generic 3 4root@swarm1:~# apt-get install linux-generic-lts-vivid 5root@swarm1:~# reboot 6 7root@swarm1:~# uname -r 83.19.0-69-generic 至于这个错误的根本原因是Docker的bug还是对Linux Kernel有特殊的要求，需要Docker开发进一步确认。如果对此问题有更多兴趣，可以关注docker issue #25039。\n","link":"https://kane.mx/posts/2016/docker-swarm-mode-in-ubuntu-1404/","section":"posts","tags":["docker","docker-swarm","ubuntu-1404"],"title":"创建于Docker Swarm的服务无法在Ubuntu 14.04 LTS中运行"},{"body":"","link":"https://kane.mx/tags/angularjs/","section":"tags","tags":null,"title":"angularjs"},{"body":"","link":"https://kane.mx/tags/nginx/","section":"tags","tags":null,"title":"nginx"},{"body":"","link":"https://kane.mx/tags/seo/","section":"tags","tags":null,"title":"seo"},{"body":"","link":"https://kane.mx/tags/single-page-app/","section":"tags","tags":null,"title":"single-page-app"},{"body":"在之前的文章我曾提到基于Angularjs的单页面应用在用户体验上的种种好处。然而任何事情都不是完美的，Angular和类似的框架通过应用内做页面路由的实现给SEO（也俗称搜索引擎优化）带来了不少麻烦。\n首先，我们来看看页面内路由是如何实现的。默认Angularjs生成的页面uri类型如下，\nhttp://mydomain.com/#/app/page1\n浏览器请求上面这个uri的时候，实际发送给服务器的请求地址是http://mydomain.com/, web服务器会将默认的页面响应给浏览器，比如index.html或index.php等。\n浏览器返回的页面里面引入了Angularjs和其他应用需要的JS库。Angularjs应用开始执行后，尝试处理路由**/app/page1**。如果应用定义了该路由，将加载必要的JS库和其他html片段来完成页面的渲染。\n理解了Angularjs页面内路由的原理后，我们知道了对浏览器或搜索引擎爬虫而言，单页面应用所有的页面对浏览器和搜索引擎都是一个网址，比如http://mydomain.com/。这样对爬虫抓取站内链接造成了困难，因为所有应用内的链接都被认做了同一个链接。\n我们理解了uri http://mydomain.com/#/app/page1给SEO造成的麻烦，接下来就是讨论如何针对SEO来作的优化。\n最理想的情况当然是搜索引擎爬虫变的更加智能，它能理解网站的框架，并且针对此种情况做出优化。但截止到目前，包括Google在内的所有爬虫都无法做到这点。那我们SEO的优化只能在应用这边来做了。\nAngularjs提供了一种HTML5 mode模式可以利用HTML5 History API来实现页面内路由。打开的方法如下，\n1$locationProvider.html5Mode(true); 同时在index.html页面加上如下标签，\n1\u0026lt;base href=\u0026#34;/\u0026#34;\u0026gt; 在打开HTML5 mode后的Angularjs应用的链接看起来就是这样了，\nhttp://mydomain.com/app/page1\n新的链接模式和站内跳转通过访问网站主页请求将没有任何问题。然而直接在浏览器请求如上链接的话，Web服务器将尝试请求/app/page1，通常会得到404的页面响应。因为服务器上并没有部署页面/app/page1。\n这时就需要在Web应用服务器或应用里面实现URL Rewrite。将/app/page1的请求转到单页面应用html文件上。\n下面是一些Web服务器或应用的参考配置，\nApache Rewrites\n1\u0026lt;VirtualHost *:80\u0026gt; 2 ServerName my-app 3 4 DocumentRoot /path/to/app 5 6 \u0026lt;Directory /path/to/app\u0026gt; 7 RewriteEngine on 8 9 # Don\u0026#39;t rewrite files or directories 10 RewriteCond %{REQUEST_FILENAME} -f [OR] 11 RewriteCond %{REQUEST_FILENAME} -d 12 RewriteRule ^ - [L] 13 14 # Rewrite everything else to index.html to allow html5 state links 15 RewriteRule ^ index.html [L] 16 \u0026lt;/Directory\u0026gt; 17\u0026lt;/VirtualHost\u0026gt; Nginx Rewrites\n1server { 2 server_name my-app; 3 4 root /path/to/app; 5 6 location / { 7 try_files $uri $uri/ /index.html; 8 } 9} Azure IIS Rewrites\n1\u0026lt;system.webServer\u0026gt; 2 \u0026lt;rewrite\u0026gt; 3 \u0026lt;rules\u0026gt; 4 \u0026lt;rule name=\u0026#34;Main Rule\u0026#34; stopProcessing=\u0026#34;true\u0026#34;\u0026gt; 5 \u0026lt;match url=\u0026#34;.*\u0026#34; /\u0026gt; 6 \u0026lt;conditions logicalGrouping=\u0026#34;MatchAll\u0026#34;\u0026gt; 7 \u0026lt;add input=\u0026#34;{REQUEST_FILENAME}\u0026#34; matchType=\u0026#34;IsFile\u0026#34; negate=\u0026#34;true\u0026#34; /\u0026gt; 8 \u0026lt;add input=\u0026#34;{REQUEST_FILENAME}\u0026#34; matchType=\u0026#34;IsDirectory\u0026#34; negate=\u0026#34;true\u0026#34; /\u0026gt; 9 \u0026lt;/conditions\u0026gt; 10 \u0026lt;action type=\u0026#34;Rewrite\u0026#34; url=\u0026#34;/\u0026#34; /\u0026gt; 11 \u0026lt;/rule\u0026gt; 12 \u0026lt;/rules\u0026gt; 13 \u0026lt;/rewrite\u0026gt; 14\u0026lt;/system.webServer\u0026gt; Express Rewrites\n1var express = require(\u0026#39;express\u0026#39;); 2var app = express(); 3 4app.use(\u0026#39;/js\u0026#39;, express.static(__dirname + \u0026#39;/js\u0026#39;)); 5app.use(\u0026#39;/dist\u0026#39;, express.static(__dirname + \u0026#39;/../dist\u0026#39;)); 6app.use(\u0026#39;/css\u0026#39;, express.static(__dirname + \u0026#39;/css\u0026#39;)); 7app.use(\u0026#39;/partials\u0026#39;, express.static(__dirname + \u0026#39;/partials\u0026#39;)); 8 9app.all(\u0026#39;/*\u0026#39;, function(req, res, next) { 10 // Just send the index.html for other files to support HTML5Mode 11 res.sendFile(\u0026#39;index.html\u0026#39;, { root: __dirname }); 12}); 13 14app.listen(3006); //the port you want to use ASP.Net C# Rewrites\n1private const string ROOT_DOCUMENT = \u0026#34;/default.aspx\u0026#34;; 2 3protected void Application_BeginRequest( Object sender, EventArgs e ) 4{ 5 string url = Request.Url.LocalPath; 6 if ( !System.IO.File.Exists( Context.Server.MapPath( url ) ) ) 7 Context.RewritePath( ROOT_DOCUMENT ); 8} ","link":"https://kane.mx/posts/2016/seo-optimization-for-angularajs-based-app/","section":"posts","tags":["angularjs","single-page-app","seo","nginx","搜索引擎优化"],"title":"基于Angularjs单页面应用的SEO优化"},{"body":"","link":"https://kane.mx/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/","section":"tags","tags":null,"title":"搜索引擎优化"},{"body":"","link":"https://kane.mx/tags/session-management/","section":"tags","tags":null,"title":"session-management"},{"body":"","link":"https://kane.mx/tags/spring-boot/","section":"tags","tags":null,"title":"spring-boot"},{"body":"","link":"https://kane.mx/tags/spring-framework/","section":"tags","tags":null,"title":"spring-framework"},{"body":"","link":"https://kane.mx/tags/spring-session/","section":"tags","tags":null,"title":"spring-session"},{"body":"在微服务和容器等技术的帮助下，Web应用可以较为容易的进行水平扩展，来部署更多的应用实例来提升请求处理数QPS。当Web服务有状态的时候，如何在集群下管理用户session成为新的待解决问题。\nSpring Framework针对此问题衍生出了一个子项目Spring Session来实现集群下的session管理。该项目提供了以下功能：\n提供API和实现管理用户session HttpSession - 替换实现应用容器(tomcat)中的HttpSession Clustered Sessions - 实现集群的session而不依赖任何应用容器特定的解决方案 Multiple Browser Sessions - 支持多个用户session保存在同一个浏览器实例中 (例如，类似Google的多用户认证). RESTful APIs - 通过支持session ids在Http请求头来支持Restful API的认证 WebSocket - 能够保证HttpSession的存活当在接受WebSocket消息时 从上面的功能列表中，我们可以看到Spring Session能够满足集群下各种session的使用场景和需求。\nSpring Session在1.0.0 GA可以使用Redis做为session储存的backend。\n通过changelog，在最新的1.1.0 GA中支持自定义Cookie的创建，允许自定义Cookie的过期时间，作用域等。在即将发布的1.2.0 GA版本中，将添加支持JDBC的关系数据库和MongoDB作为session保存的backend。\n此外，Spring Session同Spring-boot的应用有很好的集成，只需要十多行代码及配置即可集成！\n","link":"https://kane.mx/posts/2016/clustered-session-under-spring-framework/","section":"posts","tags":["web-2.0","session-management","spring-framework","spring-session","spring-boot"],"title":"Spring框架下的分布式session管理"},{"body":"","link":"https://kane.mx/tags/web-2.0/","section":"tags","tags":null,"title":"web-2.0"},{"body":"","link":"https://kane.mx/tags/architecture/","section":"tags","tags":null,"title":"architecture"},{"body":"春天来了，V秘大家庭也新增了两位10后的传人。新爸爸经过一番忙乱后，希望在这里与大家分享V秘的架构，共同探讨如何快速的构建高可用，高性能的Web服务。\nV秘致力于提供最好的在线视频制作云平台。让用户随时随地零门槛的快速制作出高质量高清晰度的视频，来纪念记录生活中有意义的时刻，同时将这份快乐传递给更多的家人朋友一起分享。\n然而要可靠的可扩展的实现这样看似简单的需求，其背后确由众多知名开源技术，可靠的云服务，不间歇的监控运维来实现和保证的。\nV秘架构的基本目标就是要实现，\n服务的高扩展性。有有效可靠的方法支撑数万并发到数十万，百万及更多的并发请求。 服务的高可用性。各种服务都是多实例的集群，某些服务故障后，集群中的其他实例仍然能够提供服务。 服务的自动化构建。从代码到服务部署上线是一套自动化的流程，越少的人工介入保证了服务的可用性。 系统的实时监控。7x24小时的监控保证服务的可用性，当监控到数据异常或服务停止运行能及时告警引入人工运维团队。 更多细节请参阅下面的slides,\nHow we build Videome from Meng Xin Zhu 欢迎留言与我们探讨你的心得和建议。\n","link":"https://kane.mx/posts/2016/how-we-build-videome/","section":"posts","tags":["web-2.0","architecture","网站架构"],"title":"V秘是如何构建的"},{"body":"","link":"https://kane.mx/tags/%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84/","section":"tags","tags":null,"title":"网站架构"},{"body":"","link":"https://kane.mx/tags/aliyun/","section":"tags","tags":null,"title":"aliyun"},{"body":"","link":"https://kane.mx/tags/oss/","section":"tags","tags":null,"title":"oss"},{"body":"","link":"https://kane.mx/tags/ossfs/","section":"tags","tags":null,"title":"ossfs"},{"body":"阿里云提供的对象或者文件存储叫OSS，为应用程序提供了海量存储，按需付费等服务。应用程序则需要通过Aliyun OSS的各语言SDK才能操作（读，写，遍历等）OSS中的文件。\n对运维人员来说，做一些数据维护工作的时候，通过SDK操作OSS中的文件就会比较麻烦。在linux/unix环境下，通常有一些工具把远程文件系统或云盘挂载为本地文件。在网络状况比较好的情况下，操作远程文件就像操作本地文件一样。例如，把Amazon S3，Dropbox云盘，可通过ssh登录的远程服务器上的磁盘挂载为本地文件系统。\n之前也有第三方公司开发的工具把OSS bucket挂载为本地磁盘。出于安全考虑一直为敢使用。\n终于，阿里云推出了官方开源版本的ossfs，并且提供技术支持（通过工单）。\n接下来，聊聊我的使用体会。\n安装，配置都还简单。 文档看起来比较详细，但实际操作起来有些就不对。感觉写文档的人，并没有在相应环境上测试过。 权限设计的一塌糊涂。ossfs基于FUSE，理当允许非root挂载或卸载OSS bucket。非root用户使用ossfs挂载的文件默认的owner都是root! 还好目前有workaround，挂载的时候指定参数，-ouid=your_uid -ogid=your_gid来指定文件的owner。 性能极其低下！！！一台ECS主机挂载了一个使用内网地址的oss bucket，bucket根下面有2k+子目录（对文件系统而言）,bucket内文件总计有28G。然而执行ls /tmp/\u0026lt;bucket mount point\u0026gt;超过10分钟都无法完成。而我们V秘之前用Java实现的AliyunOSSFS执行同样的操作只需要数秒。 阿里云相关的技术支持人员及其不专业。很多文件系统，FUSE等概念都不甚了解。跟他们沟通这些技术问题，首先要花时间进行教育。花费大量时间来沟通，进展确缓慢。 总之，阿里云ossfs这个工具远远没有达到production ready的质量。无法使用到生产环境中。 ","link":"https://kane.mx/posts/2016/aliyun-ossfs-sucks/","section":"posts","tags":["aliyun","oss","ossfs","阿里云"],"title":"说一说阿里云ossfs"},{"body":"","link":"https://kane.mx/tags/wechat/","section":"tags","tags":null,"title":"wechat"},{"body":"","link":"https://kane.mx/tags/weixin/","section":"tags","tags":null,"title":"weixin"},{"body":"","link":"https://kane.mx/tags/%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/","section":"tags","tags":null,"title":"公众平台"},{"body":"微信给公众平台提供了素材管理的接口，通过这一系列接口可以上传，接收以及管理图片，视频等多媒体文件。其中又分为临时和永久两种类型。永久素材有总量的限制，临时素材微信服务器只给保存3天。\n最近V秘刚好有个同微信用户互动的场景，为用户美化微信拍摄的小视频。V秘后台服务器收到用户发送过来小视频（微信将其认做临时素材），将其美化处理后，再将美化的视频上传为临时素材，最终美化后的视频作为视频类型的客服消息被推送给用户。整个流程很简洁，用户发送小视频后，就坐等观看美化后的小视频了。\n然而最终经过V秘开发团队的实践及测试，得出的结论是，\n##微信公众平台的临时素材不能用！绝对的鸡肋！\n公众平台上传素材的API以及使用已有素材发送视频消息API都很健壮。但问题出在了微信后台资源的服务上面。\n开发者把图片视频成功上传为临时素材后，会从微信的接口得到这个素材的ID。这个ID随后作为给用户发送图文消息或视频消息的资源。微信后台会把这个ID对应到素材的真实URL路径上。这个过程是没有问题的。同时微信作为一个拥有海量用户的软件，它会将这些将要推送给用户的素材都发布到它的CDN。用户收到的最终图片视频的地址就是素材文件在微信/腾讯CDN上的地址。对CDN有了解的朋友都知道，CDN服务器分散在全国或全世界各地，当用户请求这个资源的时候，请求会被路由到离用户最近的CDN服务器上。当CDN服务器上还没有缓存请求的资源时，这时候有个溯源的过程。就是原始文件从文件服务器传送到该CDN服务器的一个过程。这时，用户有一个额外的等待，等待时间取决于文件大小和CDN服务器和文件服务器间的带宽。\n微信用来给公众号放置临时素材的CDN在这一块出了问题。在我们的测试中，微信CDN可能一直无法提供这些临时素材（某些文件超过1天后仍然无法访问）。而且出现错误的几率相当高，至少20%以上。由于CDN无法为临时素材提供可靠的访问保障，所以我们得出微信给公众号临时素材这个功能基本就是不能用。\n","link":"https://kane.mx/posts/2016/weixin-temporary-materials/","section":"posts","tags":["weixin","wechat","微信","公众平台"],"title":"如何使用微信公众平台的临时素材"},{"body":"","link":"https://kane.mx/tags/%E5%BE%AE%E4%BF%A1/","section":"tags","tags":null,"title":"微信"},{"body":"","link":"https://kane.mx/tags/pay/","section":"tags","tags":null,"title":"pay"},{"body":"随着AngularJS等前端MVC框架的流行，AJAX的异步请求数据结合H5的push state等特性，极大的改善了网站的用户体验和页面加载性能。这类网站应用通常只有一个入口页面，通过应用内路由到不同的页面，所以俗称单页面(signle page application)应用。页面URL看起来如下，\n网站首页 http://mysite.com/#/index 商品列表页 http://mysite.com/#/goods/list 商品详情页 http://mysite.com/#/goods/skuid 网站关于页 http://mysite.com/#/about 对浏览器而言，上面几个地址都是访问的网站**/目录，每个url不同的是hash部分。而AngularJS**正是依赖页面的hash来做的应用内路由，根据不同的路由来加载不同的js和html片段，实现动态内容的加载。\n世上并没有绝对完美的事情，单页面应用在用户体验和性能上获得了好处。然而，在别的地方必然付出代价。这里就分享一下单页面应用和微信支付集成的一些经验。\n这里的微信支付指的是，在微信浏览器中通过JS接口调起微信支付来完成网页应用中商品的购买。微信支付本身的开发集成并不复杂，这里就不赘述了。微信支付出于安全考虑，要求公众号必须注册支付发起页面的地址（到支付页面的上级目录为止），并且能够添加到白名单的地址不超过3个。也就是如果应用在商品详情页发起支付请求，那么地址**http://mysite.com/#/goods/**必须在白名单列表。\n目前为止，一切都很好理解，把支付页面加到微信支付白名单不就万事大吉了。可经过实测，事实确不是这么简单！\n在微信iOS版本中，微信支付JS会错误的使用landing网站页面的URL，而不是发起支付的页面URL！比如用户通过网站首页**http://mysite.com/#/index进入应用，通过站内链接浏览到了某商品详情页http://mysite.com/#/goods/skuid并发起了支付。但微信JS会把landing页面URLhttp://mysite.com/#/index**判定为支付的发起页面，从而导致支付JS调用失败！\n因为应用存在多个页面，不可能把所有的页面都加到支付白名单中(有3个数目限制，并且工作量也大到不现实)。要解决这个问题，只好另辟蹊径。我目前找到的方法是，强制刷新页面当打开商品详情页的时候。等同于直接在微信浏览器中打开了商品详情页。虽然对用户体验有些影响，但支付功能正常工作了。\n","link":"https://kane.mx/posts/2016/single-page-app-meets-weixin-pay/","section":"posts","tags":["weixin","wechat","pay","支付"],"title":"单页面应用(single page application)中使用微信支付"},{"body":"","link":"https://kane.mx/tags/%E6%94%AF%E4%BB%98/","section":"tags","tags":null,"title":"支付"},{"body":"最近在提交前端代码后，前端代码的自动发布老是失败。失败的原因多是编译Docker镜像时在执行COPY语句拷贝文件到镜像文件系统时，扔出了'No space left on device'这个错误。这个错误根据描述非常好理解，就是docker文件系统所在磁盘没有了空间。\n但是通过df -h命令，该磁盘至少还有3，4个G的剩余空间。而前端镜像的文件大小最多也不超过300M。在该磁盘通过touch,cp仍然可以创建文件。\n所以这个问题非常奇怪，为什么docker或者操作系统抱怨磁盘没有了空间？在磁盘仍然剩余数个G的情况下？\n再通过相关的查找后，docker的这个issue给了我启发。Linux文件系统的inode在耗尽后，该文件系统将不能再创建新文件。因为前端页面是基于nodejs的程序，它依赖的packages产生了大量文件，在反复制作不同的docker images时，这些依赖文件又被反复复制，导致文件数量远远超过了默认inode和磁盘大小的比例，最终inode先于磁盘空间被全部使用。\n遇到类似问题的同学，可以通过df -i查看inode的使用情况来排查问题是否由于inode耗尽导致这个错误。\n","link":"https://kane.mx/posts/2016/docker-build-no-space-left-caused-by-inode-exhausted/","section":"posts","tags":["docker","troubleshoot"],"title":"文件系统的Inode耗尽，会导致Docker编译镜像出现'No space left on device'错误"},{"body":"","link":"https://kane.mx/tags/daemon/","section":"tags","tags":null,"title":"daemon"},{"body":"Recently I wrote a Linux like initd script to start/stop my web application.\nThe script works well when running it in shell of linux. The web application will run in background by daemon.\nHowever I found both daemon and web application(java) exited immediately if I started the script in Jenkins as a shell step of build process.\nI put below simple script in 'Execute shell' block,\n1daemon --name=test-daemon -- sleep 200sleep 60 The process 'daemon' and 'sleep 200' should exit after 200 seconds the 'sleep' exits. The jenkins job will be finished in 60 secs.\njenkins 9954 9950 0 21:48 ? 00:00:00 sleep 60 jenkins 9955 1 0 21:48 ? 00:00:00 daemon —name=test-daemon — sleep 200 jenkins 9956 9955 0 21:48 ? 00:00:00 sleep 200 Above is the process info queried via ps command. The father pid of daemon is 1, not the script generated by Jenkins.\nBut both the process 'daemon' and 'sleep 200' immediately exited when the script finished. Should be something wrong in Jenkins to cause daemon exited unexpected.\nIt's something really frustrating to use daemon to stop/start the web application in Jenkins.\nFinally I used docker container to run my web application, which easily can be stopped/started via script in Jenkins.\n","link":"https://kane.mx/posts/archive/blogspot/daemon-hell-in-jenkins/","section":"posts","tags":["docker","daemon","jenkins","jenkins-cli"],"title":"Daemon hell in Jenkins"},{"body":"","link":"https://kane.mx/tags/jenkins-cli/","section":"tags","tags":null,"title":"jenkins-cli"},{"body":"","link":"https://kane.mx/tags/java/","section":"tags","tags":null,"title":"Java"},{"body":"","link":"https://kane.mx/tags/mac-osx/","section":"tags","tags":null,"title":"Mac OSX"},{"body":"After uninstalling some applications from my Mac OSX, I found the applications that depends on JRE totally does not work. I noticed below symptoms,\nEclipse Mars can not be launched, even though I specified the launching vm to another one(`java -version` still work). The SWT native library failed to resolve the dependencies to '/System/Library/Frameworks/JavaVM.framework/Versions/A/JavaVM' which does not exists. I tried to reinstall Oracle 1.8.0_u45 via both brew and dmg image downloaded from Oracle website, both ways were failed as well. The Mac pkg Installer can not be started due to dylib broken. It means I can't install any pkg via GUI. The command line(such as sudo installer -verboseR -target / -pkg /Volumes/OS\\ X\\ 10.10.4\\ Update\\ Combo/OSXUpdCombo10.10.4.pkg) still works. Finally I realized the problem was caused by I uninstalled the out of date Apple Java 6. Looks like all of above failures are required the system built-in Java. It really does not make sense the Oracle 1.8 installer script to depend on the out of date Java.\nFinally I reinstalled Java for OS X 2014-001 to make everything working again. The GUI installer for pkg still does not work, you need use below command to use the pkg.\nsudo installer -verboseR -target / -pkg /Volumes/Java\\ for\\ OS\\ X\\ 2014-001/JavaForOSX.pkg\n","link":"https://kane.mx/posts/archive/blogspot/the-symptoms-of-java-broken-in-mac-osx/","section":"posts","tags":["Java","Mac OSX","troubleshoot"],"title":"The symptoms of Java broken in Mac OSX 10.10 and fix solution"},{"body":"","link":"https://kane.mx/tags/groovy/","section":"tags","tags":null,"title":"groovy"},{"body":"Jenkins supports ssh authentication in CLI.\nBelow is a command to verify that I am authenticated:\n1 2java -jar jenkins-cli.jar -s http://myserver/jenkins who-am-i 3 4 Authenticated as: myuser 5 Authorities: 6 authenticated However you still would meet permission error when running groovy script in CLI.\n1 2java -jar jenkins-cli.jar -s http://myserver/jenkins groovysh \u0026#39;jenkins.model.Jenkins.instance.pluginManager.plugins.each { println(\u0026#34;${it.longName} - ${it.version}\u0026#34;) };\u0026#39; 3 4Exception in thread \u0026#34;main\u0026#34; java.lang.reflect.UndeclaredThrowableException 5at $Proxy2.main(Unknown Source) 6at hudson.cli.CLI.execute(CLI.java:271) 7at hudson.cli.CLI._main(CLI.java:417) 8at hudson.cli.CLI.main(CLI.java:322) It's a bug of Jenkins. The workaround is create a groovy script, then run that script via Jenkins CLI.\n1java -jar jenkins-cli.jar -s http://myserver/jenkins/ groovy test_script.gsh ","link":"https://kane.mx/posts/archive/blogspot/run-groovy-script-via-jenkins-cli/","section":"posts","tags":["groovy","jenkins","jenkins-cli"],"title":"Run groovy script via Jenkins CLI"},{"body":"","link":"https://kane.mx/tags/lucene/","section":"tags","tags":null,"title":"lucene"},{"body":"","link":"https://kane.mx/tags/solr/","section":"tags","tags":null,"title":"solr"},{"body":"The index has a field named 'create_time' that is the timestamp of document created time. The query string can boost the latest created document like below,\n{!boost b=recip(ms(NOW,create_time),3.16e-11,0.08,0.05)}name:keyword\nThere is another field named 'important' that indicates whether the document is important or not. The query string can boost the document is important like below,\nq={!boost b=$importfunc}name:keyword\u0026amp;importfunc=query({!v='important:true'})\nAbove query string uses a sub query in boost function.\nFinally I want to boost both above two fields, and 'important' field has higher priority. The query string looks like below,\ndefType=edismax\u0026amp;q=name:keyword\u0026amp;bf=query({!v='import:true'})^20.0 recip(ms(NOW,create_time),3.16e-11,0.08,0.05)^10.0\u0026quot;)\n","link":"https://kane.mx/posts/archive/blogspot/solr-boost-examples/","section":"posts","tags":["lucene","solr"],"title":"Solr boost examples"},{"body":"","link":"https://kane.mx/tags/django/","section":"tags","tags":null,"title":"django"},{"body":"It's a common and ugly problem when using non-ascii characters in Django.\nThe general solution is below,\nput # -- coding: utf-8 -- at beginning of every python source files that are using utf-8 characters declare every string variable as unicode, such as str_var = u'中文字符' add a __unicode__ method in your model classes if you are running server on apache/mod_wsgi or ngnix, you need configure web server to use utf-8 encoding ","link":"https://kane.mx/posts/archive/blogspot/djangos-unicdoe-encode-error/","section":"posts","tags":["django","encoding","python"],"title":"Django's unicdoe encode error"},{"body":"","link":"https://kane.mx/tags/encoding/","section":"tags","tags":null,"title":"encoding"},{"body":"","link":"https://kane.mx/tags/python/","section":"tags","tags":null,"title":"python"},{"body":"","link":"https://kane.mx/tags/eclipse/","section":"tags","tags":null,"title":"Eclipse"},{"body":"","link":"https://kane.mx/tags/mountain-lion/","section":"tags","tags":null,"title":"mountain lion"},{"body":"","link":"https://kane.mx/tags/php/","section":"tags","tags":null,"title":"php"},{"body":"I installed both Zend CE and zend debugger of Eclipse on my Mac. Both of them work well in Mac lion. However they don't work any more after I upgraded my Mac to mountain lion. After some investigation I found some extensions of Zend PHP can't be loaded due to shared library dependency can't be found in mountain lion. The xslt module of PHP depends on some system libraries(suc as /usr/local/libxslt-1.1.23/lib/libxslt.1.dylib) that have been removed by mountain lion.\nThe temporary solution is disabling xlst module of zend PHP if your application doesn't need them. The workaround fix of Zend CE on Mac, rename /usr/local/zend/lib/php_extensions/xsl.so to any other name\nThe workaround fix of zend debugger for Eclipse, Delete the line extension=xsl.so from file /plugins/org.zend.php.debug.debugger.macosx_5.3.18.v20110322/resources/php53/php.ini\n","link":"https://kane.mx/posts/archive/blogspot/workaround-of-making-zend-ce-mountain-lion/","section":"posts","tags":["zend ce","zend debugger","workaround","Eclipse","php","mountain lion"],"title":"The workaround of making Zend CE/Zend debugger work on mountain lion"},{"body":"","link":"https://kane.mx/tags/workaround/","section":"tags","tags":null,"title":"workaround"},{"body":"","link":"https://kane.mx/tags/zend-ce/","section":"tags","tags":null,"title":"zend ce"},{"body":"","link":"https://kane.mx/tags/zend-debugger/","section":"tags","tags":null,"title":"zend debugger"},{"body":"","link":"https://kane.mx/tags/dual-monitor/","section":"tags","tags":null,"title":"Dual monitor"},{"body":"I had two monitors for my workstation. One is 22' and the another is 17'. I used the small one as a extend desktop.\nToday I get a another 23' monitor to replace the small one. However the resolution of the 23' monitor can't be changed after pluging it in. It always used the resolution matching the 17' one.\nBoth 'Setting - Display' and 'AMD Catalyst control' can't adjust it as higher resolution.\nAfter some tuning, I found a workaround.\nI totally remove all config of small one from /etc/X11/xorg.conf. Then change its resolution in 'AMD Catalyst control', it works!\n","link":"https://kane.mx/posts/archive/blogspot/dual-monitors-on-ubuntu/","section":"posts","tags":["Tip","Ubuntu","Dual monitor","Trick"],"title":"Dual monitors on Ubuntu"},{"body":"","link":"https://kane.mx/tags/trick/","section":"tags","tags":null,"title":"Trick"},{"body":"","link":"https://kane.mx/tags/ubuntu/","section":"tags","tags":null,"title":"Ubuntu"},{"body":"I want to create a test server for my application. Using embedding Http server in equinox is my first option.\nI had experience using simple http service implementation of equinox, however I want to play with Jetty this time.\nFollowing the guide of Equinox server, I can't running a Jetty server with my servlet in Eclipse Indigo. Obviously the guide is out of date.\nAfter tuning it, I found below bundles are minimum collection to run Jetty inside OSGi runtime.\nYou only need create a run configuration of OSGi framework, add your bundles with servlets and above bundles.\n","link":"https://kane.mx/posts/archive/blogspot/embedding-http-server-in-equinox/","section":"posts","tags":["Equinox","Jetty","OSGi"],"title":"Embedding an HTTP server in Equinox"},{"body":"","link":"https://kane.mx/tags/equinox/","section":"tags","tags":null,"title":"Equinox"},{"body":"","link":"https://kane.mx/tags/jetty/","section":"tags","tags":null,"title":"Jetty"},{"body":"","link":"https://kane.mx/tags/osgi/","section":"tags","tags":null,"title":"OSGi"},{"body":"Sometimes I need access the Intranet of company, however I don't like to create VPN connection. The connection is slow, waste time to create the connection and have to change password due to security policy.\nMy workstation is Linux, which has a lot of utility tools to help me access Intranet at home without VPN.\nFirstly I set up a ssh server on my personal computer. It's quite easy if you are using Linux, for Windows I installed Copssh.\nThen register a free domain name and configure it in my router. And let router forward port 22(or any port you wan to use) to my personal computer.\nIn my working Linux machine, create a ssh tunnel to my personal computer. Must use the public/private key for authenticating. For example,\nIt means remote server can access my workstation's port 22 via accessing its port 1002 after the ssh tunnel is created successfully. Above command line also forwards the ports 5900 and 6500. The default VNC session will listen the port 5900.\nBut it only works when my personal computer is running. And the connection can't be reconnected after it fails once.\nThe graceful solution is installing 'autossh' in my Linux, which is an utility to retry the ssh connection with an interval if it's disconnected or failed.\nThen create a script and running it when OS is booted. The script will be executed by root user, so we need configure it ran by the normal user.\nAfter my personal computer is booted a while(the default interval of autossh is 300 seconds), I can use localhost:10002 to login my workstation, localhost:5900 to access my VNC session. Of course you can use 'froxyproxy' of Firefox via a localport to access web page of Intranet.\n","link":"https://kane.mx/posts/archive/blogspot/acess-intranet-without-vpn/","section":"posts","tags":["ssh"],"title":"Acess Intranet without VPN"},{"body":"","link":"https://kane.mx/tags/ssh/","section":"tags","tags":null,"title":"ssh"},{"body":"","link":"https://kane.mx/tags/configuration/","section":"tags","tags":null,"title":"configuration"},{"body":"","link":"https://kane.mx/tags/gerrit/","section":"tags","tags":null,"title":"gerrit"},{"body":"An internal Gerrit server was moved, so the hostname of server is changed. However we are using OpenID for user control, the OpenID provider(such as Google account) will generate a new token for the new server(hostname changing will impact the identity token of Google account) when we login Gerrit with same OpenID account. Gerrit will create a new internal account by default even though my OpenID account has existed in the system and has a lot of activities.\nThe solution is updating the 'ACCOUNT_EXTERNAL_IDS' table of Gerrit via gsql. Setting the 'ACCOUNT_ID' to your existing account_id for the new record whose 'EXTERNAL_ID' is the new token gotten from Google.\nupdate ACCOUNT_EXTERNAL_IDS set ACCOUNT_ID='1000001' where EXTERNAL_ID='https://www.google.com/accounts/o8/id?id=xxxxxxxxxx';\nThen search the documentation of Gerrit, I find a configuration property looks like supporting such a migration for OpenID authentication.\nauth.allowGoogleAccountUpgrade\nAllows Google Account users to automatically update their Gerrit account when/if their Google Account OpenID identity token changes. Identity tokens can change if the server changes hostnames, or for other reasons known only to Google. The upgrade path works by matching users by email address if the identity is not present, and then changing the identity.\nThis setting also permits old Gerrit 1.x users to seamlessly upgrade from Google Accounts on Google App Engine to OpenID authentication.\nHaving this enabled incurs an extra database query when Google Account users register with the Gerrit server.\nBy default, unset/false.\n","link":"https://kane.mx/posts/archive/blogspot/how-to-reuse-existing-openid-accounts/","section":"posts","tags":["OpenID","gerrit","configuration"],"title":"How to reuse the existing OpenID accounts after the host name of Gerrit server is changed"},{"body":"","link":"https://kane.mx/tags/openid/","section":"tags","tags":null,"title":"OpenID"},{"body":"","link":"https://kane.mx/tags/certificate/","section":"tags","tags":null,"title":"certificate"},{"body":"The problem came from I tried to set up send mail server(SMTP) for my Gerrit server. My Gerrit server is using OpenID for user authorization, so I registered a new email account to send notification from Gerrit.\nMost of email service providers require the secure authorization when using its SMTP server to send mail. However the root CA of my email provider is not added into the default certificate of JRE. So Gerrit always failed to send email due to ssl verification exception.\nMy solution is adding the certificate of SMTP server into the certificate used by JRE.\nThe detail steps are below,\nUse open_ssl utility to the certificate of SMTP server or its root CA of email provider. Below command can list the certificate of SMTP and its chain. You can paste any of them into a file.\nopenssl s_client -connect smtp.163.com:465\nThen import the certificate saved in previous step into my JRE's key store. The default password of JRE's default keystore is 'changeit'. You can find the cacerts under jre/lib/security folder.\nsudo keytool -import -keystore cacerts -alias Smtp163com -file /tmp/smtp.163.PEM\n","link":"https://kane.mx/posts/archive/blogspot/jrejdks-certificate-issue-and-solution/","section":"posts","tags":["Java","gerrit","configuration","smtp","certificate"],"title":"JRE/JDK's certificate issue and solution"},{"body":"","link":"https://kane.mx/tags/smtp/","section":"tags","tags":null,"title":"smtp"},{"body":"","link":"https://kane.mx/tags/build/","section":"tags","tags":null,"title":"build"},{"body":"","link":"https://kane.mx/tags/maven/","section":"tags","tags":null,"title":"Maven"},{"body":"I successfully converted our product build from PDE build to Maven/Tycho. Something is worth to be documented here.\nThere are several examples and posts to demonstrate how using Tycho building your Eclipse plug-ins, features, applications and products. The most helpful example is the demo of Tycho project.\nBelow are some traps I met when building my project by Tycho,\nproduct build\nOur product is based on plug-ins, however we added the 'featurelist' in build.properties of PDE build to include some root binary for the product. However Tycho doesn't support this type of build, we create some features as the placeholder of plug-ins. Then change the product as features based. You have to manually remove the plugins tag in .product definition file, otherwise Tycho will fail on strange error if the .produce has both features and plugins tag. Then configure the director plugin as not installing features.\norg.eclipse.tycho\ntycho-p2-director-plugin\n${tycho-version}\nmaterialize-products\nmaterialize-products\nfalse\nmyappprofile\narchive-products\narchive-products\nAnd I used below way to customize the qualifier string of our build.\norg.eclipse.tycho tycho-packaging-plugin ${tycho-version} '${qualifier-prefix}_'yyyyMMddHHmm An limitation of director plugin is that no way using different profile name for the application installed on different hosts. I contributed a patch on bug 362550 for this enhancement.\nfeature build\nWe have some features to pack some binary files as root files. But Tycho doesn't support root folder that is recognized by PDE build. The workaround is creating an additional folder, then put the root files into it.\nMeanwhile Tycho doesn't support wildcard to other native touch points, such as changing the files permission. For static file list use comma separated list as workaround.\neclipse test plug-in\nI have a plug-in whose scope is 'test', but it doesn't have test case and no dependency for any test framework, such as junit 3.8 or junit 4. And it's used for mocking test server. Configure surefire plugin to let it build as test plug-in as well.\norg.eclipse.tycho\ntycho-surefire-plugin\n${tycho-version}\njunit\njunit\n4.1\nfalse junit\njunit\n4.1\nAnd configure the surefire plugin like below to test code in Maven build.\norg.eclipse.tycho\ntycho-surefire-plugin\n${tycho-version}\nmy.group\nmy.feature\n${version}\neclipse-feature\nmy.group\nmy.testserver\n1.0.0\neclipse-plugin\n${testSuiteName}\n${testClassName} -Dcom.sun.management.jmxremote\n-consoleLog\norg.eclipse.equinox.ds\n1\ntrue\nsign jars\nAdd below signjar plugin into parent pom.xml, however I met the md5 error when materializing the repository built on .product. There is a workaround mentioned on Bug 344691.\norg.apache.maven.plugins maven-jarsigner-plugin 1.2 ${keystore} MyCompany ${storepass} ${keypass} true ${skip.jar.signing} -tsa https://timestamp.geotrust.com/tsa **/artifacts.jar **/content.jar jar eclipse-plugin eclipse-feature eclipse-test-plugin sign sign verify verify ","link":"https://kane.mx/posts/archive/blogspot/tips-of-maventycho-building/","section":"posts","tags":["Maven","Eclipse","build","Tycho"],"title":"The tips of Maven/Tycho building crossplatform RCP and repository"},{"body":"","link":"https://kane.mx/tags/tycho/","section":"tags","tags":null,"title":"Tycho"},{"body":"","link":"https://kane.mx/tags/clearcase/","section":"tags","tags":null,"title":"Clearcase"},{"body":"Several days ago I had a post to record the unsuccessful experience to migrate source code from Clearcase to Git.\nWe have a new way after doing some brain storms. This way still is not a perfect solution, but it's much better than previous trial.\nUse clearexport_ccase to export the source folder to intermittent data. See documentation of Clearcase admin. Create a temporary vob for importing the data later. See example. Import the data into temporary vob. See example. Repeat step 1 to 3 for importing all necessary data into temporary vob. Use the SVN Importer to import the temporary vob as Subversion repository. Last steps refer to a documentation of succeeded migration case of one of Eclipse project from Subversion to Git. Git definitely is greatest SCM tool now. The size of Subversion repository is around 10GB, finally the Git repository is less than 700MB, which saves more than 10 times disk space. It's awesome!\nThe flaw of this way is that the removed elements in Clearcase(said using Main/LATEST as cspec of Clearcase vob when exporting) would lose after importing into a temporary vob. So switching to a maintenance branch or tag like 1.0/2.0 in Git, the source code is incomplete. The files existed in that branch or tag, then removed in latest code base are lost. The workaround could be manually checking in GA version to have complete code.\nIf anybody have graceful and perfect solution to migrate Clearcase to Git, I think he could start a new business. :)\n","link":"https://kane.mx/posts/archive/blogspot/migration-clearcase-to-git-part-2/","section":"posts","tags":["Git","Clearcase"],"title":"Migration Clearcase to Git -- part 2"},{"body":"I tried to migrate the source code of project from Clearcase to Git repository. As far as I know there is no elegant solution for such migration. For purpose of this migration, I want to keep the history and label of files in Clearcase after migrating to Git repository.\nThere are mature tools to migrate CVS/SVN repository to Git, so I tried to use Subversion as a bridge for my migration.\nI used a free software 'SVN Importer' to import the Clearcase vobs to Subversion. The tool is great, and it keeps the history of files, labels and branches. The entire size of new Subversion repository has near 50GB which is unacceptable size of Git repository. The subversion repository contains a lot of legacy code and unwanted binaries, so removing those revisions could significantly reduce the size of subversion repository. And subversion provides some admin tools to manipulate the metadata of subversion, it's possible to remove the unnecessary revisions and re-create a subversion repository with refined content. But I don't have any experience to use the admin tool of subversion before, I failed to filter the unwanted data. It's not worthy of costing too much effects on it. Finally I failed to filter the subversion repository.\nActually the detail history of files is rarely used. If need, we still can find it in Clearcase. At last I manually checked in the released version of our project into Git repository, and tagged them.\nWrote this unsuccessful idea here for elapsed efforts.\n","link":"https://kane.mx/posts/archive/blogspot/migrate-clearcase-to-git/","section":"posts","tags":["Git","Clearcase"],"title":"Migrate Clearcase to Git"},{"body":"","link":"https://kane.mx/tags/p2/","section":"tags","tags":null,"title":"p2"},{"body":"Our p2 based on installer suffered performance issue when querying IUs from repositories. Though the repositories have a large number of IUs to be queried, but we find the performance of using QL is unacceptable in some special scenarios.\nI published several different methods to find the expected IUs. Thomas pointed out the better expression of QL and finally helped us to find out the our repository without IIndexProvider implementation.\nIIndexProvider implementation of a repository is quite important to improve the performance of QL, especially use the 'traverse' clause to query something.\nAnd Slicer API is an alternative method when querying the complete dependencies.\n","link":"https://kane.mx/posts/archive/blogspot/p2-query-performance/","section":"posts","tags":["p2","performance"],"title":"p2 query performance"},{"body":"","link":"https://kane.mx/tags/performance/","section":"tags","tags":null,"title":"performance"},{"body":"","link":"https://kane.mx/tags/compile/","section":"tags","tags":null,"title":"compile"},{"body":"Yesterday I modified an existing c++ application for Windows. And its default build environment is Makefile and MinGW.\nHowever I used a newly Windows API that is not included by header files of MinGW.\nFirst of all, I copied the constant definition from header file of Windows SDK, and defined the Windows API method as a extern C method. So it's no problem to compile the code in MinGW.\nSecondly I have to fix the link issue. Because the symbol of the Windows API also can't be found by gcc link.\nHere great thanks to Google. It's quite easy to get the knowledge from others.\nI found a way to create an library by using dlltool. Dlltool is a utility to create an library with specified methods from existing dll library, which can be used by gcc link later.\nBelow are links I referred to create an import library,\n[1] http://www.emmestech.com/moron_guides/moron1.html\n[2] http://www.mingw.org/wiki/CreateImportLibraries\n[3] http://lists-archives.org/mingw-users/19461-import-library-for-c.html\n","link":"https://kane.mx/posts/archive/blogspot/create-import-library-for-building/","section":"posts","tags":["compile","MinGW"],"title":"Create an import library for building application in MinGW"},{"body":"","link":"https://kane.mx/tags/mingw/","section":"tags","tags":null,"title":"MinGW"},{"body":"The documentation of PDE has a chapter for this topic. Basically it's simply. Copy the template scripts what you want from templates/headless-build folder under org.eclipse.pde.build plug-in to your build configuration directory that is the folder has build.properties file.\nHowever I found the variables listed in template 'customAssembly.xml' can't be used in the runtime. I filed bug 346370 against it.\n","link":"https://kane.mx/posts/archive/blogspot/customize-pde-build/","section":"posts","tags":["PDE","Eclipse","build"],"title":"Customize PDE build"},{"body":"","link":"https://kane.mx/tags/pde/","section":"tags","tags":null,"title":"PDE"},{"body":"","link":"https://kane.mx/tags/code-signing/","section":"tags","tags":null,"title":"code signing"},{"body":"I did sign the jars via reusing the existing certificate of Windows code signing several months ago. Writing it down for further reference.\nWhatever your purpose of reusing the existing Windows code certificate, I only document the way from technical perspective.\nAfter buying the certificate of Windows code signing from CA, you will get a .pvk file that stores both the certificate and private key. PVK file is the PKCS12 format[1], however java uses JKS format by default. So you need convert the pvk file to JKS keystore and certificate.\nSince 6.0 JDK supports PKCS12 directly, you can use 'jarsigner' and PVK file to sign jars directly[2].\n1jarsigner -keystore /working/mystore.pvk -storetype pkcs12 -storepass myspass -keypass j638klm -signedjar sbundle.jar bundle.jar jane Or using keytool to convert the PKCS#12 to JKS format[3] if using Eclipse PDE build to sign your jars.\n1keytool -importkeystore -srckeystore KEYSTORE.pvk -destkeystore KEYSTORE.jks -srcstoretype PKCS12 -deststoretype JKS -srcstorepass mysecret -deststorepass mysecret -srcalias myalias -destalias myalias -srckeypass mykeypass -destkeypass mykeypass -noprompt [1] http://en.wikipedia.org/wiki/PKCS\n[2] http://download.oracle.com/javase/6/docs/technotes/tools/solaris/jarsigner.html\n[3] http://shib.kuleuven.be/docs/ssl_commands.shtml#keytool\n","link":"https://kane.mx/posts/archive/blogspot/using-certificate-of-windows-code/","section":"posts","tags":["code signing","java","certificate"],"title":"Using the certificate of Windows code signing to sign jars"},{"body":"I met that firefox/thunderbird complained another its instance running even if no a running firefox/thunderbird process. Finally let them run again after removing the '.parentlock' file in their default profile.\nstrace utility helps me a lot to find the solution.\nstrace -f -e file firfox\n","link":"https://kane.mx/posts/archive/blogspot/unlock-locked-profile-if/","section":"posts","tags":null,"title":"Unlock the locked profile if firefox/thunderbird crash"},{"body":"I implemented the replication tool at the end of 2009, then published it to Eclipse Marketplace in May 2010. However it's not pervasively used due to users have to install that plug-in firstly.\nI searched a similar request on bugzilla, then I initialized my contribution in the early of this year. Finally it was accepted and will release as part of eclipse itself since Eclipse 3.7 M7! I hope it would benefit the users of Eclipse more and more.\nAnd I was nominated and elected as the committer of Equinox p2, it's a great honor for me. :)\n","link":"https://kane.mx/posts/archive/blogspot/eclipse-p2s-importexport-capability/","section":"posts","tags":["Equinox","p2","Eclipse","feature"],"title":"Eclipse P2's import/export capability"},{"body":"","link":"https://kane.mx/tags/feature/","section":"tags","tags":null,"title":"feature"},{"body":":g!/some expression/d\n","link":"https://kane.mx/posts/archive/blogspot/vim-delete-lines-not-contain-words/","section":"posts","tags":null,"title":"[vim] delete the lines not contain words"},{"body":"Recently our installer met a strange bug, it didn't uninstall all legacy bundles after updating to new version. Finally I found it's due to a magic fragment is missing in the profile due to some causes.\ninstallBundle(bundle:${artifact})\nuninstallBundle(bundle:${artifact})\nsetStartLevel(startLevel:4);\nIt has 'hostRequirements' element that represents it's a fragment IU and match all the eclipse's plug-ins in that profile. And this fragment defines the touch point actions for its hosts that will do installBundle action during 'install' phrase and uninstallBundle action during 'uninstall' phrase. It's a very good way to remove the duplicate touch point definitions for all eclipse's plug-ins in the profile.\nBTW, p2's engine also doesn't attach this fragment to the eclipse's plug-in IU if the top level IU doesn't have the STRICT rule. I'm not sure the root cause of designing for it, but it's the fact.\n","link":"https://kane.mx/posts/archive/blogspot/inside-p2s-profile-2-fragment-matches/","section":"posts","tags":["p2","Eclipse","profile"],"title":"Inside P2's profile (2) - the fragment matches all osgi bundles"},{"body":"","link":"https://kane.mx/tags/profile/","section":"tags","tags":null,"title":"profile"},{"body":"You would see some interesting properties at the bottom of eclipse's profile.\nFor example,\nIt attaches a property named 'org.eclipse.equinox.p2.internal.inclusion.rules' with value 'STRICT' on the IU 'org.eclipse.sdk.ide' with version 3.6.1.M20100909-0800.\nIt's a very important property for the p2 engine. It means the IU 'org.eclipse.sdk.ide' has been explicitly installed into the profile, so it's not allowed be implicitly updated or removed.\nFor example,\nWe have top feature IU 'org.eclipse.sdk.ide' that represents the Eclipse SDK, 'org.eclipse.pde.feature' that represents the Plug-in Development Tool and 'org.eclipse.jdt.feature' that represents the Java Development Tool. And both JDT and PDT are part of Eclipse SDK, so 'org.eclipse.pde.feature' and 'org.eclipse.jdt.feature' are required by 'org.eclipse.sdk.ide'.\nIf the profile only has the STRICT rule for 'org.eclipse.sdk.ide', 'org.eclipse.jdt.feature' and 'org.eclipse.pdt.feature' will implicitly be updated to 3.6.2 when updating 'org.eclipse.sdk.ide' from 3.6.1 to 3.6.2.\nHowever the profile has below STRICT rule for PDT feature,\nThe p2 engine will report errors due to 'org.eclipse.pdt.feature' has STRICT rule for updating. Hence third-party must explicitly update both 'org.eclipse.sdk.ide' and 'org.eclipse.pdt.feature' from 3.6.1 to 3.6.2.\n","link":"https://kane.mx/posts/archive/blogspot/inside-p2s-profile-1-inclusion-rules/","section":"posts","tags":["p2","Eclipse","profile"],"title":"Inside P2's profile (1) - inclusion rules"},{"body":"Latest gcc compiler enables the stack overflow protector that is since GLIBC 2.4. So the library or executable is compiled by latest gcc could be loaded or executed in RHEL4 or Solaris 9 that only have GLIBC 2.3. Hence using option '-fno-stack-protector' to compile the library or executable to make sure it could be executed in older linux release.\ng++ -fno-stack-protector -o test.o test\n","link":"https://kane.mx/posts/archive/blogspot/stack-overflow-protector/","section":"posts","tags":null,"title":"stack overflow protector"},{"body":"Recently I just know such a useful syntax usage of java.\naLoopName: for (;;) { // ... while (someCondition) // ... if (otherCondition) continue aLoopName; ","link":"https://kane.mx/posts/archive/blogspot/loop-name-for-for-clause-in-java/","section":"posts","tags":null,"title":"the loop name for 'for' clause in java"},{"body":"It's a powerful command to rename files in a batch.\nUsage:\nrename 's/(\\d+)$/$1\\.txt/' * rename add '.txt' extension name for all files that ends with number.\n","link":"https://kane.mx/posts/archive/blogspot/rename-command/","section":"posts","tags":null,"title":"rename command"},{"body":"If you have http proxy, set it to system environment,\nexport http_proxy=http://127.0.0.1:8000 Then start the application in that same terminal.\nIf the proxy is socks proxy, use 'tsocks' to wrap the application in terminal.\n","link":"https://kane.mx/posts/archive/blogspot/applying-proxy-for-softwares-without/","section":"posts","tags":null,"title":"applying proxy for the softwares without proxy support in linux"},{"body":"Honestly speaking, you have eaten the best delicious food if you're living in China. Though we have more and more concerns on the safety of food, we have to recognize that Chinese food is more delicious than others.\nThe cuisine is simple in Austria. People always use pork, beef, flour, tomato, potato and few green vegetables. So they surprised Chinese cost several hours to make the food.\nGulasch, it's good tasted after eating pizza several times\npasta\nAbout the drinking, most of them directly drink the water from water pipe. And some of them like the special water that mixes water with gas. The coffee and beer are the favorite of local citizens. You can find more than one hundred beer brand in the city, and some of them have been found for centuries. Indeed they're good tasted.\nspecial water\nDie Weissf\nWieninger, it comes from Vienna\nStiegl, local famous brand\n","link":"https://kane.mx/posts/archive/blogspot/food-and-drinking/","section":"posts","tags":["salzburg","travel","tour"],"title":"Food and Drinking"},{"body":"","link":"https://kane.mx/tags/salzburg/","section":"tags","tags":null,"title":"salzburg"},{"body":"","link":"https://kane.mx/tags/tour/","section":"tags","tags":null,"title":"tour"},{"body":"","link":"https://kane.mx/tags/travel/","section":"tags","tags":null,"title":"travel"},{"body":"","link":"https://kane.mx/categories/trip/","section":"categories","tags":null,"title":"trip"},{"body":"Joel posted a blog related to how to hire the great programmers. One of his key points is building comfortable workspaces.\nI believe every programmer loves the workspace like Google and Fog Creek. The workspace of Google has been very famous due to its French chef, gymnasium and big sofas. Why is Fog Creek? It's the company created by Joel, he also practiced his theory on his company. Ruan YiFeng posted a blog for it. I bet you would envy the guys working in that office.\nHow about the workspace of the office in Salzburg? Let me show some pictures.\nSpace\nprogrammers have two monitors\nReading\nnon-technique magazines\ntechnique books\nDrinking\ncoffee machine\nKitchen\nfreezer for fast food\nEntertainment\ntable football game\n","link":"https://kane.mx/posts/archive/blogspot/working-workspace/","section":"posts","tags":["salzburg","travel","tour"],"title":"Working Workspace"},{"body":"Salzburg is a small city and is on the banks of the Salzach River. It's easy to go through the city by bus in 30 minutes.\nSalzach River\noutline view\nRiding the bicycle is a very good way to enjoy the beautiful sight of the city. You could see many kids with parents riding bicycle in the sunny weekend.\nThe train station and a major bus transient station are the same one that is called as 'main station' by local residents. it's not far from the office of company, about 20 minutes by foot.\nThe ticket system of bus is more complicated than Beijing's. People can buy the ticket for single, 24 hours, 48 hours, a week and even a year. The children can get discount. There's no ticket seller in the bus. Usually nobody checks whether you have valid ticket. Pressing the button to open the door when getting on/off the bus.\nThe public transportation is designed well. There are different tickets for different people. For example, tourists would prefer to buy 24 hours ticket or 48 hours tickets. 24 hours ticket means the passengers can take any bus in the 24 hours after it's used first time. So it's very convenient for tourists. 24 hours ticket is 4.2€ for adults, 2.1€ for children. The price of train tickets is same. The faster train \u0026quot;ICE\u0026quot; have higher price. The regular train is much cheaper. And the ticket allows a family not exceed 5 persons to go back and forth another city in a day. It's very cheap for a family to enjoy weekend in another city or town by train. I think it's a good approach to use public transportation more to reduce environment pollution.\nround-trip ticket\nTaking the train is more convenient than China. There is no security checking, no long distance between gate and platform and even no staffs in the platform. Meanwhile there is no any limitation to travel among the European countries. I went to Munich of Germany by train, I felt it's even more convenient than taking subway in Beijing. Both the train and bus have a lot of humanization design for disability people and people with their bicycles or pets.\n","link":"https://kane.mx/posts/archive/blogspot/transportation/","section":"posts","tags":["salzburg","travel","tour"],"title":"Transportation"},{"body":"There are 20+ staffs in Salzburg office. Most of them are developers, one is administrator of office.\nGenerally the staffs in Salzburg work more flexible than the staffs working in Beijing.\nSome of them live in German. Even though it's not so far as Salzburg, they also need come to Salzburg by train. So sometimes they work at home, use internet and phone as communication tool.\nAnd they have different responsibilities for products. For example, Helmut works on installer, Matthias and Michael are responsibility for QFT testing, Martin N. is focus on license API developing. So everybody has himself schedule, he can decide when he come to office and when leave office based on his working schedule. Nobody cares when you come/leave office or how long you work every day. I believe all of them do well on their jobs.\nFurthermore you can work with your dogs together if nobody takes care of them at home.\nMax's dogs\nMost of foreign like coffee, so there is a kitchen with seats in the office. Some of them like to drink a cup of coffee or tea as a break, and it's a good chance to talk with others. It's a relaxing time for changing your mind out of work. Besides drinking some things, there is a room for playing table football game. It's a small amount of exercise, it's good for body.\nAnother thing makes me very impressive is that the team is very stable than any company I know in China. Most of them work in company more than 10 years. So I think I know that's why they know more than us. Everyone could be expert after doing the same thing more than 10 years. They love the work of coding, and they would like to do coding until retiring. That's why I can see some of them are more than 40, even 50 years old.\n","link":"https://kane.mx/posts/archive/blogspot/working-style/","section":"posts","tags":null,"title":"Working style"},{"body":"度过长途飞行的旅程不是一件容易的事。要在狭小的空间里待上近10个小时，好在是两人出行，半睡半聊的打发过了时间。\n到达维也纳之后，出了登机通道看到的居然是一个酒吧类的餐馆。感觉很稀奇，也很有味道。\n周围当然少不了免税店和商铺，但远没有首都机场那样的规模。总体感觉就像国内大型超市购物出口一样，而且人也不多。\n另外赞一下维也纳机场的Wifi，简单配置就K了，哪像国内的，又要移动号码，还要短信获取，搞半天也没弄定。\n转机之前还有段时间，就在机场里到处逛了逛。顺便在一个吧解决了晚餐，同时也尝了杯当地啤酒。\n去萨尔茨堡的飞机还是带螺旋桨的，头次坐这样的老式飞机。\n","link":"https://kane.mx/posts/archive/blogspot/day-1/","section":"posts","tags":null,"title":"day 1"},{"body":"Check out this SlideShare Presentation:\nDiscovering the p2 API\nView more presentations from Sonatype.\n","link":"https://kane.mx/posts/archive/blogspot/discovering-p2-api/","section":"posts","tags":null,"title":"Discovering the p2 API"},{"body":"Days ago I updated my p2 replication tool. It's easier to install it in your Eclipse.\nA new component named 'Eclipse marketplace' is added into Eclipse SDK since Helios, which is an application store for Eclipse. People could be easy to install third party plug-ins into their Eclipse.\nYou can launch marketplace via 'Help' - 'Eclipse Marketplace...', then search key word 'p2' or 'replication' to find the tool. Finally click next to install it.\nIt's a very graceful workflow to install some add-ons like firefox.\nAnd then p2 replication tool could help you replicate your environment. This tool supports install components from another existing Eclipse instance to save the time cost on downloading them from Internet now! Enjoy it.\n","link":"https://kane.mx/posts/archive/blogspot/p2-replication-tool-lives-on-eclipse/","section":"posts","tags":null,"title":"P2 replication tool lives on Eclipse Marketplace"},{"body":"1. tcpdump\ntcpdump -n port 80 -i eth0|lo\nmonitor all package transferred on 80 port on the network interface eth0/lo\n2. netstat\nnetstat -anp|grep java\ntrace all network traffic on the process named java\nnetstat -anp|grep 128.224.159.xxx\ntrace all network traffic on the host whose ip address is 128.224.159.xxx\n3. nslookup\nnslookup 206.191.52.46\nlook up the domain name whose ip address is 206.191.52.46\n","link":"https://kane.mx/posts/archive/blogspot/useful-network-utility-tools/","section":"posts","tags":null,"title":"useful network utility tools"},{"body":"Using -exec command like below, need add escape character for semicolon that separated two commands in shell\n1find directory/ -type d -exec chmod a+x {} \\\\; Feb 24, 2010 - update:\n1find . -maxdepth 4 -type d -name \u0026#39;g-vxworks\u0026#39; 2\u0026gt;/dev/null -print Jan. 7, 2024 - update: You might see No such file or directory when combining --exec rm to delete the found files.\nYou can add -depth option to mitigate the message.\n1find deployment/g -depth -name \u0026#39;asset.*\u0026#39; -type d -exec rm -rf {} \\; ","link":"https://kane.mx/posts/archive/blogspot/find-exec-tip/","section":"posts","tags":["Shell"],"title":"[tip]Find -exec tip"},{"body":"","link":"https://kane.mx/tags/shell/","section":"tags","tags":null,"title":"Shell"},{"body":"I suffered p2 installation failed on the configure parse. Becase I try to add vm arguments for my application.\nFor example, I added '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8272' in the product configuration.\nP2 will fail when parsing the argument, because it contains ':' and ',' that should be escaped.\nIt works again after replacing it to '-agentlib${#58}jdwp=transport=dt_socket${#44}server=y${#44}suspend=n${#44}address=8272'.\nThe more detail note could be found in p2 touchpoint wiki.\nAnd I also opened bug to request improving it.\n","link":"https://kane.mx/posts/archive/blogspot/special-characters-in-p2-touchpoint/","section":"posts","tags":null,"title":"special characters in p2 touchpoint instruction"},{"body":"mount -t cifs -o username=xxx,password=xxx,workgroup=xx,iocharset=utf8 //share.domain/folder /localfolder\n","link":"https://kane.mx/posts/archive/blogspot/mount-windows-share-folder/","section":"posts","tags":null,"title":"mount windows share folder"},{"body":"1. open the file in vim, :%!xxd\n2. hexdump\n","link":"https://kane.mx/posts/archive/blogspot/way-to-dump-hex-file/","section":"posts","tags":null,"title":"the way to dump hex file"},{"body":"public class NameRuleTest { @Rule public TestName name = new TestName(); @Test public void testA() { assertEquals(\u0026quot;testA\u0026quot;, name.getMethodName()); } @Test public void testB() { assertEquals(\u0026quot;testB\u0026quot;, name.getMethodName()); }} ","link":"https://kane.mx/posts/archive/blogspot/how-to-get-name-of-running-test-case-in/","section":"posts","tags":null,"title":"How to get the name of running test case in JUnit4"},{"body":"P2 install wizard firstly query the repository to find out the root installable unit(as well as top installable). Then p2 recalculate the dependency and try to search the requirements in all available repositories after user submits their installation request. Go to the license agreement page if all the dependencies are satisfied.\nP2 agreement page obtains all the units to be installed from the operands of provision plan. The number always is much greater than the number submitted by user. Because the submitted IUs only are the root IUs.\nP2 UI would check the unaccepted licenses comparing to before records. The policy class of p2 UI provides the license manager to record the even accepted license. It traverses all the installable units, querying its license whether it has already been accepted if it has. If the license agreement has been accepted, it would be ignored, won't be shown in the agreement page. Otherwise, new record is created to mark it as accepted by the license manager and display it in the agreement wizard page.\nThe default implementation of license manager would persist the accepted information in the file -- /.metadata/.plugins/org.eclipse.equinox.p2.ui.sdk/license.xml.\n","link":"https://kane.mx/posts/archive/blogspot/how-p2-ui-handles-with-license/","section":"posts","tags":null,"title":"How p2 UI handles with license agreements"},{"body":"Setup SSH without password.\na) execute \u0026quot;ssh-keygen -t rsa\u0026quot; under your linux/unix login to get the RSA keys.\n(press Enter for all)\nYou will get 2 files uner ~/.ssh/, id_rsa and id_rsa.pub\nb) Put the public key id_rsa.pub to your remote host: ~/.ssh/authorized_keys If the remote host share the same nfs, just try \u0026quot; cat id_rsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u0026quot;\n* Remember to modify hostname or ip info in ~/.ssh/authorized_keys to \u0026quot;\u0026quot;, so that you can login from any host without password in your NIS domain.\nFor example:\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA4Ri5J0s1BL/+mR7RfAuDW6FY2P6ILc61Zvw1BdDkvHMFrTzaC/AUMw33H7biAMCXuCleakCuSoV8ZDiGHYs4wOVvet5sDmphkwdiC4xTekdl3dRNvGjMVbvFUta/Y5CiayL6YIu47Ro6Vvu4Mutsrv/13pTlifrEz+NTR/+bzMb9nTniCwiryMyYod3E46b8WvS8yE3WK+tH4BZE8bjiCwdvAzSdPyk/OFNrlBNuF1yewwnxv1roRD3UalT2+7O4kfEG9sMvvBHjuX2l7xlUe3stBftYpigBbwGmmadxjRpNIlk88t5xKcQX6nSu7V8HI3GWPHI0D+ISIlbfU5Sunw== kzhu0@\n","link":"https://kane.mx/posts/archive/blogspot/ssh-key/","section":"posts","tags":["ssh","Tip"],"title":"[tip]ssh key"},{"body":"I wrote a plug-in to simplify the process to install the same plug-ins in different platform or different workstation.\nAnyone is interested in it, pls follow below guide to freely use it.\nhttp://code.google.com/p/kane-toolkit/wiki/P2Replication\nEnjoy it.\n","link":"https://kane.mx/posts/archive/blogspot/p2-replication-plug-in/","section":"posts","tags":["p2","Eclipse"],"title":"[Eclipse][P2]P2 replication plug-in"},{"body":"How Equinox load bundles Equinox launcher is responsible to start OSGi framework. The system bundle would be created and marked as installed when initializing the framework. Equinox also tries to install the installed bundles if finding them in persistence data during the initializing period. Of course there is no extra bundles would be installed when launching Equinox first time.\nThen Equinox launcher would install the bundles specified by vm's system property 'osgi.bundles'. And start the initial bundles that are marked as early start. For example, let's have a look at the configuration/config.ini of Eclipse, you would find a line similar as below,\nosgi.bundles=reference\\:file\\:org.eclipse.equinox.simpleconfigurator_1.0.200.v20090831.jar@1\\:start\nIt means the start level of bundle 'org.eclipse.equinox.simpleconfigurator_1.0.200.v20090831.jar' is 1, and it would be started after installing it.\nHere you would ask there are only two bundles are installed(one is system bundle 'org.eclipse.osgi', the other is 'org.eclipse.equinox.simpleconfigurator') when launching Equinox, how the other bundles are installed? It's done by the activate method of 'simpleconfigurator' bundle. The available bundles are recorded in plain text file configuration/org.eclipse.equinox.simpleconfigurator/bundles.info, simpleconfigurator read the file then install those bundles.\nIt's a new bundle management introduced by p2. P2 also supports the traditional way to install extensions, such as link file, .eclipseproduct file and directly copying features/plugins.\nBelow table lists the p2 bundles to implement the compatibility installation feature,\nBundle\nUsage\norg.eclipse.equinox.p2.directorywatcher\nthe definition and implementation of directory watcher API\norg.eclipse.equinox.p2.updatesite\nthe implementation of updatesite repository\norg.eclipse.equinox.p2.extensionlocation\nthe implementation of extension repository\norg.eclipse.equinox.p2.reconciler.dropins\nscan dropin folder and link files; watch the traditional configuration file used by update manager\nP2 reconciler would scan the dropin, link folder and legacy configuration file in every Equinox launching. You can disable the capability by marking it not be early start.\norg.eclipse.equinox.p2.reconciler.dropins,1.0.100.v20091010,plugins/org.eclipse.equinox.p2.reconciler.dropins_1.0.100.v20091010.jar,4,false\nIf finding some new bundles in dorpin folder, the reconciler would add the new bundles into a local metadata repository that is stored as OSGi data of Equinox. Then synchronize the bundles into the current p2 profile, then add the new bundles into bundles.info file.\n","link":"https://kane.mx/posts/archive/blogspot/how-equinox-load-bundles/","section":"posts","tags":["Equinox","Eclipse"],"title":"[eclipse]How Equinox load bundles"},{"body":"Learn p2 step by step See this link for detail\nLearn P2 step by step\np2 concept p2 install p2 install practice p2 repository publish customized p2 touchpoint p2 repository publish practice Example Code Reference p2 concept 首先来理解p2引入的几个概念[1]\np2 / Agent\nThe provisioning infrastructure on client machines\nInstallable Unit (IU)\nMetadata that describes things that can be installed/configured\nArtifact\nThe actual content being installed/configured(e.g., bundle JARs)\nRepository\nA store of metadata or artifacts\nProfile\nThe target of install/management operations\nPlanner\nThe decision-making entity in the provisioning system\nEngine\nThe mechanism for executing provisioning requests\nTouchpoint\nThe part of the engine responsible for integrating the provisioning\nsystem to a particular runtime or management system\nIU比较好理解，就是对可安装或配置的部分一种描述，并不对应实际要安装的文件。\nArifact就是来描述实际要安装的文件，bundle类型的jar，feature，binary文件。\n这时就有了Repository（仓库）这个概念，是用来保存artifacts信息，以及artifacts的元数据。元数据包括了对artifact的唯一标识符，版本，对外暴露的接口信息，以及它依赖的接口及其版本信息，各个安装阶段需要执行的配置。在p2默认的实现里面，这两个repository用xml文件来描述，同时被压缩为artifacts.jar, content.jar来减小文件大小，缩短传输时间。\n从Eclipse 3.4起，当从远程site安装新的软件时，就会看到有个work thread在后台下载content.jar文件。p2在安装时候，首先会根据content.xml（metadata repository）来解析正在安装软件的依赖。在当前runtime里面查找metadata中指定的依赖，如果满足才继续安装。据我个人经验，如果安装的软件比较复杂，那它产生的metadata文件就会比较大（很容易上兆），下载这个文件以及解析它的内容都会比较慢，从而影响用户体验。\n比较灵活的是，用户可以实现自己的ArtifactRepository和MetadataRepository，注册到它们各自的Manager里面就可以了。所有这些服务都被实现为OSGi Service.\n下一个Profile，是用来管理安装目标里的软件信息。p2在被设计的时候，希望解决多个eclipse实例共享一份安装的某软件。比如为了某种目的我机器上有好几个Eclipse，同时它们都需要CDT，免去为重复安装的麻烦。profile就会记录每次安装的内容，让整个应用程序被管理起来。在Galileo里安装的软件都可以软件管理里面查找到。\nPlanner和Engine完全就是p2内部的东西。任何p2的操作（安装，删除，配置）都需要Planner实例来描述。有了Planner以后，还需要创建一个Engine对象，通过engine来执行对应的plan。这就是目前调用p2 API来完成安装的一个过程。\n最后一个Touchpoint。程序在安装的时候，可能会根据runtime(os, ws, arch等）或阶段(安装，卸载，配置等)执行某些配置，touchpoint就是帮助实现这些配置。具体操作是以IU为单位记录在metadata repository里的。p2默认实现了一些Eclipse touchpoint，比如拷贝，删除文件，执行外部程序等。如果用户有自己特殊的native操作需要执行，可以自己实现自定义的touchpoint。\np2 install 有了这些概念以后，我们来看看如何使用p2 API。以安装为例，\n首先需要得到当前安装的profile。如果是全新安装，通过IProfileRegistry.addProfile创建一个新profile。是更新安装的话，可以通过IProfileRegistry查询到期望更新的profile。创建profile的时候，需要注意设置profile的属性，\nMap\u0026lt;String, String\u0026gt; profileProperties = new HashMap\u0026lt;String, String\u0026gt;();\nprofileProperties.put(IProfile.PROP_INSTALL_FOLDER, installLocation.getAbsolutePath());\nprofileProperties.put(IProfile.PROP_FLAVOR, \u0026quot;tooling\u0026quot;); //$NON-NLS-1$\nprofileProperties.put(IProfile.PROP_ENVIRONMENTS, \u0026quot;osgi.os=\u0026quot; + Platform.getOS() + \u0026quot;,osgi.ws=\u0026quot; + Platform.getWS() + \u0026quot;,osgi.arch=\u0026quot; + Platform.getOSArch()); //$NON-NLS-1$;\nprofileProperties.put(IProfile.PROP_NL, \u0026quot;en_US\u0026quot;); //$NON-NLS-1$\nprofileProperties.put(IProfile.PROP_INSTALL_FEATURES, \u0026quot;true\u0026quot;);\nprofileProperties.put(IProfile.PROP_CONFIGURATION_FOLDER, new File(installLocation, \u0026quot;configuration\u0026quot;).getAbsolutePath());\nprofileProperties.put(IProfile.PROP_ROAMING, \u0026quot;true\u0026quot;);\nprofileProperties.put(IProfile.PROP_CACHE, installLocation.getAbsolutePath());\ncurrentProfile = registry.addProfile(PROFILE_ID, profileProperties);\nPROP_INSTALL_FOLDER设置安装的目录，PROP_CACHE设置保存下载来的Eclipse IU(features/plugins)的目录，如果repository是以feature为单位来发布的话，需要设置PROP_INSTALL_FEATURES为true。如果repository包括native的binary（比如launcher）也需要指定正确的PROP_ENVIROMENTS，包括OS,WS,ARCH或PROCESSOR。\n然后需要获得将要安装的IMetadataRepository集合。比如：\nArrayList ius = new ArrayList();\nIMetadataRepositoryManager repositoryManager = (IMetadataRepositoryManager) ServiceHelper.getService(Activator.getDefault().getBundle().getBundleContext(),\nIMetadataRepositoryManager.class.getName()); if (repositoryManager == null) throw new InterruptedException(\u0026quot;Failed to get IMetadataRepositoryManager.\u0026quot;);\ntry {\nfor (URI uri : uris) {\nIMetadataRepository metaRepo = repositoryManager.loadRepository(uri, progress.newChild(50/uris.length));\nCollector collector = metaRepo.query(new AccpetQuery(), new LatestNoninstalledIUCollector(currentProfile), progress.newChild(50/uris.length));\nius.addAll(collector.toCollection());\n}\n} catch (ProvisionException e) {\nthrow new InterruptedException(\u0026quot;Failed to get IMetadataRepository.\u0026quot;);\n}\n-同时这里也查找出IMetaRepository中没安装过的IUs。这就需要同当前安装的profile中已经安装过的内容来比较，\nCollector collector = metaRepo.query(new AccpetQuery(), new LatestNoninstalledIUCollector(currentProfile), progress.newChild(50/uris.length));\n这里需要指出的是，IMetadataRepository实现了IQueryable接口。IQueryable是p2引入的查找接口，返回满足特殊查询条件的集合，同时传入了一个IProgressMonitor对象，可以反应查找进度。这里的AcceptQuery，LatestNoninstalledIUCollector是自定义的Query和Collector对象。p2已经实现了许多有用的Query，经常用到的有InstallableUnitQuery，IUPropertyQuery，RangeQuery。\n-接下来生成IEngine所需的ProvisionPlan。首先创建ProfileChangeRequest对象，将先前查找出的要安装的IUs添加进去。\nrequest.addInstallableUnits(ius);\n删除的话则与之相反。更新的话也需要通过ProfileChangeRequest.removeInstallableUnits()去掉旧版本的IUs。\n调用IPlanner service的getProvisioningPlan(ProfileChangeRequest, ProvisioningContext, IProgressMonitor)得到对应于当前request的plan。\n-最后就是调用IEngine.perform(IProfile, PhaseSet, Operand[], ProvisioningContext, IProgressMonitor)来执行provisioning操作。这里的PhaseSet是用来指定Engine将要执行的几个阶段，以及每个阶段的执行时间权重。这些阶段包括了Collect, Unconfigure, Uninstall, Property, CheckTrust, Install, Configure. 如果熟悉Eclipse之前的Installer Handler，对Unconfigure/Uninstall/Install/Configure应该都很熟悉。 在p2里，更是将Collect, CheckTrust这些过程也暴露了出来。下面是p2里默认PhaseSet的实现，\npublic DefaultPhaseSet() {\nthis(new Phase[] {new Collect(100), new Unconfigure(10, forcedUninstall), new Uninstall(50, forcedUninstall), new Property(1), new CheckTrust(10), new Install(50), new Configure(10)});\n}\nOperand[]通过ProvisionPlan.getOperands()获得。\np2 install practice 先制作一个可安装的repository，这里的方法是基于Eclipse提供的模版创建一个RCP程序，比如mail template,\n然后创建一个feature包含刚才创建出来的plug-in 'com.example.mail'。\n基于存在的‘com.example.mail.product’创建product configuration，将其设置为base on features, 同时在dependencies页面添加以下feature。feature的qaulifier id依赖于用到的Eclipsse版本，从下图看到我这里使用的是Eclipse 3.5.1。如果要让RCP程序具有安装插件的能力（包含p2和p2 UI），就需要依赖更多的feature。后面的example里面会实现这部分功能。另外注意：ID不能包括空格字符。\n接下来使用Eclipse Product Export Wizard生成repository。记得要勾选上generate metadata repository。\n在成功创建了Mail Application的repository后，试用我们自己的p2 installer来安装这个应用程序。安装过程类似下面的截图。然后执行/folk/kzhu0/tmp/mailrcp/mail来运行Mail Application.\np2 repository publish 这一节将会展示如何发布/产生基于p2的repository。在p2最早的版本Eclipse 3.4中将生成repository这个程序称为generator，而3.5对此重构后命名为publisher。重构后的publish过程简单明了。首先需要创建一个IPublishInfo对象，它负责提供将要生成的repository的情况。包括了meta repository, artifact repository的信息，属性，以及提供辅助信息的advice对象。IPublisherAdvice可以看作类似创建RCP窗口时候的WorkbenchAdvice和WorkbenchWindowAdvice等辅助类。它用来提供需要记录在repository中的IU特殊信息。比如IU的属性，touchpoint的类型及各个阶段执行的action，对可执行文件或配置文件IU的处理。\n此外还需要创建IPublisherAction来处理不同类型的IU发布过程。例如BundlesAction来实现发布bundles到repository，FeaturesAction则是处理feature。此外p2已提供的IPublisherAction还包括product action, config action, launcher action和jre action等等[2]。\n有了描述repository情况的publishinfo和发布各种IUs的action后，调用Publisher.publish方法完成repository的发布。\nIPublisherInfo info = createPublisherInfo();\nIPublisherAction[] actions = createActions();\nPublisher publisher = new Publisher(info);\npublisher.publish(actions, new NullProgressMonitor());\n这里有一点需要注意，publish只是把将要用于部署的features/plugins/binary发布到repository，并不负责编译打包它们。先前我们使用过Eclipse Export功能既编译打包features/plugins同时又生成repository。Export实现的过程首先是调用PDE来编译打包features/plugins，再调用对应的publisher应用程序将编译后的features/plugins/product发布为repository。\ncustomized p2 touchpoint 前面一节已经提过IPublishInfo通过额外的IPublisherAdvise来定制发布到repository的IU信息。这里介绍为自己的IU定制新的touchpoint类型，并且要求在配置阶段在操作系统桌面创建应用程序的启动快捷方式。首先为我们的PublisherInfo添加处理touchpoint data的advice，NativeLauncherTouchPoint实现了ITouchpointAdvice接口，publisher在发布的时候当处理到touchpoint data部分，会查找实现了ITouchpointAdvice接口的advice。如果有advice可用，将会让这些advice处理现有的touchpoint data，并且得到新的touchpoint data，并把结果保存到metadata repository当中。\nPublisherInfo result = new PublisherInfo();\nresult.addAdvice(new NativeLauncherTouchPoint());\nNativeLauncherTouchPoint将指定为特定的IU在configure阶段执行createDesktop操作，以及相反的操作，unconfigure阶段执行deleteDesktop操作。\n更改touchpoint type的方法如下。当然也可以为现有的touchpoint type扩展action。内置的touchpoint类型和action的具体命令用法，请参考p2 wiki[3]。\niu.setTouchpointType(DesktopTouchpoint.TOUCHPOINT_TYPE);\ntouchpoint类型和action都是通过extension point来扩展的。通过扩展“org.eclipse.equinox.p2.engine.touchpoints”来添加新的touchpoint类型，扩展”org.eclipse.equinox.p2.engine.actions“将新的action同某个类型关联起来。\np2 repository publish practice 我们创建plug-in 'com.example.p2.touchpoint'来实现桌面快捷方式的扩展，并且创建'com.example.p2.feature'包含touchpoint实现的plug-in。具体实现请参考p2 example源码。\n然后为Mail Application添加p2相关feature的依赖，重新发布得到支持安装软件的新版本。并且用p2 example installer安装它。p.s: 个人感觉Eclipse在包含第三方plug-in时，层次有些问题。p2作为一个runtime的project（跟equinox, ECF同级），居然需要直接或间接依赖help, rcp.platform这样的上层模块。\n接下来创建plug-in 'com.example.mail.desktop' 和 feature 'com.example.mail.desktop.feature'，作为提供桌面快捷方式的IU。用Eclipse Export Feature将'com.example.mail.desktop.feature'导出，实际就是用PDE替我们编译打包:)。\n运行‘com.example.p2.generator'提供的headless publisher来生成我们定制的repository。’/folk/kzhu0/tmp/mail/desktop-deploy'是先前desktop feature导出后的路径，而'/folk/kzhu0/tmp/mail/desktop'是生成repository的路径。\n运行新版本的Mail Application，在Help菜单下面会多出Install New Software选项。将自定义publisher生成的Desktop feature repository添加为新的软件源，安装Mail Desktop Feature。安装完成后，将在桌面找到Mail Application的快捷方式。在Installation Detail里面将会出现这次安装的内容。选中Desktop Feature后选择卸载，桌面的快捷方式文件将会被删除掉。当然也可以使用p2 example installer来为Mail Application安装desktop feature。p.s: example代码里只实现了创建linux/unix桌面快捷方式。\nExample Code Example Code应该只能编译运行在Eclipse 3.5.x。Example Code使用的都是p2 internal API, 而p2 public API将会随Eclipse 3.6首次发布。这些类和方法基本都会保留，但命名，包一定会有重构。\nhttp://code.google.com/p/kane-toolkit/source/browse/#svn/trunk/p2-example\nReference [1] http://wiki.eclipse.org/Equinox/p2/Concepts\n[2] http://wiki.eclipse.org/Equinox/p2/Publisher\n[3] http://wiki.eclipse.org/Equinox/p2/Engine/Touchpoint_Instructions\n","link":"https://kane.mx/posts/archive/blogspot/learn-p2-step-by-step/","section":"posts","tags":["Equinox","p2","Eclipse"],"title":"[Eclipse][P2]Learn p2 step by step"},{"body":"ssh -qTfnN -D LocalPort remotehost\nAll the added options are for a ssh session that's used for tunneling.\n-q :- be very quite, we are acting only as a tunnel.\n-T :- Do not allocate a pseudo tty, we are only acting a tunnel.\n-f :- move the ssh process to background, as we don't want to interact with this ssh session directly.\n-N :- Do not execute remote command.\n-n :- redirect standard input to /dev/null.\nIn addition on a slow line you can gain performance by enabling compression with the -C option.\n","link":"https://kane.mx/posts/archive/blogspot/ssh-forward/","section":"posts","tags":["ssh","Tip"],"title":"[tip]ssh forward"},{"body":"-Dosgi.install.area=\u0026lt;launcher's folder\u0026gt;\n-Declipse.p2.profile=\n","link":"https://kane.mx/posts/archive/blogspot/simulate-p2-self-host-in-eclipse-run/","section":"posts","tags":["p2","Eclipse"],"title":"Simulate p2 self host in Eclipse run"},{"body":"The IPreferenceStore API of Eclipse is based on OSGi's preferences service. Equinox implements several scope context for different preferences, such DefaultScope, InstanceScope and ConfigurationScope. The IPreferenceStore is the wrapper of instance scope for back-compatibility. It stored the data in workspace(osgi.data.area).\nThe workspace folder would be created when launching RCP application if it doesn't exist. But we can use argument '-data @none' to suppress the creation of workspace. If that, the instance scope/IPreferenceStore can't store any value any more.\nThere is a workaround to resolve such issue. Use ConfigurationScope instead of InstanceScope. Both of them are implemented the same interface, so it's easy to migrate to use ConfigurationScope. The data of configuration scope would be stored in @config.dir/.setting folder.\n","link":"https://kane.mx/posts/archive/blogspot/eclipseosgi-preference/","section":"posts","tags":["Equinox","OSGi","Eclipse"],"title":"Eclipse/OSGi preference"},{"body":"Eclipse platform register an OSGi service 'IProxyService' to manage network connection, which has capability to set proxy setting. There are three types of proxy working mode,\nDirect(no proxy), Manual(specified by user), Native(using OS's proxy setting, such as gnome-proxy, IE). There are three types of proxy supported by IProxyService. They're http, https and socks.\nIt also allows to add/remove ip address from white list, which are accessed without connecting proxy.\nEnd users can manage the proxy setting of Eclipse via Preference - General - Network Connections. Eclipse would do persistence of user's setting. Other components of Eclipse also use those proxy settings to access network, such as ECF.\nBelow code snippet shows how to use proxy API to manually specify proxy server,\nproxyService.setProxiesEnabled(true);\nproxyService.setSystemProxiesEnabled(false); IProxyData[] datas = proxyService.getProxyData(); IProxyData proxyData = null; for(IProxyData data : datas) { // clean old data ((ProxyData)data).setSource(\u0026quot;Manual\u0026quot;); //$NON-NLS-1$ data.setUserid(null); //$NON-NLS-1$ data.setPassword(null); //$NON-NLS-1$ if(proxyType == SOCKSPROXY \u0026amp;\u0026amp; IProxyData.SOCKS_PROXY_TYPE.equals(data.getType())) {\nproxyData = data; continue; }else if(proxyType == WEBPROXY \u0026amp;\u0026amp; IProxyData.HTTP_PROXY_TYPE.equals(data.getType())){\nproxyData = data; continue; } data.setHost(null); //$NON-NLS-1$ data.setPort(0); } if(proxyData != null){ proxyData.setHost(proxyServer); proxyData.setPort(proxyPort); } try { proxyService.setProxyData(datas); } catch (CoreException e) { proxyService.setProxiesEnabled(false); proxyService.setSystemProxiesEnabled(false); return false; }\nOfficial API Reference\n","link":"https://kane.mx/posts/archive/blogspot/usage-of-eclipses-proxy-api/","section":"posts","tags":["Eclipse"],"title":"The usage of Eclipse's Proxy API"},{"body":"tune2fs -i 0 -c 0 /dev/sdx\n","link":"https://kane.mx/posts/archive/blogspot/turnoff-automatically-scanning-disk/","section":"posts","tags":["Tip","Linux"],"title":"[tip]Turn off automatically scanning disk when reboot"},{"body":"","link":"https://kane.mx/tags/linux/","section":"tags","tags":null,"title":"Linux"},{"body":"add below lines in ~/.gnomerc\nexport XMODIFIERS=\u0026quot;@im=fcitx\u0026quot;\nexport GTK_IM_MODULE=\u0026quot;xim\u0026quot;\n","link":"https://kane.mx/posts/archive/blogspot/how-to-set-default-input-method-for/","section":"posts","tags":null,"title":"How to set default input method for GNOME"},{"body":"create symbol link under lib/plugins of firefox to link jre/plugins/i386/ns**/libjavaplugin_oji.so\n","link":"https://kane.mx/posts/archive/blogspot/how-to-set-up-jre-environment-in/","section":"posts","tags":["JRE","Firefox","HowTo"],"title":"[HowTo]How to set up jre environment in firefox"},{"body":"","link":"https://kane.mx/tags/firefox/","section":"tags","tags":null,"title":"Firefox"},{"body":"","link":"https://kane.mx/tags/howto/","section":"tags","tags":null,"title":"HowTo"},{"body":"","link":"https://kane.mx/tags/jre/","section":"tags","tags":null,"title":"JRE"},{"body":"Such as,\n(gdb) handle SIGPIPE nostop noprint pass\n","link":"https://kane.mx/posts/archive/blogspot/how-to-ignore-specified-signal-when/","section":"posts","tags":["Tip","GDB","Debug"],"title":"[Debug][tip]How to ignore specified signal when debugging program via gdb"},{"body":"","link":"https://kane.mx/tags/debug/","section":"tags","tags":null,"title":"Debug"},{"body":"","link":"https://kane.mx/tags/gdb/","section":"tags","tags":null,"title":"GDB"},{"body":"Close Notes\nDouble click c:\\notes\\notes.ini to open it.\nAdd one new line \u0026quot;Display_font_adjustment=n\u0026quot; after the third line in notes.ini file. \u0026quot;n\u0026quot; is the number.It can be 1or 2 or 3....and the font will be larger with the number increasing.\nLaunch note\n","link":"https://kane.mx/posts/archive/blogspot/how-to-adjust-font-size-of-notes-editor/","section":"posts","tags":["Tip","IBM Notes"],"title":"[HowTo][tip]How to adjust the font size of Notes editor"},{"body":"","link":"https://kane.mx/tags/ibm-notes/","section":"tags","tags":null,"title":"IBM Notes"},{"body":"Set vm arguments 'osgi.framework.extensions' and 'osgi.frameworkClassPath' when vm starts. If those value are set, those jar or path would be added into the classloader when starting EclipseStarter.\nSee org.eclipse.equinox.launcher.Main for more details in the source code of Eclipse 3.4.\nBest Regards\nKane\n","link":"https://kane.mx/posts/archive/blogspot/add-custom-jar-or-path-into-equinox/","section":"posts","tags":["Equinox","OSGi","Eclipse"],"title":"[OSGi][Eclipse]Add custom jar or path into Equinox Framework"},{"body":"The answer is very simple, using the service 'org.eclipse.service.PackageAdmin'.\n","link":"https://kane.mx/posts/archive/blogspot/osgihow-to-acquire-fragments-of/","section":"posts","tags":["Equinox","OSGi","Eclipse"],"title":"[OSGi]How to acquire the fragments of specified bundle"},{"body":"Equinox uses the adaptor hooks to implement the class loader.\nSee http://wiki.eclipse.org/Adaptor_Hooks for more detail\nBaseClassLoadingHook would search the native code on itself. If it find the file in that jar file, it would extract the native library into its storage folder.\nEclipseClassLoadingHook defines some variables to search the native library. Belows are built-in variables:\nresult.add(\u0026quot;ws/\u0026quot; + info.getWS() + \u0026quot;/\u0026quot;); //$NON-NLS-1$ //$NON-NLS-2$\nresult.add(\u0026quot;os/\u0026quot; + info.getOS() + \u0026quot;/\u0026quot; + info.getOSArch() + \u0026quot;/\u0026quot;); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\nresult.add(\u0026quot;os/\u0026quot; + info.getOS() + \u0026quot;/\u0026quot;); //$NON-NLS-1$ //$NON-NLS-2$\nSo the classloader can find your native library that under those path. If your bundle is jar file, equinox would extract your native library into its storage folder.\nI prefer to use OSGi header(Bundle-NativeCode) defining the path of native code, which still works on other OSGi implementations.\nEquinox defines its url schema, one of them is named as 'BundleURLConnection'. From its name, we know it's used for describing the files of bundle. You can obtain the url of file that is located on bundle by Bundle.getResource()/Bundle.getEntry()/Bundle.findEntries()/Bundle.getResources(). The return value of those functions are an object of BundleURLConnection. Once it's used as the argument of FileLocator.toFileURL(URL), the jar bundle would be unpacked into its storage folder recursively.\n","link":"https://kane.mx/posts/archive/blogspot/eclipseequinoxs-classloader-and-its-url/","section":"posts","tags":["Equinox","OSGi","Eclipse"],"title":"[Eclipse]Equinox's classloader and its URL schema"},{"body":" 1. 将要排版的文字贴到vim了\n2. set textwidth=70\n3. visual模式下选择要排版的文字,按gq, 就变成70字母1行的格式了\n","link":"https://kane.mx/posts/archive/blogspot/tipvim/","section":"posts","tags":null,"title":"[tip][vim]排版小技巧"},{"body":"In vi/vim,\n﻿set file format=unix\nor dos2unix, unix2dos\n","link":"https://kane.mx/posts/archive/blogspot/tipconvert-dos-format-to-unix/","section":"posts","tags":["Tip","Linux"],"title":"[tip]convert dos format to unix"},{"body":"Build c/c++ project always need third party library on linux, such as gtk+, glib. Writing their absolute path in Makefile is not flexible way. You can use pkg-config instead of the absolute path. Below is code snippet:\nGTK_LIB=$(shell pkg-config --libs gtk+-2.0)\nGTK_INC=$(shell pkg-config --cflags gtk+-2.0)\ngcc -o yourlibrary.so $(GTK_INC) $(GTK_LIB)\n","link":"https://kane.mx/posts/archive/blogspot/makefile-tip/","section":"posts","tags":["Tip","Linux","Makefile"],"title":"[tip]Makefile"},{"body":"","link":"https://kane.mx/tags/makefile/","section":"tags","tags":null,"title":"Makefile"},{"body":"OSGi provides a mechanism to let user contribute custom schemes automatically. It avoid some restriction with Java facilities for extending the handlers. The more detail could be found from OSGi specification R4, which has description how OSGi implements URL Handler Service.\nUse a sample to illustrate how to contribute your scheme(protocol):\n1. register your URLStreamHandlerService implementation, which must contain a property named \u0026quot;url.handler.protocol\u0026quot;. below register my scheme 'smb'\npublic void start(BundleContext context) throws Exception {\nHashtable properties = new Hashtable();\nproperties.put( URLConstants.URL_HANDLER_PROTOCOL, new String[] { \u0026quot;smb\u0026quot; } );\ncontext.registerService(URLStreamHandlerService.class.getName(), new SmbURLHandler(), properties );\n}\n2. your URL Handler extends AbstractURLStreamHandlerService, and implements abstract function 'openConnection(URL)'\npublic class SmbURLHandler extends AbstractURLStreamHandlerService {\npublic URLConnection openConnection(URL url) throws IOException {\nreturn new SmbURLConnection(url);\n}\n}\n3. your URL Connection extends java.net.URLConnection\npublic class SmbURLConnection extends URLConnection {\nprotected SmbURLConnection(URL url) {\nsuper(url);\n}\npublic void connect() throws IOException {\n}\n}\n","link":"https://kane.mx/posts/archive/blogspot/url-handlers-service/","section":"posts","tags":["Equinox","URL Handler Service","OSGi"],"title":"[OSGi][Equinox]URL Handlers Service"},{"body":"","link":"https://kane.mx/tags/url-handler-service/","section":"tags","tags":null,"title":"URL Handler Service"},{"body":"OSGi Spec defines Bundle-NativeCode header to contain a specification of native code libraries contained in that bundle. All magic things are initialized by org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLibrary(String) and org.eclipse.osgi.framework.internal.core.BundleLoader.findLibrary(String). Then BundleLoader uses the org.eclipse.osgi.baseadaptor.BaseData(an implementation of BundleData) to find the library path, if the bundle is NOT a jar file, it would directly get the absolute path of library. Otherwise, the BaseData would extract the library file if it could NOT find it in OSGi bundle storage(located in ${data}/org.eclipse.osgi/bundles/[bundle_id]/.cp/). Refer to org.eclipse.osgi.baseadaptor.BaseData.findLibrary(String) for more detail.\n","link":"https://kane.mx/posts/archive/blogspot/bundle-nativecode-implementation-in/","section":"posts","tags":["Equinox","NativeCode","Bundle","OSGi","Eclipse"],"title":"[OSGi][Equinox]the Bundle-NativeCode implementation in Equinox"},{"body":"","link":"https://kane.mx/tags/bundle/","section":"tags","tags":null,"title":"Bundle"},{"body":"","link":"https://kane.mx/tags/nativecode/","section":"tags","tags":null,"title":"NativeCode"},{"body":"1\u0026gt; 是输出正确数据， 2\u0026gt; 则是错误数据输出项目, 若要同时写入同一个档案需要使用 2\u0026gt;\u0026amp;1 /dev/null 是什么呢？基本上，那就有点像是一个『黑洞』的垃圾桶功能！当你输入的任何东西导向到这个虚拟的垃圾桶装置时，『他就会凭空消失不见了～～』\n","link":"https://kane.mx/posts/archive/blogspot/linux-shelllearning-note-31908/","section":"posts","tags":["Linux","Shell"],"title":"[shell]Learning Note - 3/19/08"},{"body":"You must see the qualifier string property when exporting your features and plug-ins by Eclipse pde. But specified qualifier string won't appear after you export the features successfully.\nIf you want to use the qualifier string, you must define your feature and plug-in version like below:\n1.0.0.qualifier, 2.2.2.qaulifier\n:)\n","link":"https://kane.mx/posts/archive/blogspot/how-to-use-qualifier-string-when/","section":"posts","tags":["PDE","Eclipse"],"title":"[Eclipse]How to use qualifier string when exporting features and plug-ins"},{"body":"最近几天被一个注册表相关的defect搞的焦头烂额。\n背景是这样的，产品在安装的时候需要通过修改注册表注册文件关联等信息。在先前安装程序基于InstallShield时工作正确，但在最近安装程序改用MSI后，我们写入注册表的信息没有被写到所期望的位置。\n通过各种试验，查找资料，终于搞明白原因。我们修改注册表的进程不是当前用户进程，而是系统进程，因此写入到HKEY_CURRENT_USER下的数据不能被写入到当前登陆用户下。\nWe should not use \u0026quot;HKEY_CURRENT_USER\u0026quot; to retrival current user's registry key value. Because Windows Services always startup before user login. It may happen some error or loading the wrong setting profile. If you still insist on using the current user registry key setting, please refer \u0026quot;RegOpenCurrentUser\u0026quot;.\n最后只好将这些数据写到了Local Machine键值下。\n","link":"https://kane.mx/posts/archive/blogspot/suck-windows-registry/","section":"posts","tags":["注册表"],"title":"万恶的注册表"},{"body":"","link":"https://kane.mx/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/","section":"tags","tags":null,"title":"注册表"},{"body":"When you develop a rich client application base on eclipse framework, and your application require eclipse platform feature, you would find that your application has some menu items contributed by eclipse platform. Those menu items are defined by several plug-ins' implementation of actionSet extention point. In fact Eclipse provides an activity mechanism to suppress the extension points which you don't want to use. However, you must know the identification name of extension points which you want to suppress. It's a hard work to find out all of them from dozens of plugins. so, I wrote a utility function to list all the extension points of specified name.\nIExtensionRegistry registry = Platform.getExtensionRegistry(); IExtensionPoint extensionPoint = registry.getExtensionPoint(\u0026quot;org.eclipse.ui.actionSets\u0026quot;); IExtension\\[\\] extensions = extensionPoint.getExtensions(); for(int i = 0; i \u0026lt; extensions.length; i++){ IConfigurationElement elements\\[\\] = extensions\\[i \\].getConfigurationElements(); for(int j = 0; j \u0026lt; elements.length; j++){ String pluginId = elements\\[j\\].getNamespaceIdentifier(); if(pluginId.indexOf(\u0026quot;org.eclipse\u0026quot;) \u0026gt; -1){ //$NON-NLS-1$ IConfigurationElement\\[\\] subElements = elements\\[j\\].getChildren(\u0026quot;action\u0026quot;); for(int m = 0; m \u0026lt; subElements.length; m++){ System.out.println(\u0026quot;Plugin: \u0026quot; + pluginId + \u0026quot; Id: \u0026quot; + subElements\\[m\\].getAttribute(\u0026quot;id\u0026quot;)); } } } } and the follow snippet is about the activities of menus of eclipse platform:\n","link":"https://kane.mx/posts/archive/blogspot/get-rid-of-menus-of-eclipse-platform/","section":"posts","tags":["Eclipse","RCP"],"title":"[Eclipse]get rid of the menus of eclipse platform"},{"body":"","link":"https://kane.mx/tags/rcp/","section":"tags","tags":null,"title":"RCP"},{"body":"","link":"https://kane.mx/tags/jni/","section":"tags","tags":null,"title":"JNI"},{"body":"java程序开发中经常用到JNI调用本地library, 同时又希望将library同class文件编译成一个jar文件以方便deploy.\n但是JDK的classloader不支持从jar文件中加载library, 一个变通的方法就是jar里的library以临时文件的方式写到临时目录或java.library目录.\n附上两篇文档链接 :\n**Load Library inside a jar file\n**\n使用JNI时，装载本地库的小技巧\n","link":"https://kane.mx/posts/archive/blogspot/jar/","section":"posts","tags":["Java","JNI"],"title":"加载jar文件里的本地库"},{"body":"Those days my work is focus on eclipse's update. Now I understand the general mechanism and meet some issues when using it in development work.\nThe update mechanism includes four major types: install, enable, disable and uninstall. And all of those operations can be executed by command line, such as installing a feature can use following line:\n-application org.eclipse.update.core.standaloneUpdate -command install -featureId my.feature -version 1.0.0 -from file:/v:/local_updateSite/ -to file:/v:/eclipse/.\nThe installation process would copy the feature and plugins which are included by the feature to the local site from the update site, then execute the feature's global install handler if it has one.\nSome strange issue occurs when I want to disable a feature.Then I try to disable the feature with command,\n-command disable -featureId my.feature -version 1.0.0 -to file:/v:/eclipse/\nThe output of command means that the command is executed successfully.\nBut I list the status of features with command line \u0026quot;-command listFeatures\u0026quot;, the status of my.feature is still enable.\nThen I try to uninstall my.feature with command,\n-command uninstall -featureId my.feature -version 1.0.0 -to file:/v:/eclipse/\nIt fails, and the following is the root cause found in log file.\n!MESSAGE [Cannot find unconfigured feature my.feature with version 1.0.0]\nunconfigured feature means the feature is disabled.\nI posted my question in forum, and one guy told me that it might be a bug of eclipse and advised me to fire a bug for it.\n","link":"https://kane.mx/posts/archive/blogspot/eclipse-update-support/","section":"posts","tags":["Update","Eclipse","RCP"],"title":"[Eclipse]Eclipse update support"},{"body":"","link":"https://kane.mx/tags/update/","section":"tags","tags":null,"title":"Update"},{"body":"I met a defect that dynamically created menu items disappear after creating a new viewPart. It caused me overtime last Friday. Today I find the root cause.\nThe scenario is:\nopen first document, the items are shown well\nopen another document, the items disappear\nThe requirement is that showing the menu items while current part is document, otherwise hide them.\nSo our implementation is:\nwhen current document part is deactivated, set menu items invisible\nwhen document part is activated, set menu items visible\nAfter debugging, I found that menu items was updated before the part activated listener was notified. Hence the menu is invisible while the parent menu is updated. The resolved solution is that setting menu items visible while part opened listener is notified.\n","link":"https://kane.mx/posts/archive/blogspot/call-sequence-between-partactivated-and/","section":"posts","tags":["Eclipse","RCP"],"title":"[Eclipse]The call sequence between partActivated and menu update"},{"body":"I need use remote debug in our project, however just some experience in Weblogic were found from internet. After my investigation, I got some experience about using Eclipse remote debug RCP.\nThere are two important parameters for jvm. And we must launch remote java app with those two parameters.\n-Xdebug //tells jvm starting with debug mode\n-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044 //transport=dt_socket represents communication with socket, address=1044 represents that the port number is 1044\nThen there are 3 steps in local env:\n1.import source code into eclipse's project\n2.Debug-Remote Java Application, see attachement as a sample\n3.insert breakpoint,\nupdate:\na simpler way:\n-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000\n","link":"https://kane.mx/posts/archive/blogspot/remote-debug-in-eclipse/","section":"posts","tags":["Java","Eclipse","Debug"],"title":"[debug][java]Remote debug in Eclipse"}]