<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Continuous Deployment on The road</title><link>https://kane.mx/tags/continuous-deployment/</link><description>Recent content in Continuous Deployment on The road</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2021, Kane Zhu; all rights reserved.</copyright><lastBuildDate>Sat, 28 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kane.mx/tags/continuous-deployment/index.xml" rel="self" type="application/rss+xml"/><item><title>亚马逊的部署最佳实践</title><link>https://kane.mx/posts/2020/the-best-practise-of-deployment-at-amazon/</link><pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2020/the-best-practise-of-deployment-at-amazon/</guid><description>
&lt;p>近期&lt;a href="https://aws.amazon.com/builders-library/">Amazon Builders Library&lt;/a>发布了数篇文章介绍亚马逊如何实践持续部署，同时分享了亚马逊在部署方面的最佳实践。&lt;/p>
&lt;p>这里将这三篇文章核心内容做个概述，方便大家按需细读。&lt;/p>
&lt;h3 id="going-faster-with-continuous-deliverygoing-faster-with-cd">&lt;a href="https://aws.amazon.com/builders-library/going-faster-with-continuous-delivery/?did=ba_card&amp;amp;trk=ba_card">Going faster with continuous delivery&lt;/a>&lt;/h3>
&lt;p>这篇文章先是分享了亚马逊持续改进和软件自动化的文化(Amazonian随时都惦记着的&lt;a href="https://aws.amazon.com/careers/culture/">领导力准则&lt;/a>)，然后介绍了亚马逊内部的持续部署工具Pipelines。从一个试点工具进化为亚马逊标准、一致且简洁的发布工具。并且将构建和发布软件的最佳实践检查也融入到Pipelines中。&lt;/p>
&lt;p>接下来是分享如何减小故障影响到客户的风险。有过软件开发经验的都知道，软件变更引入故障是不可避免的，如何将故障对客户的影响控制到最小是非常重要的。该文从下面几个方面给出了建议，&lt;/p>
&lt;ul>
&lt;li>&lt;strong>部署卫生&lt;/strong>，如对新部署程序的健康检查&lt;/li>
&lt;li>&lt;strong>上生产系统之前的测试&lt;/strong>，自动化单元、集成、预生产测试&lt;/li>
&lt;li>&lt;strong>生产系统上的验证&lt;/strong>，分批的部署，控制故障影响半径&lt;/li>
&lt;li>&lt;strong>控制何时发布软件&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>最后作者介绍了亚马逊如何快速执行业务创新 -- 通过&lt;strong>自动化一切事情&lt;/strong>。&lt;/p>
&lt;h3 id="automating-safe-hands-off-deploymentsautomating-safe-hands-off-deployment">&lt;a href="https://aws.amazon.com/builders-library/automating-safe-hands-off-deployments/?did=ba_card&amp;amp;trk=ba_card">Automating safe, hands-off deployments&lt;/a>&lt;/h3>
&lt;p>这篇文章很好的呼应了&lt;a href="https://aws.amazon.com/builders-library/going-faster-with-continuous-delivery/?did=ba_card&amp;amp;trk=ba_card">Going faster with continuous delivery&lt;/a>一文中如何避免新的部署导致故障影响，非常详细的介绍了亚马逊关于自动化安全部署的实践。&lt;/p>
&lt;p>对于持续部署，&lt;code>源码&lt;/code> -&amp;gt; &lt;code>构建&lt;/code> -&amp;gt; &lt;code>测试&lt;/code> -&amp;gt; &lt;code>生产&lt;/code> 这个流程大家都很熟悉。&lt;/p>
&lt;figure>&lt;img src="https://d1.awsstatic.com/builderslibrary/architecture-images/1-Four-Pipeline-Phases.b168244d38855d468e594d26f0a5fcc40892a5da.PNG"
alt="4 pipeline phases"/>
&lt;/figure>
&lt;p>从下图看，亚马逊对于&lt;code>源码&lt;/code>和&lt;code>构建&lt;/code>的理解是非常深入和全面的。&lt;/p>
&lt;figure>&lt;img src="https://d1.awsstatic.com/builderslibrary/architecture-images/2-Source-and-Build-Phases.e873d57fa8365a34e6fdb6699b3541caef9a019c.PNG"
alt="source and build"/>
&lt;/figure>
&lt;p>&lt;code>源码&lt;/code>并不仅仅是应用程序源代码，还可以包括运维工具代码、测试代码、基础架构代码、静态资源、依赖库、配置和操作系统补丁。&lt;/p>
&lt;p>&lt;code>代码审核&lt;/code>是必须的。对于全自动的流水线，代码审核是最后一道人工核验。代码审核不仅仅是审核代码的正确性，还应该检查代码是否包括足够的测试，是否有完善的工具来监测部署以及能否安全的回退。&lt;/p>
&lt;p>同时&lt;code>构建&lt;/code>也不光是编译源代码，打包并存储构件。也包含单元测试，静态代码分析，代码覆盖率检查，代码审核检查。&lt;/p>
&lt;p>&lt;code>测试&lt;/code>在亚马逊是一个多阶段的预生产环境，详见下图。&lt;/p>
&lt;figure>&lt;img src="https://d1.awsstatic.com/builderslibrary/architecture-images/3-Test-Phase.32a876ed20c3d585a9a761c6b07f0c3af1fff21d.PNG"
alt="test deployments in pre-production environments"/>
&lt;/figure>
&lt;p>集成测试是自动化的模拟客户一样使用服务，实现端到端的测试。部署到生产之前，还需要执行向后兼容性测试以及借助负载均衡实现one-box测试。&lt;/p>
&lt;p>AWS服务是部署在全球多个区域内的多个可用区，为了减少部署故障对客户的影响，&lt;code>生产&lt;/code>通过&lt;strong>波次&lt;/strong>部署来分批分阶段的安全部署。&lt;/p>
&lt;figure>&lt;img src="https://d1.awsstatic.com/builderslibrary/architecture-images/5-Prod-Phase.31bac8cfc2ae3c68c5ee1e7332c0e6d7b2385bcf.PNG"
alt="production deployments"/>
&lt;/figure>
&lt;p>首先部署是在单区域的单可用区做one-box部署，如果引起负面问题，会自动回退并停止生产后续的部署。系统指标的监控是实现自动化安全部署的核心，需要通过监控的指标来自动触发部署回退。&lt;/p>
&lt;p>Bake time也是实践经验总结出来的精髓。有时故障不是在部署后马上显现的，需要时间才会逐渐显现。设置合理的Bake time，能够让故障有足够时间被暴露出来，不至于照成大范围影响。&lt;/p>
&lt;h3 id="ensuring-rollback-safety-during-deploymentsensuring-rollback-safety-during-deployments">&lt;a href="https://aws.amazon.com/builders-library/ensuring-rollback-safety-during-deployments/?did=ba_card&amp;amp;trk=ba_card">Ensuring rollback safety during deployments&lt;/a>&lt;/h3>
&lt;p>因为故障是不可避免的，部署能够被安全回退是非常必要的。这篇文章就详细介绍了如何实现可安全回退的部署 -- 通过&lt;strong>两阶段部署的技术&lt;/strong>，以及序列化的最佳实践。&lt;/p>
&lt;figure>&lt;img src="https://d1.awsstatic.com/legal/builders-library/Screenshots/two-phase-deployment.4322b209195704c61f7a3f311413a76f264afb8b.png"
alt="two-phase deployment technique"/>
&lt;/figure>
&lt;blockquote>
&lt;p>这三篇文章分别从术和器的角度分享了亚马逊在软件部署的实践经验，开发者们可以结合自身业务情况集成适合的最佳实践。&lt;/p>
&lt;/blockquote></description></item></channel></rss>