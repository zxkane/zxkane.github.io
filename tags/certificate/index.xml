<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>certificate on The road</title><link>https://kane.mx/tags/certificate/</link><description>Recent content in certificate on The road</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2021, Kane Zhu; all rights reserved.</copyright><lastBuildDate>Thu, 24 Nov 2011 15:58:00 +0800</lastBuildDate><atom:link href="https://kane.mx/tags/certificate/index.xml" rel="self" type="application/rss+xml"/><item><title>JRE/JDK's certificate issue and solution</title><link>https://kane.mx/posts/archive/blogspot/jrejdks-certificate-issue-and-solution/</link><pubDate>Thu, 24 Nov 2011 15:58:00 +0800</pubDate><guid>https://kane.mx/posts/archive/blogspot/jrejdks-certificate-issue-and-solution/</guid><description>
&lt;p>The problem came from I tried to set up send mail server(SMTP) for my Gerrit server. My Gerrit server is using OpenID for user authorization, so I registered a new email account to send notification from Gerrit.&lt;/p>
&lt;p>Most of email service providers require the secure authorization when using its SMTP server to send mail. However the root CA of my email provider is not added into the default certificate of JRE. So Gerrit always failed to send email due to ssl verification exception.&lt;/p>
&lt;p>My solution is adding the certificate of SMTP server into the certificate used by JRE.&lt;/p>
&lt;p>The detail steps are below,&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Use &lt;strong>open_ssl&lt;/strong> utility to the certificate of SMTP server or its root CA of email provider. Below command can list the certificate of SMTP and its chain. You can paste any of them into a file.&lt;/p>
&lt;p>openssl s_client -connect smtp.163.com:465&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then import the certificate saved in previous step into my JRE's key store. The default password of JRE's default keystore is '&lt;strong>changeit&lt;/strong>'. You can find the &lt;em>cacerts&lt;/em> under jre/lib/security folder.&lt;/p>
&lt;p>sudo keytool -import -keystore cacerts -alias Smtp163com -file /tmp/smtp.163.PEM&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Using the certificate of Windows code signing to sign jars</title><link>https://kane.mx/posts/archive/blogspot/using-certificate-of-windows-code/</link><pubDate>Mon, 18 Jul 2011 21:03:00 +0800</pubDate><guid>https://kane.mx/posts/archive/blogspot/using-certificate-of-windows-code/</guid><description>
&lt;p>I did sign the jars via reusing the existing certificate of Windows code signing several months ago. Writing it down for further reference.&lt;/p>
&lt;p>Whatever your purpose of reusing the existing Windows code certificate, I only document the way from technical perspective.&lt;/p>
&lt;p>After buying the certificate of Windows code signing from CA, you will get a .pvk file that stores both the certificate and private key. PVK file is the PKCS12 format[1], however java uses JKS format by default. So you need convert the pvk file to JKS keystore and certificate.&lt;/p>
&lt;p>Since 6.0 JDK supports PKCS12 directly, you can use 'jarsigner' and PVK file to sign jars directly[2].&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>
&lt;span class="ln">2&lt;/span>jarsigner -keystore /working/mystore.pvk -storetype pkcs12 -storepass myspass -keypass j638klm -signedjar sbundle.jar bundle.jar jane &lt;/code>&lt;/pre>&lt;/div>
&lt;p>Or using keytool to convert the PKCS#12 to JKS format[3] if using Eclipse PDE build to sign your jars.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>
&lt;span class="ln">2&lt;/span>keytool -importkeystore -srckeystore KEYSTORE.pvk -destkeystore KEYSTORE.jks  -srcstoretype PKCS12 -deststoretype JKS -srcstorepass mysecret -deststorepass mysecret -srcalias myalias -destalias myalias -srckeypass mykeypass -destkeypass mykeypass -noprompt  &lt;/code>&lt;/pre>&lt;/div>
&lt;p>[1] &lt;a href="http://en.wikipedia.org/wiki/PKCS">http://en.wikipedia.org/wiki/PKCS&lt;/a>&lt;br>
[2] &lt;a href="http://download.oracle.com/javase/6/docs/technotes/tools/solaris/jarsigner.html">http://download.oracle.com/javase/6/docs/technotes/tools/solaris/jarsigner.html&lt;/a>&lt;br>
[3] &lt;a href="http://shib.kuleuven.be/docs/ssl_commands.shtml#keytool">http://shib.kuleuven.be/docs/ssl_commands.shtml#keytool&lt;/a>&lt;/p></description></item></channel></rss>