<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cursor on The road</title><link>https://kane.mx/tags/cursor/</link><description>Recent content in Cursor on The road</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 11 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kane.mx/tags/cursor/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Amazon Bedrock as a Custom OpenAI Server Alternative in Cursor</title><link>https://kane.mx/posts/2024/cursor-meets-bedrock/</link><pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2024/cursor-meets-bedrock/</guid><description>
&lt;p>&lt;a href="https://www.cursor.com/">Cursor&lt;/a> is a powerful AI-assisted programming Integrated Development Environment (IDE) that comes with built-in Large Language Model (LLM) capabilities to aid in coding. With the introduction of &lt;a href="https://aws.amazon.com/bedrock/">Amazon's Bedrock&lt;/a> Claude 3.5 model, developers now have access to advanced alternatives. In this post, we'll explore how to set up a custom gateway for Amazon Bedrock with the Claude Sonnet 3.5 foundation model and use it in Cursor as a custom model provider. This approach allows us to harness the cutting-edge language model capabilities of Amazon Bedrock within the familiar Cursor environment, potentially offering enhanced performance and cost-effectiveness for AI-assisted coding tasks.&lt;/p>
&lt;p>&lt;a href="https://kane.mx/posts/2024/cursor-meets-bedrock/">Read More&lt;/a>&lt;/p></description></item></channel></rss>