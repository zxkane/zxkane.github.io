<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IAM on The road</title><link>https://kane.mx/tags/iam/</link><description>Recent content in IAM on The road</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2021, Kane Zhu; all rights reserved.</copyright><lastBuildDate>Mon, 08 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://kane.mx/tags/iam/index.xml" rel="self" type="application/rss+xml"/><item><title>为Kubernetes中任意应用添加基于oauth2的认证保护 (下)</title><link>https://kane.mx/posts/effective-cloud-computing/oauth2-proxy-on-kubernetes/part2/</link><pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/effective-cloud-computing/oauth2-proxy-on-kubernetes/part2/</guid><description>
&lt;p>本文是&lt;a href="https://kane.mx/posts/effective-cloud-computing/oauth2-proxy-on-kubernetes/part1/">为Kubernetes中任意应用添加基于oauth2的认证保护&lt;/a>的下篇，将图文详解如何使用基于&lt;a href="https://open-doc.dingtalk.com/microapp/serverapi2/kymkv6">钉钉认证&lt;/a>的&lt;a href="https://github.com/bitly/oauth2_proxy">oauth2 proxy&lt;/a>为自身本没有认证授权功能的Web站点实现认证及授权。&lt;/p>
&lt;blockquote>
&lt;p>示例是使用的&lt;a href="https://aws.amazon.com/eks/?nc1=f_ls">AWS EKS&lt;/a>服务作为K8S环境。鉴于K8S的应用运行时属性，该示例也可以部署在其他云厂商托管的K8S。&lt;/p>
&lt;/blockquote>
&lt;h3 id="示例模块简介">示例模块简介&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/ingress-nginx">Nginx Ingress Controller&lt;/a>为K8S集群内Web应用提供反向代理，以及支持外部认证。&lt;/li>
&lt;li>简单的Web站点，基于&lt;a href="https://hub.docker.com/_/nginx">Nginx docker容器&lt;/a>。该站点默认没有认证及授权功能，使用外部&lt;a href="https://open-doc.dingtalk.com/microapp/serverapi2/kymkv6">钉钉&lt;/a>应用作为认证及授权。&lt;/li>
&lt;li>&lt;a href="https://github.com/zxkane/oauth2_proxy">OAuth2 Proxy on Dingtalk&lt;/a>提供基于&lt;a href="https://open-doc.dingtalk.com/microapp/serverapi2/kymkv6">钉钉&lt;/a>应用的扫码认证及授权，只有认证且授权的用户才可以访问上面的Web站点。&lt;/li>
&lt;/ul>
&lt;h3 id="默认设定">默认设定&lt;/h3>
&lt;ul>
&lt;li>Web站点域名&lt;code>web.kane.mx&lt;/code>&lt;/li>
&lt;li>认证服务域名&lt;code>oauth.kane.mx&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="准备aws-eksaws-eks环境">准备&lt;a href="https://aws.amazon.com/eks/?nc1=f_ls">AWS EKS&lt;/a>环境&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html">创建EKS集群&lt;/a>。由于&lt;a href="https://github.com/kubernetes/ingress-nginx">Nginx Ingress&lt;/a>服务是LoadBalancer类型，EKS创建NLB或ELB对应的targets时需要targets部署在public VPC subnets，所以为了简化部署EKS集群的VPC subnets都选择public subnet。新建的EKS集群允许公开访问。&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/managing-auth.html">本地安装配置kubectl, aws-iam-authenticator&lt;/a>用于远程管理集群。&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html">为集群添加worker节点&lt;/a>。&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/helm.html">配置Helm部署环境&lt;/a>。&lt;/li>
&lt;/ol>
&lt;h3 id="钉钉应用准备">钉钉应用准备&lt;/h3>
&lt;ol>
&lt;li>为企业或组织开通&lt;a href="https://open-dev.dingtalk.com/#/index">钉钉开发平台&lt;/a>&lt;/li>
&lt;li>创建一个新的&lt;a href="https://open-dev.dingtalk.com/#/loginAndShareApp">移动应用&lt;/a>。回调域名填写&lt;code>&amp;lt;http or https&amp;gt;/&amp;lt;认证服务域名&amp;gt;/oauth2/callback&lt;/code>。记录下来应用的&lt;code>appId&lt;/code>和&lt;code>appSecret&lt;/code>。&lt;/li>
&lt;li>创建一个&lt;a href="https://open-dev.dingtalk.com/#/create-bench/self">企业内部工作台应用&lt;/a>。地址可以随意设置。服务器出口IP设置为&lt;code>EKS集群中工作节点的公网IP&lt;/code>或者&lt;code>NAT EIP&lt;/code>，取决于工作节点如何访问Internet。并记录下来应用&lt;code>appKey&lt;/code>和&lt;code>appSecret&lt;/code>。&lt;/li>
&lt;/ol>
&lt;h3 id="部署示例应用">部署示例应用&lt;/h3>
&lt;ol>
&lt;li>克隆&lt;a href="https://github.com/zxkane/hands-on-dingtalk-oauth2-proxy">示例&lt;/a>部署脚本。&lt;/li>
&lt;li>替换&lt;code>values.yaml&lt;/code>中的&lt;code>dingtalk_corpid&lt;/code>为工作台应用的&lt;code>appKey&lt;/code>， &lt;code>dingtalk_corpsecret&lt;/code>为工作台应用的&lt;code>appSecret&lt;/code>。
由于社区维护的&lt;a href="https://github.com/helm/charts/tree/master/stable/oauth2-proxy">oauth2-proxy charts&lt;/a>并不支持dingtalk扩展的SECRET ENV，所以将密钥配置到了&lt;code>configmap&lt;/code>中。用于生产环境的话，建议按&lt;a href="https://github.com/pilipa-cn/charts/commit/7ac0f67acc71577275f743bdcf9a870bd65361b0">这个commit&lt;/a>使用&lt;code>secret&lt;/code>保存应用secret。
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="hl">&lt;span class="lnt">71
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="lnt">72
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">oauth2-proxy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">clientID&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">aaa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">clientSecret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bbb&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cookieSecret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ccc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">configFile&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|+&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> email_domains = [ &amp;#34;*&amp;#34; ]
&lt;/span>&lt;span class="sd"> cookie_domain = &amp;#34;kane.mx&amp;#34;
&lt;/span>&lt;span class="sd"> cookie_secure = false
&lt;/span>&lt;span class="hl">&lt;span class="sd"> dingtalk_corpid = &amp;#34;&amp;lt;appkey of dingtalk app&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="sd"> dingtalk_corpsecret = &amp;#34;&amp;lt;appsecret of dingtalk app&amp;gt;&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
如果仅希望企业部分部门的员工可以获得授权，在上面&lt;code>configFile&lt;/code>配置下添加如下配置，
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>&lt;span class="l">dingtalk_departments = [&amp;#34;xx公司/产品技术中心&amp;#34;,&amp;#34;xx公司/部门2/子部门3&amp;#34;]&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>替换部署应用的域名为你的域名。&lt;/li>
&lt;li>执行以下命令安装Helm部署依赖。
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>helm dep up&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>执行以下命令部署nginx ingress controller, web应用以及oauth2 proxy
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>helm upgrade --install -f values.yaml --set oauth2-proxy.config.clientID&lt;span class="o">=&lt;/span>&amp;lt;移动应用appid&amp;gt;,oauth2-proxy.config.clientSecret&lt;span class="o">=&lt;/span>&amp;lt;移动应用appsecret&amp;gt; site-with-auth --wait ./&lt;/code>&lt;/pre>&lt;/div>
如果集群中已经部署了&lt;code>Nginx Ingress Controller&lt;/code>，修改&lt;code>values.yaml&lt;/code>如下将忽略部署Nginx ingress，
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="hl">&lt;span class="lnt">50
&lt;/span>&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">affinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">nginx-ingress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="hl">&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">controller&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ingressClass&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">config:&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>部署成功后，获取&lt;code>ELB&lt;/code>地址。
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>kubectl get svc -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{ $.status.loadBalancer.ingress[*].hostname }&amp;#39;&lt;/span> &amp;lt;deployment name&amp;gt;-nginx-ingress-controller&lt;span class="p">;&lt;/span>&lt;span class="nb">echo&lt;/span>
&lt;span class="ln">2&lt;/span>a3afe672259c511e98e2a0a0d88fda3e-xx.elb.ap-southeast-1.amazonaws.com&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="部署成功后配置">部署成功后配置&lt;/h3>
&lt;p>将站点和oauth服务域名解析到上面部署创建的ELB上。&lt;/p>
&lt;h3 id="测试">测试&lt;/h3>
&lt;p>访问Web站点(如本示例中的&lt;code>http://web.kane.mx&lt;/code>)，未授权的情况下，调转到钉钉应用扫码登录界面。使用组织内成员的钉钉扫码授权后，将跳转回Web站点应用，可以正常浏览该域名下的页面。&lt;/p></description></item><item><title>为Kubernetes中任意应用添加基于oauth2的认证保护 (上)</title><link>https://kane.mx/posts/effective-cloud-computing/oauth2-proxy-on-kubernetes/part1/</link><pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/effective-cloud-computing/oauth2-proxy-on-kubernetes/part1/</guid><description>
&lt;p>企业随着业务的发展，必然会部署各种各样的IT系统。出于安全性的考虑，一些系统仅可企业内部使用，甚至仅开放给企业部分部门员工使用。&lt;/p>
&lt;p>这些IT系统大致可分为两类，&lt;/p>
&lt;ol>
&lt;li>系统本身不支持任何认证机制，例如资讯或文档类系统。需要增加认证保护，能够限制非企业员工访问即可。系统运维通常的做法是，为站点设置&lt;a href="https://en.wikipedia.org/wiki/Basic_access_authentication">HTTP Basic认证&lt;/a>保护。由于&lt;a href="https://en.wikipedia.org/wiki/Basic_access_authentication">HTTP Basic认证&lt;/a>是通过预设的用户、密码认证，认证信息比较容易泄露。即使定期更换密码，但需要额外的机制通知用户密码的变更，用户体验也不好。&lt;/li>
&lt;li>系统自身支持认证，甚至支持多种认证机制。比如最常用的开源CI/CD工具，&lt;a href="https://jenkins.io/">Jenkins&lt;/a>内置支持本地数据库认证、通过&lt;a href="https://plugins.jenkins.io/#">插件&lt;/a>支持多种第三方系统集成认证。如果大量的IT系统都有一套独立的用户管理，随着企业的员工的变更，用户的增删等操作对系统管理员来说是不小的工作量。同时，也很容易由于人为疏忽，造成资产、数据的安全隐患。&lt;/li>
&lt;/ol>
&lt;p>假设企业自身已经有了一套OA系统包含员工、组织结构管理，例如，国内目前最为普及流行的&lt;a href="https://www.dingtalk.com/">钉钉&lt;/a>或&lt;a href="https://work.weixin.qq.com/">企业微信&lt;/a>。我们完全可以提供一套基于&lt;a href="https://oauth.net/2/">oauth 2.0协议&lt;/a>的认证方式，让以上两类IT系统使用企业已有的OA系统(&lt;a href="https://www.dingtalk.com/">钉钉&lt;/a>或&lt;a href="https://work.weixin.qq.com/">企业微信&lt;/a>)来实现登录认证。做到这一点后，企业无论有多少IT系统都不再需要额外管理用户的成本，并且也避免了数据安全隐患。&lt;/p>
&lt;p>&lt;a href="https://www.dingtalk.com/">钉钉&lt;/a>通过&lt;a href="https://open-dev.dingtalk.com">钉钉开放平台&lt;/a>提供的API开放了许多钉钉内部的能力，例如，&lt;a href="https://open-doc.dingtalk.com/microapp/serverapi2/vt6khw">身份验证&lt;/a>、&lt;a href="https://open-doc.dingtalk.com/microapp/serverapi2/cqfmel">通讯录管理&lt;/a>等等。然而&lt;a href="https://open-doc.dingtalk.com/microapp/serverapi2/kymkv6">钉钉的三方网站登录接口&lt;/a>并不是标准的&lt;a href="https://oauth.net/2/">oauth 2.0协议&lt;/a>实现，我们需要通过一个&lt;a href="https://github.com/zxkane/oauth2_proxy">oauth2 proxy&lt;/a>代理工具实现将&lt;a href="https://open-doc.dingtalk.com/microapp/serverapi2/kymkv6">钉钉的三方网站登录&lt;/a>兼容&lt;a href="https://oauth.net/2/">oauth2&lt;/a>协议。同理，使用&lt;a href="https://github.com/bitly/oauth2_proxy">这个oauth2代理工具&lt;/a>，可以使用&lt;a href="https://github.com/bitly/oauth2_proxy#google-auth-provider">Google&lt;/a>、&lt;a href="https://github.com/bitly/oauth2_proxy#facebook-auth-provider">Facebook&lt;/a>等三方网站作为统一认证方式。&lt;/p>
&lt;p>有了基于&lt;a href="https://github.com/zxkane/oauth2_proxy">钉钉的oauth2代理&lt;/a>作为企业统一登录方式，对于上面两大类系统的认证需求解决方案分别如下，&lt;/p>
&lt;ol>
&lt;li>部署在&lt;a href="https://kubernetes.io/">Kubernetes&lt;/a>中无内置认证机制的Web应用，通过&lt;a href="https://kubernetes.github.io/ingress-nginx/">nginx-ingress&lt;/a>的&lt;a href="https://kubernetes.github.io/ingress-nginx/examples/auth/oauth-external-auth/">外部OAUTH认证&lt;/a>实现基于oauth2的安全认证。&lt;/li>
&lt;li>&lt;a href="https://jenkins.io/">Jenkins&lt;/a>可以通过&lt;a href="https://plugins.jenkins.io/reverse-proxy-auth-plugin">反向代理插件&lt;/a>实现使用oauth2认证登录。&lt;/li>
&lt;/ol>
&lt;p>在&lt;a href="https://kane.mx/posts/effective-cloud-computing/oauth2-proxy-on-kubernetes/part2/">下篇&lt;/a>中，我们将图文详解如何一步步实现为一个无认证的企业文档Web应用添加基于&lt;a href="https://open-doc.dingtalk.com/microapp/serverapi2/vt6khw">钉钉的统一认证&lt;/a>。&lt;/p></description></item><item><title>IAM最佳实践</title><link>https://kane.mx/posts/effective-cloud-computing/iam-best-practice/</link><pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/effective-cloud-computing/iam-best-practice/</guid><description>
&lt;p>企业使用公有云服务的第一件事情就是创建云帐号，有了帐号之后如何让企业员工安全合规的使用云帐号下的各种资源是开启云之旅后的第一个考验。&lt;/p>
&lt;p>云计算厂商针对企业上云后面临的第一个需求已经推出了完善的解决方案--&lt;a href="https://en.wikipedia.org/wiki/Identity_management">Identity and Access Management&lt;/a>。&lt;a href="https://en.wikipedia.org/wiki/Identity_management">IAM&lt;/a>可以帮助云帐号安全地控制对云计算服务资源的访问。企业可以使用IAM控制对哪个用户进行身份验证 (登录) 和授权 (具有权限) 以使用资源。&lt;/p>
&lt;p>云厂商是否提供完善的IAM服务可以作为整体产品解决方案是否成熟的一个衡量指标，比如AWS的&lt;a href="https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/introduction.html">IAM&lt;/a>和阿里云的&lt;a href="https://help.aliyun.com/document_detail/28627.html">访问控制&lt;/a>都是较为成熟完善的产品。国内某个以AI能力为卖点的云厂商，在IAM产品方面几乎为零，很难相信对安全合规有需求的企业会完整使用他的云产品作为解决方案。&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Identity_management">IAM&lt;/a>通常提供以下功能:&lt;/p>
&lt;h3 id="对云账户的共享访问权限">对云账户的共享访问权限&lt;/h3>
&lt;p>允许在一个云账户下创建并管理多个用户身份，并允许给单个身份或一组身份（既可以是当前云帐号下也可以是其他云帐号下）分配不同的权限策略，从而实现不同用户拥有不同的云资源访问权限，而不必共享云帐号根用户的密码或访问密钥。&lt;/p>
&lt;h3 id="精细权限">精细权限&lt;/h3>
&lt;p>可以针对不同资源向不同人员授予不同权限。可以要求用户必须使用安全信道（如 SSL）、在指定时间范围、或在指定源 IP 条件下才能操作指定的云资源。&lt;/p>
&lt;h3 id="多重验证-mfa">多重验证 (MFA)&lt;/h3>
&lt;p>可以向云账户和各个用户添加双重身份验证以实现更高安全性。借助&lt;a href="https://en.wikipedia.org/wiki/Multi-factor_authentication">MFA&lt;/a>，用户不仅必须提供使用账户所需的密码或访问密钥，还必须提供来自经过特殊配置的设备的代码。&lt;/p>
&lt;h3 id="联合身份">联合身份&lt;/h3>
&lt;p>可以允许已在其他位置（例如，在企业网络中或通过 Internet 身份提供商）获得密码的用户获取对云账户的用户访问权限。&lt;/p>
&lt;p>后面会有专门的文章来讲如何实践联合身份。&lt;/p>
&lt;h3 id="统一账单">统一账单&lt;/h3>
&lt;p>云账户接收包括所有用户的资源操作所发生费用的统一账单。&lt;/p>
&lt;blockquote>
&lt;p>尽管&lt;a href="https://en.wikipedia.org/wiki/Identity_management">IAM&lt;/a>提供了上面种种功能，云帐号的管理者仍可通过一些最佳实践来更好的使用IAM产品来提升安全级别和减少运维成本。&lt;/p>
&lt;/blockquote>
&lt;h2 id="iam最佳实践">IAM最佳实践&lt;/h2>
&lt;ul>
&lt;li>尽量不要使用云帐号的根用户，&lt;strong>不要为根用户创建AK&lt;/strong>。云帐号管理员也使用各自独立的子账号。&lt;/li>
&lt;li>&lt;strong>为企业中每一个需要使用云服务的员工单独创建子账户，且默认不允许创建AK&lt;/strong>。便于员工离职的时候，通过删除帐号来完全清理用户在云计算平台的各种权限。&lt;/li>
&lt;li>密码安全实践，
&lt;ul>
&lt;li>限制密码强度&lt;strong>不少于8位&lt;/strong>，必须&lt;strong>由大小写字母、数字和符号中的三种组成&lt;/strong>。&lt;/li>
&lt;li>强制密码&lt;strong>过期时间不超过90天&lt;/strong>，且过期后不可登录。&lt;/li>
&lt;li>新密码至少&lt;strong>禁止使用前3次密码&lt;/strong>。&lt;/li>
&lt;li>设置密码重试约束，例如，&lt;strong>一小时内使用错误密码最大尝试9次登录&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>强制所有用户启用&lt;a href="https://en.wikipedia.org/wiki/Multi-factor_authentication">两步认证&lt;/a>。&lt;/li>
&lt;li>对访问网络有限制的企业，可以开启登录IP限制。&lt;/li>
&lt;li>[&lt;strong>推荐做法&lt;/strong>]已有SSO单点登录系统的企业，可以通过&lt;a href="https://en.wikipedia.org/wiki/SAML_2.0">SAML 2.0标准&lt;/a>实现从企业本地账号系统登录到阿里云，从而满足企业的统一用户登录认证要求。&lt;/li>
&lt;li>细粒度的权限管理，
&lt;ul>
&lt;li>&lt;strong>为各种云资源创建最细粒度的权限策略&lt;/strong>。例如，分别为RDS实例&lt;code>rds-instance-1&lt;/code>创建只读权限策略&lt;code>rds-instance-1-readonly-access&lt;/code>，RDS实例&lt;code>rds-instance-2&lt;/code>创建只读权限策略&lt;code>rds-instance-2-readonly-access&lt;/code>。&lt;/li>
&lt;li>&lt;strong>根据职能、部门等维度为云帐号子用户创建用户组&lt;/strong>。例如，按项目创建用户组，&lt;code>group-project-a&lt;/code>，&lt;code>group-project-b&lt;/code>。如果&lt;code>project-a&lt;/code>用户需要访问&lt;code>rds-instance-1&lt;/code>的信息，将自定义权限&lt;code>rds-instance-1-readonly-access&lt;/code>授权给&lt;code>group-project-a&lt;/code>。再将相关用户加到用户组&lt;code>group-project-a&lt;/code>中，这样这些用户就具有只读访问RDS实例&lt;code>rds-instance-1&lt;/code>的权限。而不是将所有RDS的读写权限都授予这些用户，&lt;strong>最大限度的保证用户不获取超过实际需要的权限&lt;/strong>。&lt;/li>
&lt;li>在实际场景中，通常会通过云计算服务的API来完成某些周期性任务，比如每日RDS中的慢查询统计、云帐号每日花费统计等。这些任务都需要一个云帐号的AK来完成API的身份认证。最佳的做法是，&lt;strong>为每类相关的任务创建一个&lt;code>功能性子账号&lt;/code>&lt;/strong>，禁用他们的web登录，且遵循特殊的命名规范(&lt;code>functional-&lt;/code>开头)，比如&lt;code>functional-rds-stats&lt;/code>、&lt;code>functional-cost-stats&lt;/code>。创建最小的权限策略，然后分配给这些功能性用户。例如，&lt;code>functional-rds-stats&lt;/code>仅被授予RDS只读权限，&lt;code>functional-cost-stats&lt;/code>仅被授予费用的只读权限。为这些子账号创建AK，每类任务使用不同的AK来完成API认证，而不是都使用同一个AK。这样的好处是，不同类型任务的AK具有不同的权限，最大限度的保护了云帐号的安全，并且这些AK不跟实际的员工子账号关联，不会因为员工帐号的变更而受影响。如有更高的安全合规的要求下，可以定期作废已有AK，创建新AK替换。至于AK怎样安全管理，之后会有专门的文章来详解。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>