<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on The road</title><link>https://kane.mx/tags/git/</link><description>Recent content in Git on The road</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 01 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kane.mx/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>基于 Flux 的 GitOps 管理 Crossplane 部署及资源</title><link>https://kane.mx/posts/gitops/crossplane-meets-gitops/</link><pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/gitops/crossplane-meets-gitops/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>在&lt;a href="https://kane.mx/posts/gitops/flux-in-action-2/#六小结及展望">Flux 部署实战的总结展望&lt;/a>中有一个方向是如何将云上基础设施资源同Kubernetes内资源统一管理，
而&lt;a href="https://crossplane.io/">Crossplane&lt;/a>提供了一个高度可扩展的后端，使用声明式程序同时编排应用程序和基础设施，不用关心它们在哪里运行。&lt;/p>
&lt;p>近期 AWS 官方博客宣布了 &lt;a href="https://aws.amazon.com/blogs/opensource/introducing-aws-blueprints-for-crossplane/">AWS Blueprints for Crossplane&lt;/a>，为客户提供了在 &lt;a href="https://aws.amazon.com/eks/">Amazon EKS&lt;/a>
上应用 Crossplane 的参考实现。&lt;/p>
&lt;p>&lt;a href="https://kane.mx/posts/gitops/crossplane-meets-gitops/">Read More&lt;/a>&lt;/p></description></item><item><title>基于 Flux 的 GitOps 实战（下）</title><link>https://kane.mx/posts/gitops/flux-in-action-2/</link><pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/gitops/flux-in-action-2/</guid><description>
&lt;p>在&lt;a href="https://kane.mx/posts/gitops/flux-in-action-1/">上篇&lt;/a>介绍基于 CNCF 下的 GitOps 工具 FluxCD v2
实现了管理多账户的 Kubernetes 集群的共享组件，Secrets 使用的最佳实践，
GitOps 流水线事件同 IM(Slack) 的集成，以及对 GitOps 代码的 CI 流程。&lt;/p>
&lt;p>本文将围绕如何使用 Flux 的多租户管理最佳实践，打造基于 GitOps 工作流程的共享服务平台，
实现租户(业务/应用团队)可自助的持续部署。&lt;/p>
&lt;p>&lt;a href="https://kane.mx/posts/gitops/flux-in-action-2/">Read More&lt;/a>&lt;/p></description></item><item><title>基于 Flux 的 GitOps 实战（上）</title><link>https://kane.mx/posts/gitops/flux-in-action-1/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/gitops/flux-in-action-1/</guid><description>
&lt;p>在&lt;a href="https://kane.mx/posts/gitops/the-best-practise-of-gitops-in-kubernetes/">前文&lt;/a>介绍了 GitOps 的概念，Kubernetes 上 GitOps 最佳实践以及对比了 CNCF 基金会下
云原生的 GitOps 工具（ArgoCD 和 Flux）。本篇将带你按照 Flux 的最佳实践在跨VPC跨账户的 Kubernetes
上实践 GitOps 的持续集成，轻松管理数十数百乃至更多的集群及部署在上面的应用。&lt;/p>
&lt;p>&lt;a href="https://kane.mx/posts/gitops/flux-in-action-1/">Read More&lt;/a>&lt;/p></description></item><item><title>Kuberentes 上 GitOps 最佳实践</title><link>https://kane.mx/posts/gitops/the-best-practise-of-gitops-in-kubernetes/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/gitops/the-best-practise-of-gitops-in-kubernetes/</guid><description>
&lt;p>今天 Kuberentes 已经成为IT基础设施的重要玩家，容器编排领域的事实标准。写于3年前的文章&lt;a href="https://kane.mx/posts/effective-cloud-computing/using-kubernetes-on-cloud/">不要自建 Kuberentes&lt;/a> 的观点已经被绝大多数的企业所认可和接受。&lt;/p>
&lt;p>然而同众多企业接触中发现，企业有很高的意愿采用 Kuberentes 管理工作负载，并且已有大量的企业已经将 Kuberentes 用于生产环境。
但如何对多套不同阶段的 Kuberentes 集群来做持续部署，做到高安全性、权限分离、可审计、保证业务团队的敏捷等需求感到困惑。
目前客户实现方式非常多样，并没有很好的遵循业界的最佳实践。&lt;/p>
&lt;p>&lt;a href="https://kane.mx/posts/gitops/the-best-practise-of-gitops-in-kubernetes/">Read More&lt;/a>&lt;/p></description></item><item><title>基于CodeCommit代码管理的无服务器架构Devops</title><link>https://kane.mx/posts/2020/codecommit-devops-model/</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2020/codecommit-devops-model/</guid><description>
&lt;p>&lt;a href="https://github.com/">Github&lt;/a>/&lt;a href="https://about.gitlab.com/">Gitlab&lt;/a>已经成为众多开发者非常熟悉的代码协作平台，通过他们参与开源项目或实施企业内部项目协作。&lt;/p>
&lt;p>AWS也提供了托管的、基于Git、安全且高可用的代码服务&lt;a href="https://aws.amazon.com/codecommit/">CodeCommit&lt;/a>。&lt;a href="https://aws.amazon.com/codecommit/">CodeCommit&lt;/a>主要针对企业用户场景，所以他并没有社交功能以及代码仓库fork功能，是否&lt;a href="https://aws.amazon.com/codecommit/">CodeCommit&lt;/a>就无法实现&lt;a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests">Github基于Pull Request&lt;/a>的协同工作模式呢？&lt;/p>
&lt;p>&lt;a href="https://kane.mx/posts/2020/codecommit-devops-model/">Read More&lt;/a>&lt;/p></description></item><item><title>Migration Clearcase to Git -- part 2</title><link>https://kane.mx/posts/archive/blogspot/migration-clearcase-to-git-part-2/</link><pubDate>Tue, 25 Oct 2011 19:45:00 +0800</pubDate><guid>https://kane.mx/posts/archive/blogspot/migration-clearcase-to-git-part-2/</guid><description>
Several days ago I had a post to record the unsuccessful experience to migrate source code from Clearcase to Git.
We have a new way after doing some brain storms. This way still is not a perfect solution, but it's much better than previous trial.
Use clearexport_ccase to export the source folder to intermittent data. See documentation of Clearcase admin. Create a temporary vob for importing the data later. See example.
&lt;p>&lt;a href="https://kane.mx/posts/archive/blogspot/migration-clearcase-to-git-part-2/">Read More&lt;/a>&lt;/p></description></item><item><title>Migrate Clearcase to Git</title><link>https://kane.mx/posts/archive/blogspot/migrate-clearcase-to-git/</link><pubDate>Mon, 17 Oct 2011 19:50:00 +0800</pubDate><guid>https://kane.mx/posts/archive/blogspot/migrate-clearcase-to-git/</guid><description>
I tried to migrate the source code of project from Clearcase to Git repository. As far as I know there is no elegant solution for such migration. For purpose of this migration, I want to keep the history and label of files in Clearcase after migrating to Git repository.
There are mature tools to migrate CVS/SVN repository to Git, so I tried to use Subversion as a bridge for my migration.
&lt;p>&lt;a href="https://kane.mx/posts/archive/blogspot/migrate-clearcase-to-git/">Read More&lt;/a>&lt;/p></description></item></channel></rss>