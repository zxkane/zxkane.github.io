<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RCP on The road</title><link>https://kane.mx/tags/rcp/</link><description>Recent content in RCP on The road</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2021, Kane Zhu; all rights reserved.</copyright><lastBuildDate>Fri, 09 Mar 2007 13:46:00 +0800</lastBuildDate><atom:link href="https://kane.mx/tags/rcp/index.xml" rel="self" type="application/rss+xml"/><item><title>[Eclipse]get rid of the menus of eclipse platform</title><link>https://kane.mx/posts/archive/blogspot/get-rid-of-menus-of-eclipse-platform/</link><pubDate>Fri, 09 Mar 2007 13:46:00 +0800</pubDate><guid>https://kane.mx/posts/archive/blogspot/get-rid-of-menus-of-eclipse-platform/</guid><description>
&lt;p>When you develop a rich client application base on eclipse framework, and your application require eclipse platform feature, you would find that your application has some menu items contributed by eclipse platform. Those menu items are defined by several plug-ins' implementation of actionSet extention point. In fact Eclipse provides an activity mechanism to suppress the extension points which you don't want to use. However, you must know the identification name of extension points which you want to suppress. It's a hard work to find out all of them from dozens of plugins. so, I wrote a utility function to list all the extension points of specified name.&lt;/p>
&lt;pre>&lt;code> IExtensionRegistry registry = Platform.getExtensionRegistry();
IExtensionPoint extensionPoint = registry.getExtensionPoint(&amp;quot;org.eclipse.ui.actionSets&amp;quot;);
IExtension\[\] extensions = extensionPoint.getExtensions();
for(int i = 0; i &amp;lt; extensions.length; i++){
IConfigurationElement elements\[\] = extensions\[i \].getConfigurationElements();
for(int j = 0; j &amp;lt; elements.length; j++){
String pluginId = elements\[j\].getNamespaceIdentifier();
if(pluginId.indexOf(&amp;quot;org.eclipse&amp;quot;) &amp;gt; -1){ //$NON-NLS-1$
IConfigurationElement\[\] subElements = elements\[j\].getChildren(&amp;quot;action&amp;quot;);
for(int m = 0; m &amp;lt; subElements.length; m++){
System.out.println(&amp;quot;Plugin: &amp;quot; + pluginId + &amp;quot; Id: &amp;quot; +
subElements\[m\].getAttribute(&amp;quot;id&amp;quot;));
}
}
}
}
&lt;/code>&lt;/pre>
&lt;p>and the follow snippet is about the activities of menus of eclipse platform:&lt;/p>
&lt;extension point="org.eclipse.ui.activities">
&lt;activity id="activity.platform" name="hidePlatformMenus"/>
&lt;activityPatternBinding activityId="activity.platform" pattern="org\\.eclipse\\.platform/org\\.eclipse\\.ui\\.cheatsheets\\.actions\\.CheatSheetHelpMenuAction"/>
&lt;activity id="activity.search" name="hideSearchMenus"/>
&lt;activityPatternBinding activityId="activity.search" pattern="org\\.eclipse\\.search/org\\.eclipse\\.search\\..*"/>
&lt;activity
id="activity.ide"
name="hideIDEMenus">
&lt;/activity>
&lt;activityPatternBinding
activityId="activity.ide"
pattern="org\\.eclipse\\.ui\\.ide/org\\.eclipse\\.ui\\.actions\\.showKeyAssistHandler">
&lt;/activityPatternBinding>
&lt;activityPatternBinding
activityId="activity.ide"
pattern="org\\.eclipse\\.ui\\.ide/org\\.eclipse\\.update\\.ui\\..*">
&lt;/activityPatternBinding>
&lt;activity
id="activity.editor"
name="hideEditorMenus">
&lt;/activity>
&lt;activityPatternBinding
activityId="activity.editor"
pattern="org\\.eclipse\\.ui\\.editors/org\\.eclipse\\.ui\\.edit\\.text\\.openExternalFile">
&lt;/activityPatternBinding>
&lt;activityPatternBinding
activityId="activity.editor"
pattern="org\\.eclipse\\.ui\\.editors/org\\.eclipse\\.ui\\.edit\\.text\\.delimiter\\..*">
&lt;/activityPatternBinding>
&lt;activity
id="activity.externaltool"
name="hideExternaltoolMenus">
&lt;/activity>
&lt;activityPatternBinding
activityId="activity.externaltool"
pattern="org\\.eclipse\\.ui\\.externaltools/org\\.eclipse\\.ui\\.externaltools\\.ExternalToolMenuDelegateMenu">
&lt;/activityPatternBinding>
&lt;/extension></description></item><item><title>[Eclipse]Eclipse update support</title><link>https://kane.mx/posts/archive/blogspot/eclipse-update-support/</link><pubDate>Wed, 17 Jan 2007 13:51:00 +0800</pubDate><guid>https://kane.mx/posts/archive/blogspot/eclipse-update-support/</guid><description>
&lt;p>Those days my work is focus on eclipse's update. Now I understand the general mechanism and meet some issues when using it in development work.&lt;/p>
&lt;p>The update mechanism includes four major types: install, enable, disable and uninstall. And all of those operations can be executed by command line, such as installing a feature can use following line:&lt;br>
-application org.eclipse.update.core.standaloneUpdate -command install -featureId my.feature -version 1.0.0 -from file:/v:/local_updateSite/ -to file:/v:/eclipse/.&lt;br>
The installation process would copy the feature and plugins which are included by the feature to the local site from the update site, then execute the feature's global install handler if it has one.&lt;/p>
&lt;p>Some strange issue occurs when I want to disable a feature.Then I try to disable the feature with command,&lt;br>
-command disable -featureId my.feature -version 1.0.0 -to file:/v:/eclipse/&lt;br>
The output of command means that the command is executed successfully.&lt;br>
But I list the status of features with command line &amp;quot;-command listFeatures&amp;quot;, the status of my.feature is still enable.&lt;br>
Then I try to uninstall my.feature with command,&lt;br>
-command uninstall -featureId my.feature -version 1.0.0 -to file:/v:/eclipse/&lt;br>
It fails, and the following is the root cause found in log file.&lt;br>
!MESSAGE [Cannot find unconfigured feature my.feature with version 1.0.0]&lt;br>
unconfigured feature means the feature is disabled.&lt;/p>
&lt;p>I posted my question in forum, and one guy told me that it might be a bug of eclipse and advised me to fire a bug for it.&lt;/p></description></item><item><title>[Eclipse]The call sequence between partActivated and menu update</title><link>https://kane.mx/posts/archive/blogspot/call-sequence-between-partactivated-and/</link><pubDate>Thu, 19 Oct 2006 12:42:00 +0800</pubDate><guid>https://kane.mx/posts/archive/blogspot/call-sequence-between-partactivated-and/</guid><description>
&lt;p>I met a defect that dynamically created menu items disappear after creating a new viewPart. It caused me overtime last Friday. Today I find the root cause.&lt;/p>
&lt;p>The scenario is:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>open first document, the items are shown well&lt;/p>
&lt;/li>
&lt;li>
&lt;p>open another document, the items disappear&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The requirement is that showing the menu items while current part is document, otherwise hide them.&lt;/p>
&lt;p>So our implementation is:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>when current document part is deactivated, set menu items invisible&lt;/p>
&lt;/li>
&lt;li>
&lt;p>when document part is activated, set menu items visible&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>After debugging, I found that menu items was updated before the part activated listener was notified. Hence the menu is invisible while the parent menu is updated. The resolved solution is that setting menu items visible while part opened listener is notified.&lt;/p></description></item></channel></rss>