<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>configuration on The road</title><link>https://kane.mx/tags/configuration/</link><description>Recent content in configuration on The road</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2021, Kane Zhu; all rights reserved.</copyright><lastBuildDate>Wed, 15 Feb 2012 11:36:00 +0800</lastBuildDate><atom:link href="https://kane.mx/tags/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>How to reuse the existing OpenID accounts after the host name of Gerrit server is changed</title><link>https://kane.mx/posts/archive/blogspot/how-to-reuse-existing-openid-accounts/</link><pubDate>Wed, 15 Feb 2012 11:36:00 +0800</pubDate><guid>https://kane.mx/posts/archive/blogspot/how-to-reuse-existing-openid-accounts/</guid><description>
&lt;p>An internal Gerrit server was moved, so the hostname of server is changed. However we are using OpenID for user control, the OpenID provider(such as Google account) will generate a new token for the new server(hostname changing will impact the identity token of Google account) when we login Gerrit with same OpenID account. Gerrit will create a new internal account by default even though my OpenID account has existed in the system and has a lot of activities.&lt;/p>
&lt;p>The solution is updating the 'ACCOUNT_EXTERNAL_IDS' table of Gerrit via gsql. Setting the 'ACCOUNT_ID' to your existing account_id for the new record whose 'EXTERNAL_ID' is the new token gotten from Google.&lt;/p>
&lt;blockquote>
&lt;p>update ACCOUNT_EXTERNAL_IDS set ACCOUNT_ID='1000001' where EXTERNAL_ID='https://www.google.com/accounts/o8/id?id=xxxxxxxxxx';&lt;/p>
&lt;/blockquote>
&lt;p>Then search the documentation of Gerrit, I find a configuration property looks like supporting such a migration for OpenID authentication.&lt;/p>
&lt;blockquote>
&lt;p>auth.allowGoogleAccountUpgrade&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Allows Google Account users to automatically update their Gerrit account when/if their Google Account OpenID identity token changes. Identity tokens can change if the server changes hostnames, or for other reasons known only to Google. The upgrade path works by matching users by email address if the identity is not present, and then changing the identity.&lt;/p>
&lt;p>This setting also permits old Gerrit 1.x users to seamlessly upgrade from Google Accounts on Google App Engine to OpenID authentication.&lt;/p>
&lt;p>Having this enabled incurs an extra database query when Google Account users register with the Gerrit server.&lt;/p>
&lt;p>By default, unset/false.&lt;/p>
&lt;/blockquote></description></item><item><title>JRE/JDK's certificate issue and solution</title><link>https://kane.mx/posts/archive/blogspot/jrejdks-certificate-issue-and-solution/</link><pubDate>Thu, 24 Nov 2011 15:58:00 +0800</pubDate><guid>https://kane.mx/posts/archive/blogspot/jrejdks-certificate-issue-and-solution/</guid><description>
&lt;p>The problem came from I tried to set up send mail server(SMTP) for my Gerrit server. My Gerrit server is using OpenID for user authorization, so I registered a new email account to send notification from Gerrit.&lt;/p>
&lt;p>Most of email service providers require the secure authorization when using its SMTP server to send mail. However the root CA of my email provider is not added into the default certificate of JRE. So Gerrit always failed to send email due to ssl verification exception.&lt;/p>
&lt;p>My solution is adding the certificate of SMTP server into the certificate used by JRE.&lt;/p>
&lt;p>The detail steps are below,&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Use &lt;strong>open_ssl&lt;/strong> utility to the certificate of SMTP server or its root CA of email provider. Below command can list the certificate of SMTP and its chain. You can paste any of them into a file.&lt;/p>
&lt;p>openssl s_client -connect smtp.163.com:465&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then import the certificate saved in previous step into my JRE's key store. The default password of JRE's default keystore is '&lt;strong>changeit&lt;/strong>'. You can find the &lt;em>cacerts&lt;/em> under jre/lib/security folder.&lt;/p>
&lt;p>sudo keytool -import -keystore cacerts -alias Smtp163com -file /tmp/smtp.163.PEM&lt;/p>
&lt;/li>
&lt;/ol></description></item></channel></rss>