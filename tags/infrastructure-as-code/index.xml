<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infrastructure as Code on The Road</title>
    <link>https://kane.mx/tags/infrastructure-as-code/</link>
    <description>Recent content in Infrastructure as Code on The Road</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kane.mx/tags/infrastructure-as-code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Batch简介</title>
      <link>https://kane.mx/posts/2019/aws-batch/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kane.mx/posts/2019/aws-batch/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/batch/&#34;&gt;AWS Batch&lt;/a&gt;是一个全托管的批处理调度服务，它可为用户管理所有基础设施，从而避免了预置、管理、监控和扩展批处理计算作业所带来的复杂性。当然&lt;a href=&#34;https://aws.amazon.com/batch/&#34;&gt;AWS Batch&lt;/a&gt;已与 AWS 平台原生集成，让用户能够利用 AWS 的扩展、联网和访问管理功能。让用户轻松运行能够安全地从 AWS 数据存储（如 Amazon S3 和 Amazon DynamoDB）中检索数据并向其中写入数据的作业。&lt;a href=&#34;https://aws.amazon.com/batch/&#34;&gt;AWS Batch&lt;/a&gt;可根据所提交的批处理作业的数量和资源要求预置计算资源并优化作业分配。能够将计算资源动态扩展至运行批处理作业所需的任何数量，从而不必受固定容量集群的限制。&lt;a href=&#34;https://aws.amazon.com/batch/&#34;&gt;AWS Batch&lt;/a&gt;还可以利用 Spot 实例，从而进一步降低运行批处理作业产生的费用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/batch/&#34;&gt;AWS Batch&lt;/a&gt;服务本身是&lt;strong&gt;免费&lt;/strong&gt;的，仅收取实际使用的 EC2 实例费用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实战Aliyun EDAS应用迁移AWS</title>
      <link>https://kane.mx/posts/2019/aliyun-edas-migration-in-action/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kane.mx/posts/2019/aliyun-edas-migration-in-action/</guid>
      <description>近期实践了将阿里云EDAS微服务应用迁移到AWS上，在这里分享一下迁移方案。 该方案涉及了以下三个方面， 微服务应用集群。在AWS上采用的ECS</description>
    </item>
    
    <item>
      <title>AWS CDK简介</title>
      <link>https://kane.mx/posts/2019/aws-cdk/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kane.mx/posts/2019/aws-cdk/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Infrastructure_as_code&#34;&gt;Infrastructure as Code&lt;/a&gt;(架构即代码)一直是衡量公有云是否支持良好运维能力的重要指标。作为云计算领先的AWS，通过服务&lt;a href=&#34;https://aws.amazon.com/cn/cloudformation/&#34;&gt;CloudFormation&lt;/a&gt;来编排云环境中的基础设施资源。不过由于CloudFormation是使用YAML/JSON编写的声明式语言，不善于处理逻辑，编写繁琐且不利于调试排错，对于新上手的Devops工程师来说也有不小的学习曲线。三方开源的工具&lt;a href=&#34;https://en.wikipedia.org/wiki/Terraform_(software)&#34;&gt;Terraform&lt;/a&gt;同样没有很好解决&lt;a href=&#34;https://aws.amazon.com/cn/cloudformation/&#34;&gt;CloudFormation&lt;/a&gt;存在的这些问题。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>