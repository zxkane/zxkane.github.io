<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Infrastructure as Code on The road</title><link>https://kane.mx/tags/infrastructure-as-code/</link><description>Recent content in Infrastructure as Code on The road</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2021, Kane Zhu; all rights reserved.</copyright><lastBuildDate>Wed, 16 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kane.mx/tags/infrastructure-as-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Effective AWS CDK for AWS CloudFormation</title><link>https://kane.mx/posts/2020/effective-aws-cdk-for-aws-cloudformation/</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2020/effective-aws-cdk-for-aws-cloudformation/</guid><description>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">Infrastructure as Code&lt;/a> is the trend to manage the resources of application. &lt;a href="https://aws.amazon.com/cloudformation/">AWS CloudFormation&lt;/a> is the managed serive offering the IaC capability on AWS &lt;a href="https://aws.amazon.com/blogs/aws/cloudformation-create-your-aws-stack-from-a-recipe/">since 2011&lt;/a>. CloudFormation uses the &lt;a href="https://en.wikipedia.org/wiki/Declarative_programming">declarative language&lt;/a> to manage your AWS resources with the style what you get is what you declare.&lt;/p>
&lt;p>However there are cons of CloudFormation as a declarative language,&lt;/p>
&lt;ul>
&lt;li>the readability and maintanence for applications involving lots of resources&lt;/li>
&lt;li>the reuseable of code, &lt;a href="https://aws.amazon.com/blogs/mt/introducing-aws-cloudformation-modules/">CloudFormation modules&lt;/a> released in re:Invent 2020 might help mitgate it&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://kane.mx/posts/2019/aws-cdk/">AWS CDK&lt;/a> provides the programming way to define the infra in code by your preferred programming languages, such as Typescript, Javascripte, Python, Java and C#. AWS CDK will synthesis the code to CloudFormation template, then deploying the stack via AWS CloudForamtion service. It benefits the Devops engineers manage the infra on AWS as programming application, having version control, code review, unit testing, integration testing and CI/CD pipelines, the deployment still depends on the mature CloudFormation service to rolling update the resources and rollback when failing.&lt;/p>
&lt;p>For solution development, using CDK indeed improves the productivity then publish the deployment assets as CloudFormation templates.&lt;/p>
&lt;p>Though CDK application can be synthesized to CloudFormation template, there are still some differences blocking the synthesized tempaltes to be deployed across multiple AWS regeions.&lt;/p>
&lt;p>This post will share the tips on how effectively writing AWS CDK application then deploying the application by CloudFormation across multiple regions.&lt;/p>
&lt;h2 id="general">General&lt;/h2>
&lt;h3 id="environment-agnostic-stack">Environment-agnostic stack&lt;/h3>
&lt;p>Don’t specify env with &lt;code>account&lt;/code> and &lt;code>region&lt;/code> like below that will generate account/region hardcode in CloudFormation template.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="ln">1&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">MyStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Stack1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nx">env&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nx">account&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;123456789012&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nx">region&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;us-east-1&amp;#39;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">});&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="use-cfnmappingcfncondition-instead-of-if-else-clause">use CfnMapping/CfnCondition instead of if-else clause&lt;/h3>
&lt;p>CloudFormation does not have logistic processing like programming language. Use &lt;code>CfnMapping&lt;/code> or &lt;code>CfnCondition&lt;/code> instead.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: the &lt;code>CfnMapping&lt;/code> does not support default value, you have to list all supported regions like below code snippet,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="ln"> 1&lt;/span>&lt;span class="nx">getAwsLoadBalancerControllerRepo() {&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">albImageMapping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">cdk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CfnMapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;ALBImageMapping&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">mapping&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="s1">&amp;#39;me-south-1&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;558608220178&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="s1">&amp;#39;eu-south-1&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;590381155156&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="s1">&amp;#39;ap-northeast-1&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;602401143452&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="s1">&amp;#39;ap-northeast-2&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;602401143452&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">...&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="s1">&amp;#39;ap-east-1&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;800184023465&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="s1">&amp;#39;af-south-1&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;877085696533&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="s1">&amp;#39;cn-north-1&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;918309763551&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="s1">&amp;#39;cn-northwest-1&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;961992271922&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">albImageMapping&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findInMap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cdk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Aws&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">REGION&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.dkr.ecr.&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">cdk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Aws&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">REGION&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">cdk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Aws&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">URL_SUFFIX&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">/amazon/aws-load-balancer-controller`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="never-use-stackregion">never use Stack.region&lt;/h2>
&lt;p>&lt;strong>Don’t&lt;/strong> rely on &lt;code>stack.region&lt;/code> to do the logistic for China regions. Use additional &lt;code>context&lt;/code> parameter or &lt;code>CfnMapping&lt;/code> like below snippet,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="ln"> 1&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">partitionMapping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">cdk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CfnMapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;PartitionMapping&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nx">mapping&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">aws&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nx">nexus&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;quay.io/travelaudience/docker-nexus&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">nexusProxy&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;quay.io/travelaudience/docker-nexus-proxy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="s1">&amp;#39;aws-cn&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">nexus&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/quay/travelaudience/docker-nexus&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nx">nexusProxy&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/quay/travelaudience/docker-nexus-proxy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nx">partitionMapping&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findInMap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cdk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Aws&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PARTITION&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;nexus&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Use &lt;strong>core.Aws.region&lt;/strong> token refered to the region which region of the stack is deployed.&lt;/p>
&lt;h3 id="explicitly-add-dependencies-on-resources-to-control-the-creationdeletion-order-of-resources">explicitly add dependencies on resources to control the creation/deletion order of resources&lt;/h3>
&lt;p>For example, when deploying a solution with creating a new VPC with NAT gateway, then deploying EMR cluster in private subnets of VPC. The EMR cluster might fail on creation due to network issue. It’s caused by the NAT gateway is not ready when initializing the EMR cluster, you have to manually create the dependencies among EMR cluster and NAT gateway.&lt;/p>
&lt;h2 id="eks-moduleaws-cdkaws-eks">EKS module(@aws-cdk/aws-eks)&lt;/h2>
&lt;h3 id="specify-kubectl-layer-when-creating-eks-cluster">&lt;del>specify kubectl layer when creating EKS cluster&lt;/del>&lt;/h3>
&lt;p>&lt;strong>NOTE&lt;/strong>: This tricky only applies for AWS CDK prior to &lt;a href="https://github.com/aws/aws-cdk/releases/tag/v1.81.0">1.81.0&lt;/a>. CDK will &lt;a href="https://github.com/aws/aws-cdk/pull/12129">bundle &lt;code>kubectl&lt;/code>, &lt;code>helm&lt;/code> and &lt;code>awscli&lt;/code> as lambda layer&lt;/a> instead of SAR appliction since &lt;a href="https://github.com/aws/aws-cdk/releases/tag/v1.81.0">1.81.0&lt;/a>, it resolves below limitation.&lt;/p>
&lt;p>EKS uses a lambda layer to run &lt;code>kubectl&lt;/code>/&lt;code>helm&lt;/code> cli as custom resource, the &lt;code>@aws-cdk/aws-eks&lt;/code> module depends on the &lt;code>Stack.region&lt;/code> to check the region to be deployed in synthesizing phase. It violates the principle of Environment-agnostic stack! Use below workaround to create the EKS cluster,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="ln"> 1&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">partitionMapping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">cdk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CfnMapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;PartitionMapping&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nx">mapping&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">aws&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="c1">// see https://github.com/aws/aws-cdk/blob/60c782fe173449ebf912f509de7db6df89985915/packages/%40aws-cdk/aws-eks/lib/kubectl-layer.ts#L6
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">kubectlLayerAppid&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;arn:aws:serverlessrepo:us-east-1:903779448426:applications/lambda-layer-kubectl&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="s1">&amp;#39;aws-cn&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">kubectlLayerAppid&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;arn:aws-cn:serverlessrepo:cn-north-1:487369736442:applications/lambda-layer-kubectl&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">kubectlLayer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">eks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">KubectlLayer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;KubeLayer&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nx">applicationId&lt;/span>: &lt;span class="kt">partitionMapping.findInMap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cdk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Aws&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PARTITION&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;kubectlLayerAppid&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">cluster&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">eks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Cluster&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;MyK8SCluster&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nx">vpc&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nx">defaultCapacity&lt;/span>: &lt;span class="kt">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nx">kubectlEnabled&lt;/span>: &lt;span class="kt">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nx">mastersRole&lt;/span>: &lt;span class="kt">clusterAdmin&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nx">version&lt;/span>: &lt;span class="kt">eks.KubernetesVersion.V1_16&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nx">coreDnsComputeType&lt;/span>: &lt;span class="kt">eks.CoreDnsComputeType.EC2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nx">kubectlLayer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">});&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>If you're interested on this issue, &lt;a href="https://github.com/aws/aws-cdk/issues/12018">see cdk issue for detail&lt;/a>.&lt;/p>
&lt;h3 id="manage-the-lifecycle-of-helm-chart-deployment">manage the lifecycle of helm chart deployment&lt;/h3>
&lt;p>The k8s helm chart might create AWS resources out of CloudFormation scope. You have to manage the lifecycle of those resources by yourself.&lt;/p>
&lt;p>For example, there is an EKS cluster with AWS load balancer controller, then you deploy a helm chart with ingress that will create ALB/NLB by the chart, you must clean those load balancers in deletion of the chart. Also the uninstallation of Helm chart is asynchronous, you have to watch the deletion of resource completing before continuing to clean other resources.&lt;/p>
&lt;h2 id="the-end">THE END&lt;/h2>
&lt;blockquote>
&lt;p>The tips will be updated when something new is found or the one is deprecated after CDK is updated.&lt;/p>
&lt;p>HAPPY CDK :satisfied:&lt;/p>
&lt;/blockquote></description></item><item><title>AWS Batch简介</title><link>https://kane.mx/posts/2019/aws-batch/</link><pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2019/aws-batch/</guid><description>
&lt;p>&lt;a href="https://aws.amazon.com/batch/">AWS Batch&lt;/a>是一个全托管的批处理调度服务，它可为用户管理所有基础设施，从而避免了预置、管理、监控和扩展批处理计算作业所带来的复杂性。当然&lt;a href="https://aws.amazon.com/batch/">AWS Batch&lt;/a>已与 AWS 平台原生集成，让用户能够利用 AWS 的扩展、联网和访问管理功能。让用户轻松运行能够安全地从 AWS 数据存储（如 Amazon S3 和 Amazon DynamoDB）中检索数据并向其中写入数据的作业。&lt;a href="https://aws.amazon.com/batch/">AWS Batch&lt;/a>可根据所提交的批处理作业的数量和资源要求预置计算资源并优化作业分配。能够将计算资源动态扩展至运行批处理作业所需的任何数量，从而不必受固定容量集群的限制。&lt;a href="https://aws.amazon.com/batch/">AWS Batch&lt;/a>还可以利用 Spot 实例，从而进一步降低运行批处理作业产生的费用。&lt;/p>
&lt;p>&lt;a href="https://aws.amazon.com/batch/">AWS Batch&lt;/a>服务本身是&lt;strong>免费&lt;/strong>的，仅收取实际使用的 EC2 实例费用。&lt;/p>
&lt;p>我创建了一个&lt;a href="https://github.com/zxkane/cdk-collections/blob/master/batch-demo/README.md">Batch App demo&lt;/a>来演示&lt;a href="https://aws.amazon.com/batch/">AWS Batch&lt;/a>相关使用方法。该示例通过一个Restful API接口来提交批处理任务，Restful API通过&lt;a href="https://aws.amazon.com/cn/elasticloadbalancing/">ALB&lt;/a> + &lt;a href="https://aws.amazon.com/cn/lambda/">Lambda函数&lt;/a>来暴露服务。Lambda函数被触发后，将新任务请求发送到&lt;a href="https://aws.amazon.com/cn/sqs/">SQS&lt;/a>服务。随后另一个Lambda将消费这个SQS，并将调用&lt;a href="https://aws.amazon.com/batch/">AWS Batch&lt;/a> API来提交新的批处理任务，同时将任务信息储存到&lt;a href="https://aws.amazon.com/cn/dynamodb/">DynamoDB&lt;/a>中。同时Demo创建了Batch任务会使用到的Docker Image，并且预先提交到&lt;a href="https://aws.amazon.com/cn/ecr/">ECR&lt;/a>中。同时Batch任务定义了使用的EC2实例类型(c5系列实例，且包括Spot和按需两种计费方式的实例，且优先使用Spot实例)，实例默认伸缩数量为0(没有可执行任务时将中止实例)。并且提交的任务分为计算任务和统计归并任务，统计归并任务会依赖所以计算任务执行完毕才开始执行。最后通过另一Restful接口查询计算任务的最终结果，该接口同样使用&lt;a href="https://aws.amazon.com/cn/elasticloadbalancing/">ALB&lt;/a> + &lt;a href="https://aws.amazon.com/cn/lambda/">Lambda函数&lt;/a>来实现。&lt;/p>
&lt;figure>&lt;img src="https://kane.mx/posts/2019/aws-batch/aws-batch-app-demo.png"
alt="Batch App架构图"/>
&lt;/figure>
&lt;p>Enjoy this &lt;a href="https://github.com/zxkane/cdk-collections/blob/master/batch-demo/README.md">Batch App demo&lt;/a> orchestrated by &lt;a href="https://aws.amazon.com/cn/cdk/">AWS CDK&lt;/a>.&lt;/p></description></item><item><title>实战Aliyun EDAS应用迁移AWS</title><link>https://kane.mx/posts/2019/aliyun-edas-migration-in-action/</link><pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2019/aliyun-edas-migration-in-action/</guid><description>
&lt;p>近期实践了将阿里云EDAS微服务应用迁移到AWS上，在这里分享一下迁移方案。&lt;/p>
&lt;p>该方案涉及了以下三个方面，&lt;/p>
&lt;ol>
&lt;li>微服务应用集群。在AWS上采用的&lt;a href="https://aws.amazon.com/cn/ecs/">ECS&lt;/a>集群部署微服务应用，通过&lt;a href="https://aws.amazon.com/cn/cloud-map/">Cloudmap&lt;/a>实现服务注册发现，&lt;a href="https://aws.amazon.com/cn/app-mesh/">App Mesh&lt;/a>实现服务间流量控制。更加详尽的微服务迁移要点和对应方案，详见下面的deck。&lt;/li>
&lt;li>Devops pipeline。使用托管的&lt;a href="https://aws.amazon.com/cn/codepipeline/">CodePipeline&lt;/a>，&lt;a href="https://aws.amazon.com/cn/codebuild/">CodeBuild&lt;/a>实现CI/CD。&lt;/li>
&lt;li>Infra as Code。利用AWS强大的&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">Infra as Code&lt;/a>能力，将云上的基础设施和微服务应用编排通过&lt;a href="https://kane.mx/posts/2019/aws-cdk/">CDK&lt;/a>代码实现。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>下面是迁移方案的deck。完整且可部署的PoC代码，点&lt;a href="https://github.com/zxkane/alibabacloud-microservice-demo">这里&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;div class="responsive-wrap">
&lt;iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRrD1lBxjbGsI0xIX8XTzUyJzDqnaqW97d6jGASdatRPYUkciSwxbeCJFQv-gwZLcZ31DFPXQtvmob1/embed?start=false&amp;amp;loop=false&amp;amp;delayms=5000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe>
&lt;/div></description></item><item><title>AWS CDK简介</title><link>https://kane.mx/posts/2019/aws-cdk/</link><pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2019/aws-cdk/</guid><description>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">Infrastructure as Code&lt;/a>(架构即代码)一直是衡量公有云是否支持良好运维能力的重要指标。作为云计算领先的AWS，通过服务&lt;a href="https://aws.amazon.com/cn/cloudformation/">CloudFormation&lt;/a>来编排云环境中的基础设施资源。不过由于CloudFormation是使用YAML/JSON编写的声明式语言，不善于处理逻辑，编写繁琐且不利于调试排错，对于新上手的Devops工程师来说也有不小的学习曲线。三方开源的工具&lt;a href="https://en.wikipedia.org/wiki/Terraform_(software)">Terraform&lt;/a>同样没有很好解决&lt;a href="https://aws.amazon.com/cn/cloudformation/">CloudFormation&lt;/a>存在的这些问题。&lt;/p>
&lt;p>&lt;a href="https://aws.amazon.com/cn/cdk/">AWS CDK&lt;/a>的出现解决了目前&lt;a href="https://aws.amazon.com/cn/cloudformation/">CloudFormation&lt;/a>存在的绝大部分问题，极大的提升基础设施编排代码的开发和维护效率。&lt;/p>
&lt;p>AWS CDK是一种开源软件开发框架，开发者可以用自己使用熟悉的编程语言模拟和预置云应用程序资源，目前支持Typescript/Javascript、Python、Java和.Net。AWS CDK将云中资源抽象对象化，通过极其简单语法描述资源对象或设置其各种属性(重载CDK默认属性设置)来创建或更新云中资源。&lt;/p>
&lt;p>例如，下面简单几行将创建一个新的名为&lt;code>Gameday&lt;/code>的VPC网络，并且跨了两个可用区分别创建了公有子网和私有子网。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="ln"> 1&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vpc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">ec2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Vpc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Gameday&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nx">cidr&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;10.0.0.0/16&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">maxAzs&lt;/span>: &lt;span class="kt">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nx">subnetConfiguration&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">cidrMask&lt;/span>: &lt;span class="kt">24&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Public&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">subnetType&lt;/span>: &lt;span class="kt">SubnetType.PUBLIC&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nx">cidrMask&lt;/span>: &lt;span class="kt">24&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Private&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nx">subnetType&lt;/span>: &lt;span class="kt">SubnetType.PRIVATE&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">});&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>我创建了两个示例项目使用了&lt;a href="https://aws.amazon.com/cn/cdk/">AWS CDK&lt;/a>快速创建应用环境且部署应用，&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/zxkane/gameday-cdk">Gameday&lt;/a> 为一个ECS上运行的Web应用编排了完整的环境，包括VPC、RDS Aurora、NAT Gateway、安全组、ECS集群、ECS Task定义、ALB负载均衡。&lt;/li>
&lt;li>&lt;a href="https://github.com/zxkane/serverless-domain-redirect">Serverlss Domain Redirect&lt;/a> 基于AWS搭建了无服务器架构的域名重定向服务。基于不同的配置参数，提供了基于 S3 + CloudFront + Route 53 或是 Lambda + API Gateway + Route 53 两种解决方案。&lt;/li>
&lt;/ul>
&lt;p>总体的来说，&lt;a href="https://aws.amazon.com/cn/cdk/">AWS CDK&lt;/a>是一个非常值得采用的云中资源编排和管理方式，高效的管理了AWS上的资源。&lt;/p>
&lt;p>由于CDK还在相对早期，成熟度还不是那么完美。我在使用中发现下面一些值得注意的问题。&lt;/p>
&lt;ol>
&lt;li>CDK程序最终还是创建了CloudFormation配置，提交到CloudFormation完成资源变更。核心的用户体验，需要依赖CloudFormation的能力。CloudFormation的创建或回退超时过长，时常影响资源部署体验。另外，清理资源的时候，遇到部分资源无法清理且缺少明确提示。比如Aurora集群。&lt;/li>
&lt;li>CDK类库缺少配置校验。这类错误只能通过CloudFormation部署后，才会被资源方发现并返回错误。导致整个创建的堆栈回退，调试大型的部署栈将花费比较长的时间。建议将整个部署拆分为多个小的堆栈，减小每次部署时间，方便调试。&lt;/li>
&lt;li>文档还比较简陋。缺少较为深入的示例。增加了开发人员的学习曲线。&lt;/li>
&lt;li>新版本向后兼容性不够好，时常新版本有break changes。在1.0GA之后发布的版本break changes相对减少，但仍然有出现。&lt;/li>
&lt;/ol></description></item></channel></rss>