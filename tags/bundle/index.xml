<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bundle on The Road</title>
    <link>https://kane.mx/tags/bundle/</link>
    <description>Recent content in Bundle on The Road</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Mar 2008 17:36:00 +0800</lastBuildDate>
    
	<atom:link href="https://kane.mx/tags/bundle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[OSGi][Equinox]the Bundle-NativeCode implementation in Equinox</title>
      <link>https://kane.mx/posts/archive/blogspot/bundle-nativecode-implementation-in/</link>
      <pubDate>Mon, 31 Mar 2008 17:36:00 +0800</pubDate>
      
      <guid>https://kane.mx/posts/archive/blogspot/bundle-nativecode-implementation-in/</guid>
      <description>OSGi Spec defines Bundle-NativeCode header to contain a specification of native code libraries contained in that bundle. All magic things are initialized by org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLibrary(String) and org.eclipse.osgi.framework.internal.core.BundleLoader.findLibrary(String). Then BundleLoader uses the org.eclipse.osgi.baseadaptor.BaseData(an implementation of BundleData) to find the library path, if the bundle is NOT a jar file, it would directly get the absolute path of library. Otherwise, the BaseData would extract the library file if it could NOT find it in OSGi bundle storage(located in ${data}/org.</description>
    </item>
    
  </channel>
</rss>