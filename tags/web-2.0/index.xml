<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web-2.0 on The road</title><link>https://kane.mx/tags/web-2.0/</link><description>Recent content in web-2.0 on The road</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2021, Kane Zhu; all rights reserved.</copyright><lastBuildDate>Sat, 07 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://kane.mx/tags/web-2.0/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring框架下的分布式session管理</title><link>https://kane.mx/posts/2016/clustered-session-under-spring-framework/</link><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2016/clustered-session-under-spring-framework/</guid><description>
&lt;p>在微服务和容器等技术的帮助下，Web应用可以较为容易的进行水平扩展，来部署更多的应用实例来提升请求处理数QPS。当Web服务有状态的时候，如何在集群下管理用户session成为新的待解决问题。&lt;/p>
&lt;!-- more -->
&lt;p>&lt;a href="https://spring.io">Spring Framework&lt;/a>针对此问题衍生出了一个子项目&lt;a href="http://projects.spring.io/spring-session/">Spring Session&lt;/a>来实现集群下的session管理。该项目提供了以下功能：&lt;/p>
&lt;ul>
&lt;li>提供API和实现管理用户session&lt;/li>
&lt;li>HttpSession - 替换实现应用容器(tomcat)中的HttpSession
&lt;ul>
&lt;li>Clustered Sessions - 实现集群的session而不依赖任何应用容器特定的解决方案&lt;/li>
&lt;li>Multiple Browser Sessions - 支持多个用户session保存在同一个浏览器实例中 (例如，类似Google的多用户认证).&lt;/li>
&lt;li>RESTful APIs - 通过支持session ids在Http请求头来支持Restful API的认证&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WebSocket - 能够保证HttpSession的存活当在接受WebSocket消息时&lt;/li>
&lt;/ul>
&lt;p>从上面的功能列表中，我们可以看到&lt;a href="http://projects.spring.io/spring-session/">Spring Session&lt;/a>能够满足集群下各种session的使用场景和需求。&lt;/p>
&lt;p>&lt;a href="http://projects.spring.io/spring-session/">Spring Session&lt;/a>在1.0.0 GA可以使用&lt;a href="http://redis.io/">Redis&lt;/a>做为session储存的backend。&lt;/p>
&lt;p>通过changelog，在最新的1.1.0 GA中支持&lt;a href="http://docs.spring.io/spring-session/docs/1.1.1.RELEASE/reference/html5/#what-s-new-in-1-1">自定义Cookie的创建&lt;/a>，允许自定义Cookie的过期时间，作用域等。在即将发布的&lt;a href="http://docs.spring.io/spring-session/docs/1.2.0.RC2/reference/html5/#what-s-new-in-1-2">1.2.0 GA&lt;/a>版本中，将添加支持JDBC的关系数据库和&lt;a href="https://www.mongodb.org/">MongoDB&lt;/a>作为session保存的backend。&lt;/p>
&lt;p>此外，&lt;a href="http://projects.spring.io/spring-session/">Spring Session&lt;/a>同&lt;a href="http://projects.spring.io/spring-boot/">Spring-boot&lt;/a>的应用有很好的&lt;a href="http://docs.spring.io/spring-session/docs/current/reference/html5/guides/boot.html">集成&lt;/a>，只需要十多行代码及配置即可集成！&lt;/p></description></item><item><title>V秘是如何构建的</title><link>https://kane.mx/posts/2016/how-we-build-videome/</link><pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2016/how-we-build-videome/</guid><description>
&lt;p>春天来了，&lt;a href="https://vme360.com">V秘&lt;/a>大家庭也新增了两位10后的传人。新爸爸经过一番忙乱后，希望在这里与大家分享&lt;a href="https://vme360.com">V秘&lt;/a>的架构，共同探讨如何快速的构建高可用，高性能的Web服务。&lt;/p>
&lt;p>&lt;a href="https://vme360.com">V秘&lt;/a>致力于提供最好的在线视频制作云平台。让用户随时随地零门槛的快速制作出高质量高清晰度的视频，来纪念记录生活中有意义的时刻，同时将这份快乐传递给更多的家人朋友一起分享。&lt;/p>
&lt;p>然而要可靠的可扩展的实现这样看似简单的需求，其背后确由众多知名开源技术，可靠的云服务，不间歇的监控运维来实现和保证的。&lt;/p>
&lt;!-- more -->
&lt;p>&lt;a href="https://vme360.com">V秘&lt;/a>架构的基本目标就是要实现，&lt;/p>
&lt;ul>
&lt;li>服务的高扩展性。有有效可靠的方法支撑数万并发到数十万，百万及更多的并发请求。&lt;/li>
&lt;li>服务的高可用性。各种服务都是多实例的集群，某些服务故障后，集群中的其他实例仍然能够提供服务。&lt;/li>
&lt;li>服务的自动化构建。从代码到服务部署上线是一套自动化的流程，越少的人工介入保证了服务的可用性。&lt;/li>
&lt;li>系统的实时监控。7x24小时的监控保证服务的可用性，当监控到数据异常或服务停止运行能及时告警引入人工运维团队。&lt;/li>
&lt;/ul>
&lt;p>更多细节请参阅下面的&lt;a href="http://www.slideshare.net/zxkane/how-we-build-vme">slides&lt;/a>,&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/EaBKeYtNuNyFPL" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/zxkane/how-we-build-vme" title="How we build Videome" target="_blank">How we build Videome&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="//www.slideshare.net/zxkane" target="_blank">Meng Xin Zhu&lt;/a>&lt;/strong> &lt;/div>
&lt;p>欢迎留言与我们探讨你的心得和建议。&lt;/p></description></item></channel></rss>