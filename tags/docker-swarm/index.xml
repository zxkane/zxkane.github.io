<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker-swarm on The road</title><link>https://kane.mx/tags/docker-swarm/</link><description>Recent content in docker-swarm on The road</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2021, Kane Zhu; all rights reserved.</copyright><lastBuildDate>Tue, 20 Sep 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://kane.mx/tags/docker-swarm/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Swarm mode(v1.12.x)的一些使用限制</title><link>https://kane.mx/posts/2016/the-limitations-docker-swarm-mode-v1.12/</link><pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2016/the-limitations-docker-swarm-mode-v1.12/</guid><description>
&lt;p>&lt;a href="https://docs.docker.com/engine/swarm/">Swarm mode&lt;/a>在&lt;a href="https://www.docker.com">Docker&lt;/a> v1.12中正式发布，&lt;a href="https://docs.docker.com/engine/swarm/">Swarm mode&lt;/a>带来了诸如Docker集群，容器编排，多主机网络等激动人心的特性。&lt;a href="https://vme360.com">V秘&lt;/a>团队也尝试着将各种后台服务部署到&lt;a href="https://docs.docker.com/engine/swarm/">Docker Swarm Cluster&lt;/a>获取更好的弹性计算能力。&lt;/p>
&lt;p>&lt;a href="https://www.docker.com">Docker v1.12&lt;/a>中正式发布的&lt;a href="https://docs.docker.com/engine/swarm/">Docker Swarm&lt;/a>在我们实用中发现仍有不少不足之处，让我们一一分享给大家。&lt;/p>
&lt;!-- more -->
&lt;ol>
&lt;li>无法将服务的published端口只绑定到特点的网卡上。比如我们的云主机（同时也是Swarm manager/node）有&lt;strong>eth0&lt;/strong>和&lt;strong>eth1&lt;/strong>两块网卡，分别连接内网和外网。我们计划在&lt;a href="https://docs.docker.com/engine/swarm/">Docker Swarm&lt;/a>中运行一个&lt;strong>nginx&lt;/strong>服务，通过80/443端口提供HTTP/HTTPS服务。当我们希望将&lt;strong>nginx&lt;/strong>中的Web服务暴露在云主机上时，我们通过以下命令创建&lt;strong>nginx&lt;/strong>服务。然而我们无法选择将published的&lt;strong>80&lt;/strong>端口绑定在哪个interface上。&lt;a href="https://docs.docker.com/engine/swarm/">Docker Swarm&lt;/a>会自动将服务监听到Swarm node的所有80端口上。如果我们只想将这个服务暴露在内网interface暂时无法实现。
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>docker service create --name vme-nginx --network vme-network --replicas &lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="se">&lt;/span> --publish 80:80 --publish 443:443 &lt;span class="se">\
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="se">&lt;/span> nginx:1.11&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>无法为&lt;a href="https://docs.docker.com/engine/swarm/">Docker Swarm&lt;/a>内运行的服务设置主机名。通过&lt;a href="https://docs.docker.com/engine/reference/run/">docker run命令&lt;/a>执行的容器可以设置hostname。比如，
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>docker run --hostname vme-nginx nginx:1.11&lt;/code>&lt;/pre>&lt;/div>
但是&lt;a href="https://docs.docker.com/engine/reference/commandline/service_create/">docker service create命令&lt;/a>缺少等价的参数为容器指定hostname。一些依赖于&lt;strong>hostname&lt;/strong>的服务将无法部署在&lt;a href="https://docs.docker.com/engine/swarm/">Docker Swarm&lt;/a>中，比如clustered rabbitmq。&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/compose/">Docker compose&lt;/a>还不能与&lt;a href="https://docs.docker.com/engine/swarm/">Docker Swarm&lt;/a>完美集成。目前有一个experimental的&lt;a href="https://docs.docker.com/compose/bundles/">Docker Stacks and Distributed Application Bundles&lt;/a>在尝试做更好的整合。&lt;/li>
&lt;li>&lt;strong>docker service update&lt;/strong>有时不能更新正在运行中的container。更多讨论见&lt;a href="https://github.com/docker/swarmkit/issues/1619">这个issue&lt;/a>。&lt;/li>
&lt;/ol></description></item><item><title>创建于Docker Swarm的服务无法在Ubuntu 14.04 LTS中运行</title><link>https://kane.mx/posts/2016/docker-swarm-mode-in-ubuntu-1404/</link><pubDate>Tue, 13 Sep 2016 00:00:00 +0000</pubDate><guid>https://kane.mx/posts/2016/docker-swarm-mode-in-ubuntu-1404/</guid><description>
&lt;p>&lt;a href="https://vme360.com">V秘&lt;/a>团队一直致力于用技术改善产品。&lt;a href="https://vme360.com">V秘&lt;/a>后台的各种服务一直是通过完善的Devops流程自动部署到&lt;a href="https://www.docker.com">Docker&lt;/a>容器集群。随着&lt;a href="https://docs.docker.com/engine/swarm/">Swarm mode&lt;/a>在&lt;a href="https://www.docker.com">Docker&lt;/a> v1.12中正式发布，&lt;a href="https://docs.docker.com/engine/swarm/">Swarm mode&lt;/a>带来了诸如Docker集群，多主机网络等激动人心的特性。我们也在尝试将&lt;a href="https://vme360.com">V秘&lt;/a>服务部署到&lt;a href="https://docs.docker.com/engine/swarm/">Docker Swarm Cluster&lt;/a>获取更好的弹性计算能力。&lt;/p>
&lt;p>然而我们将&lt;a href="https://vme360.com">V秘&lt;/a>的服务部署到&lt;a href="https://docs.docker.com/engine/swarm/">Docker Swarm Cluster&lt;/a>时遇到服务容器无法启动的错误。错误信息类似如下，&lt;/p>
&lt;blockquote>
&lt;p>starting container failed: could not add veth pair inside the network sandbox: could not find an appropriate master &amp;quot;ov-000100-1wkbc&amp;quot; for &amp;quot;vethee39f9d&amp;quot;&lt;/p>
&lt;/blockquote>
&lt;!-- more -->
&lt;p>经过与&lt;a href="https://github.com/docker/docker/issues">Docker 社区&lt;/a>的回馈讨论，暂时通过升级Docker主机(OS: Ubuntu 14.04 LTS)的内核版本解决了这个错误。&lt;/p>
&lt;p>具体方法如下，&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>root@swarm1:~# uname -r
&lt;span class="ln">2&lt;/span>3.13.0-32-generic
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>root@swarm1:~# apt-get install linux-generic-lts-vivid
&lt;span class="ln">5&lt;/span>root@swarm1:~# reboot
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>root@swarm1:~# uname -r
&lt;span class="ln">8&lt;/span>3.19.0-69-generic&lt;/code>&lt;/pre>&lt;/div>
&lt;p>至于这个错误的根本原因是&lt;a href="https://www.docker.com">Docker&lt;/a>的bug还是对Linux Kernel有特殊的要求，需要Docker开发进一步确认。如果对此问题有更多兴趣，可以关注&lt;a href="https://github.com/docker/docker/issues/25039">docker issue #25039&lt;/a>。&lt;/p></description></item></channel></rss>